#!/bin/bash


# THE IDEA:
# If we preprocess mainConfig.h before running 'make' on the project
# we can conditionally include stuff as needed

#OLD:
# A good test: 'configParser.sh TRUE'
# Also: __REGISTER_PREFIX__ (defined, with no value)

#macroddToFind="$1"

#if [ "$1" == "" ]
#then
#	echo "Usage: 'configParser.sh <macroName>'"
#	exit 1
#fi

ppFile="_BUILD/mainConfig.preprocessed"
cfgFile="mainConfig.h"


avr-gcc -o "$ppFile" -E -dM -D'TRUE=1' -D'FALSE=0' "$cfgFile"


if [ "$?" != "0" ]
then
	echo "preprocessing of mainConfig.h failed..."
	exit 1
fi


#lines="`grep "$macroToFind" "$ppFile"`"

#if [ "$?" != "0" ]
#then
#	echo "'$macroToFind' Not Defined"
#	exit 1
#fi


echo "### THIS FILE IS AUTOMATICALLY GENERATED ###"
echo "# Best to only refer to actual definitions in mainConfig.h"
echo "# As opposed to those generated by other #includes"
echo "# Since those aren't tested when automatically regenerating this file"
echo "#"
echo "# So, in your makefile you can do conditionals such as:"
echo "# 'ifeq \"\$(MAKE_MAINCONFIG__FB_QUESTION)\" \"TRUE\"'"
echo "#  and it will be true if mainConfig.h has '#define FB_QUESTION TRUE'"
echo ""

IFS="
"
#definitionFound=0
#for line in $lines
while [ 1 ]
do
	read -r line <&10 || break


	postDef="${line#"#define "}"

	if [ "$postDef" != "$line" ]
	then

	#	echo "Found Definition: '$line'"
		macro="${postDef%% *}"
	#	echo " Macro Name: '$macro'"
		value="${postDef#* }"
	#	echo " Value: '$value'"


		#Can't do this with function-like macros...
		# So, for now, just exclude them.
		if [ "${macro#*(}" != "$macro" ]
		then
			continue
		fi



#		echo "Found Definition: '$line' with value: '$value'"
		# '$value' here should not be in quotes... apparently
		# Otherwise, e.g. ifeq "$(MACRO)" "TRUE" doesn't work
		echo "MAKE_MAINCONFIG__$macro:=$value"
#		definitionFound=$((definitionFound+1))
#	else
#		echo "Found something else: '$line'"
	fi
done 10<"$ppFile"

#if [ "$definitionFound" != "0" ]
#then
#	exit 0
#else
#	exit 1
#fi


#while [ 1 ]
#do
#	read -r line <&10 || break

#done 10<"$ppFile"

exit 0
