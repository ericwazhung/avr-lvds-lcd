# $Id: avrdude.conf.in 1294 2014-03-12 23:03:18Z joerg_wunsch $ -*- text -*-


# This file is not handled by 'make flash' and 'make fuse'
# You need to rename it to .avrduderc in your home directory
# Or modify _commonCode.../_make/avrcommon.mk with -c as described below


#
# AVRDUDE Configuration File
#
# This file contains configuration data used by AVRDUDE which describes
# the programming hardware pinouts and also provides part definitions.
# AVRDUDE's "-C" command line option specifies the location of the
# configuration file.  The "-c" option names the programmer configuration
# which must match one of the entry's "id" parameter.  The "-p" option
# identifies which part AVRDUDE is going to be programming and must match
# one of the parts' "id" parameter.
#
# Possible entry formats are:
#
#   programmer
#       parent <id>                                 # optional parent
#       id       = <id1> [, <id2> [, <id3>] ...] ;  # <idN> are quoted strings
#       desc     = <description> ;                  # quoted string
#       type     = <type>;                          # programmer type, quoted string
#                          # supported programmer types can be listed by "-c ?type"
#       connection_type = parallel | serial | usb
#       baudrate = <num> ;                          # baudrate for avr910-programmer
#       vcc      = <num1> [, <num2> ... ] ;         # pin number(s)
#       buff     = <num1> [, <num2> ... ] ;         # pin number(s)
#       reset    = <num> ;                          # pin number
#       sck      = <num> ;                          # pin number
#       mosi     = <num> ;                          # pin number
#       miso     = <num> ;                          # pin number
#       errled   = <num> ;                          # pin number
#       rdyled   = <num> ;                          # pin number
#       pgmled   = <num> ;                          # pin number
#       vfyled   = <num> ;                          # pin number
#       usbvid   = <hexnum>;                        # USB VID (Vendor ID)
#       usbpid   = <hexnum> [, <hexnum> ...]        # USB PID (Product ID) (1)
#       usbdev   = <interface>;                     # USB interface or other device info 
#       usbvendor = <vendorname>;                   # USB Vendor Name
#       usbproduct = <productname>;                 # USB Product Name
#       usbsn    = <serialno>;                      # USB Serial Number
#
#        To invert a bit, use = ~ <num>, the spaces are important.
#        For a pin list all pins must be inverted.
#        A single pin can be specified as usual = ~ <num>, for lists
#        specify it as follows = ~ ( <num> [, <num2> ... ] ) .
#
#        (1) Not all programmer types can process a list of PIDs.
#     ;
#
#   part
#       id               = <id> ;                 # quoted string
#       desc             = <description> ;        # quoted string
#       has_jtag         = <yes/no> ;             # part has JTAG i/f
#       has_debugwire    = <yes/no> ;             # part has debugWire i/f
#       has_pdi          = <yes/no> ;             # part has PDI i/f
#       has_tpi          = <yes/no> ;             # part has TPI i/f
#       devicecode       = <num> ;            # deprecated, use stk500_devcode
#       stk500_devcode   = <num> ;                # numeric
#       avr910_devcode   = <num> ;                # numeric
#       signature        = <num> <num> <num> ;    # signature bytes
#       usbpid           = <num> ;                # DFU USB PID
#       chip_erase_delay = <num> ;                # micro-seconds
#       reset            = dedicated | io;
#       retry_pulse      = reset | sck;
#       pgm_enable       = <instruction format> ;
#       chip_erase       = <instruction format> ;
#       chip_erase_delay = <num> ;                # chip erase delay (us)
#       # STK500 parameters (parallel programming IO lines)
#       pagel            = <num> ;                # pin name in hex, i.e., 0xD7
#       bs2              = <num> ;                # pin name in hex, i.e., 0xA0
#       serial           = <yes/no> ;             # can use serial downloading
#       parallel         = <yes/no/pseudo>;       # can use par. programming
#       # STK500v2 parameters, to be taken from Atmel's XML files
#       timeout          = <num> ;
#       stabdelay        = <num> ;
#       cmdexedelay      = <num> ;
#       synchloops       = <num> ;
#       bytedelay        = <num> ;
#       pollvalue        = <num> ;
#       pollindex        = <num> ;
#       predelay         = <num> ;
#       postdelay        = <num> ;
#       pollmethod       = <num> ;
#       mode             = <num> ;
#       delay            = <num> ;
#       blocksize        = <num> ;
#       readsize         = <num> ;
#       hvspcmdexedelay  = <num> ;
#       # STK500v2 HV programming parameters, from XML
#       pp_controlstack  = <num>, <num>, ...;   # PP only
#       hvsp_controlstack = <num>, <num>, ...;  # HVSP only
#       hventerstabdelay = <num>;
#       progmodedelay    = <num>;               # PP only
#       latchcycles      = <num>;
#       togglevtg        = <num>;
#       poweroffdelay    = <num>;
#       resetdelayms     = <num>;
#       resetdelayus     = <num>;
#       hvleavestabdelay = <num>;
#       resetdelay       = <num>;
#       synchcycles      = <num>;               # HVSP only
#       chiperasepulsewidth = <num>;            # PP only
#       chiperasepolltimeout = <num>;
#       chiperasetime    = <num>;               # HVSP only
#       programfusepulsewidth = <num>;          # PP only
#       programfusepolltimeout = <num>;
#       programlockpulsewidth = <num>;          # PP only
#       programlockpolltimeout = <num>;
#       # JTAG ICE mkII parameters, also from XML files
#       allowfullpagebitstream = <yes/no> ;
#       enablepageprogramming = <yes/no> ;
#       idr              = <num> ;                # IO addr of IDR (OCD) reg.
#       rampz            = <num> ;                # IO addr of RAMPZ reg.
#       spmcr            = <num> ;                # mem addr of SPMC[S]R reg.
#       eecr             = <num> ;                # mem addr of EECR reg.
#                                                 # (only when != 0x3c)
#       is_at90s1200     = <yes/no> ;             # AT90S1200 part
#       is_avr32         = <yes/no> ;             # AVR32 part
#
#       memory <memtype>
#           paged           = <yes/no> ;          # yes / no
#           size            = <num> ;             # bytes
#           page_size       = <num> ;             # bytes
#           num_pages       = <num> ;             # numeric
#           min_write_delay = <num> ;             # micro-seconds
#           max_write_delay = <num> ;             # micro-seconds
#           readback_p1     = <num> ;             # byte value
#           readback_p2     = <num> ;             # byte value
#           pwroff_after_write = <yes/no> ;       # yes / no
#           read            = <instruction format> ;
#           write           = <instruction format> ;
#           read_lo         = <instruction format> ;
#           read_hi         = <instruction format> ;
#           write_lo        = <instruction format> ;
#           write_hi        = <instruction format> ;
#           loadpage_lo     = <instruction format> ;
#           loadpage_hi     = <instruction format> ;
#           writepage       = <instruction format> ;
#         ;
#     ;
#
# If any of the above parameters are not specified, the default value
# of 0 is used for numerics or the empty string ("") for string
# values.  If a required parameter is left empty, AVRDUDE will
# complain.
#
# Parts can also inherit parameters from previously defined parts
# using the following syntax. In this case specified integer and 
# string values override parameter values from the parent part. New 
# memory definitions are added to the definitions inherited from the 
# parent.
#
#   part parent <id>                              # quoted string
#       id               = <id> ;                 # quoted string
#       <any set of other parameters from the list above>
#     ;
#
# NOTES:
#   * 'devicecode' is the device code used by the STK500 (see codes 
#       listed below)
#   * Not all memory types will implement all instructions.
#   * AVR Fuse bits and Lock bits are implemented as a type of memory.
#   * Example memory types are:
#       "flash", "eeprom", "fuse", "lfuse" (low fuse), "hfuse" (high
#       fuse), "signature", "calibration", "lock"
#   * The memory type specified on the avrdude command line must match
#     one of the memory types defined for the specified chip.
#   * The pwroff_after_write flag causes avrdude to attempt to
#     power the device off and back on after an unsuccessful write to
#     the affected memory area if VCC programmer pins are defined.  If
#     VCC pins are not defined for the programmer, a message
#     indicating that the device needs a power-cycle is printed out.
#     This flag was added to work around a problem with the
#     at90s4433/2333's; see the at90s4433 errata at:
#
#         http://www.atmel.com/dyn/resources/prod_documents/doc1280.pdf
#
# INSTRUCTION FORMATS
#
#    Instruction formats are specified as a comma seperated list of
#    string values containing information (bit specifiers) about each
#    of the 32 bits of the instruction.  Bit specifiers may be one of
#    the following formats:
#
#       '1'  = the bit is always set on input as well as output
#
#       '0'  = the bit is always clear on input as well as output
#
#       'x'  = the bit is ignored on input and output
#
#       'a'  = the bit is an address bit, the bit-number matches this bit
#              specifier's position within the current instruction byte
#
#       'aN' = the bit is the Nth address bit, bit-number = N, i.e., a12
#              is address bit 12 on input, a0 is address bit 0.
#
#       'i'  = the bit is an input data bit
#
#       'o'  = the bit is an output data bit
#
#    Each instruction must be composed of 32 bit specifiers.  The
#    instruction specification closely follows the instruction data
#    provided in Atmel's data sheets for their parts.
#
# See below for some examples.
#
#
# The following are STK500 part device codes to use for the
# "devicecode" field of the part.  These came from Atmel's software
# section avr061.zip which accompanies the application note
# AVR061 available from:
#
#      http://www.atmel.com/dyn/resources/prod_documents/doc2525.pdf
#

#define ATTINY10    0x10  /* the _old_ one that never existed! */
#define ATTINY11    0x11
#define ATTINY12    0x12
#define ATTINY15    0x13
#define ATTINY13    0x14

#define ATTINY22    0x20
#define ATTINY26    0x21
#define ATTINY28    0x22
#define ATTINY2313  0x23

#define AT90S1200   0x33

#define AT90S2313   0x40
#define AT90S2323   0x41
#define AT90S2333   0x42
#define AT90S2343   0x43

#define AT90S4414   0x50
#define AT90S4433   0x51
#define AT90S4434   0x52
#define ATMEGA48    0x59

#define AT90S8515   0x60
#define AT90S8535   0x61
#define AT90C8534   0x62
#define ATMEGA8515  0x63
#define ATMEGA8535  0x64

#define ATMEGA8     0x70
#define ATMEGA88    0x73
#define ATMEGA168   0x86

#define ATMEGA161   0x80
#define ATMEGA163   0x81
#define ATMEGA16    0x82
#define ATMEGA162   0x83
#define ATMEGA169   0x84

#define ATMEGA323   0x90
#define ATMEGA32    0x91

#define ATMEGA64    0xA0

#define ATMEGA103   0xB1
#define ATMEGA128   0xB2
#define AT90CAN128  0xB3
#define AT90CAN64   0xB3
#define AT90CAN32   0xB3

#define AT86RF401   0xD0

#define AT89START   0xE0
#define AT89S51	    0xE0
#define AT89S52	    0xE1

# The following table lists the devices in the original AVR910
# appnote:
# |Device |Signature | Code |
# +-------+----------+------+
# |tiny12 | 1E 90 05 | 0x55 |
# |tiny15 | 1E 90 06 | 0x56 |
# |       |          |      |
# | S1200 | 1E 90 01 | 0x13 |
# |       |          |      |
# | S2313 | 1E 91 01 | 0x20 |
# | S2323 | 1E 91 02 | 0x48 |
# | S2333 | 1E 91 05 | 0x34 |
# | S2343 | 1E 91 03 | 0x4C |
# |       |          |      |
# | S4414 | 1E 92 01 | 0x28 |
# | S4433 | 1E 92 03 | 0x30 |
# | S4434 | 1E 92 02 | 0x6C |
# |       |          |      |
# | S8515 | 1E 93 01 | 0x38 |
# | S8535 | 1E 93 03 | 0x68 |
# |       |          |      |
# |mega32 | 1E 95 01 | 0x72 |
# |mega83 | 1E 93 05 | 0x65 |
# |mega103| 1E 97 01 | 0x41 |
# |mega161| 1E 94 01 | 0x60 |
# |mega163| 1E 94 02 | 0x64 |

# Appnote AVR109 also has a table of AVR910 device codes, which
# lists:
# dev         avr910   signature
# ATmega8     0x77     0x1E 0x93 0x07
# ATmega8515  0x3B     0x1E 0x93 0x06
# ATmega8535  0x6A     0x1E 0x93 0x08
# ATmega16    0x75     0x1E 0x94 0x03
# ATmega162   0x63     0x1E 0x94 0x04
# ATmega163   0x66     0x1E 0x94 0x02
# ATmega169   0x79     0x1E 0x94 0x05
# ATmega32    0x7F     0x1E 0x95 0x02
# ATmega323   0x73     0x1E 0x95 0x01
# ATmega64    0x46     0x1E 0x96 0x02
# ATmega128   0x44     0x1E 0x97 0x02
#
# These codes refer to "BOOT" device codes which are apparently
# different than standard device codes, for whatever reasons
# (often one above the standard code).

# There are several extended versions of AVR910 implementations around
# in the Internet.  These add the following codes (only devices that
# actually exist are listed):

# ATmega8515	0x3A
# ATmega128	0x43
# ATmega64	0x45
# ATtiny26	0x5E
# ATmega8535	0x69
# ATmega32	0x72
# ATmega16	0x74
# ATmega8	0x76
# ATmega169	0x78




#------------------------------------------------------------
# AT90PWM161
#------------------------------------------------------------
# This part stolen and modified from avrdude.conf's AT90PWM2
part																							#OK
     id            = "pwm161";														#OK
     desc          = "AT90PWM161";													#OK
     has_debugwire = yes;																#OK
#From AT90PWM81.xml: <ucFlashInst>0xB6,0x01,0x11</ucFlashInst>
     flash_instr   = 0xB6, 0x01, 0x11;												#OK
#From AT90PWM81.xml:
#<ucEepromInst>0xBB,0xFF,0xBB,0xEE,0xBB,0xCC,0xB2,0x0D,0xBE,0x01,0xB6,0x01,0xBA,0x0D,0xBB,0xBC,0x99,0xE1,0xBB,0xAC</ucEepromInst>
     eeprom_instr  = 0xBB, 0xFF, 0xBB, 0xEE, 0xBB, 0xCC, 0xB2, 			#OK
	                  0x0D, 0xBE, 0x01, 0xB6, 0x01, 0xBA, 0x0D, 			#OK
							0xBB, 0xBC, 0x99, 0xE1, 0xBB, 0xAC;						#OK
#AT90PWM81.xml does not list an STK500 <DeviceID>
# Several others don't as well... so it seems plausible we can get away without it.
# ATmega3250's entry in avrdude.conf has stk500_devcode commented-out
# (but does list avr910)
#     stk500_devcode   = 0x65;
##  avr910_devcode   = ?;
	  signature        = 0x1e 0x94 0x8B;                                 #OK. 81: 1e 93 88
#####STK500 params
#http://springuin.nl/articles/attiny43uavrdude
# Does not list these two
#	  pagel            = 0xD8;															
#     bs2              = 0xE2;														
######
	  reset            = io;															#dedicated | io ????

#From AT90PWM81.xml: <eraseDelay>45</eraseDelay>
     chip_erase_delay = 9000; 
# But, PWM2.xml lists 45...?
# And in at least a couple cases, I've seen it doubled... e.g. ATtiny12 lists <eraseDelay>100
# But avrdude.conf has chip_erase_delay    = 20000;

     pgm_enable       = "1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1",			#OK
                        "x x x x  x x x x    x x x x  x x x x";			#OK

     chip_erase       = "1 0 1 0  1 1 0 0    1 0 0 x  x x x x",			#OK
                        "x x x x  x x x x    x x x x  x x x x";			#OK
#From AT90PWM81.xml under <STK500_2>
#	     <timeout>200</timeout>
#       <stabDelay>100</stabDelay>
#       <cmdexeDelay>25</cmdexeDelay>
#       <synchLoops>32</synchLoops>
#       <byteDelay>0</byteDelay>
#       <pollIndex>3</pollIndex>
#       <pollValue>0x53</pollValue>
#     </IspEnterProgMode>
#     <IspLeaveProgMode>
#       <preDelay>1</preDelay>
#       <postDelay>1</postDelay>
#     </IspLeaveProgMode>
#     <IspChipErase>
#       <eraseDelay>45</eraseDelay>
#       <pollMethod>1</pollMethod>
    timeout		= 200;				#OK
    stabdelay		= 100;			#OK
    cmdexedelay		= 25;			#OK
    synchloops		= 32;				#OK
    bytedelay		= 0;				#OK
    pollindex		= 3;				#OK
    pollvalue		= 0x53;			#OK
    predelay		= 1;				#OK
    postdelay		= 1;				#OK
    pollmethod		= 1;				#OK
##### STK500v2 HV programming parameters
#From AT90PWM81.xml under <STK500_2>
    pp_controlstack     =	0xC4, 0xE4, 0xC4, 0xE4, 0xCC, 0xEC, 0xCC, #OK
                           0xEC, 0xD4, 0xF4, 0xD4, 0xF4, 0xDC, 0xFC,	#OK
                           0xDC, 0xFC, 0xC8, 0xE8, 0xD8, 0xF8, 0x4C,	#OK
                           0x6C, 0x5C, 0x7C, 0xEC, 0xBC, 0x00, 0x06,	#OK
                           0x00, 0x00, 0x00, 0x00; 						#OK
#        0x0E, 0x1E, 0x0F, 0x1F, 0x2E, 0x3E, 0x2F, 0x3F,
#        0x4E, 0x5E, 0x4F, 0x5F, 0x6E, 0x7E, 0x6F, 0x7F,
#        0x66, 0x76, 0x67, 0x77, 0x6A, 0x7A, 0x6B, 0x7B,
#        0xBE, 0xFD, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00;
#From AT90PWM81.xml under <STK500_2> After <PPControlStack> Under <PpEnterProgMode>
#        <stabDelay>100</stabDelay>
#        <progModeDelay>0</progModeDelay>
#        <latchCycles>5</latchCycles>
#        <toggleVtg>1</toggleVtg>
#        <powerOffDelay>15</powerOffDelay>
#        <resetDelayMs>1</resetDelayMs>
#        <resetDelayUs>0</resetDelayUs>

    hventerstabdelay    = 100;			# This is confusing... since it's PpEnterProgMode, not HV...
    progmodedelay       = 0;				#OK
    latchcycles         = 5;				#OK
    togglevtg           = 1;				#OK
    poweroffdelay       = 15;				#OK
    resetdelayms        = 1;				#OK
    resetdelayus        = 0;				#OK
#      <PpLeaveProgMode>
#        <stabDelay>15</stabDelay>
#        <resetDelay>15</resetDelay>
#      </PpLeaveProgMode>

    hvleavestabdelay    = 15;				# Also confusing...
    resetdelay          = 15;          #This was not entered for PWM2...

#      <PpChipErase>
#        <pulseWidth>0</pulseWidth>
#        <pollTimeout>10</pollTimeout>
#      </PpChipErase>
    chiperasepulsewidth = 0;				#OK
    chiperasepolltimeout = 10;			#OK

#      <PpProgramFuse>
#        <pulseWidth>0</pulseWidth>
#        <pollTimeout>5</pollTimeout>
#      </PpProgramFuse>
#      <PpProgramLock>
#        <pulseWidth>0</pulseWidth>
#        <pollTimeout>5</pollTimeout>
#      </PpProgramLock> 
    programfusepulsewidth = 0;			#OK
    programfusepolltimeout = 5;			#OK
    programlockpulsewidth = 0;			#OK
    programlockpolltimeout = 5;			#OK
########
     memory "eeprom"
         size            = 512;															#OK
# Judging by the fact that commands exist for read/write individual bytes, paged needn't be "yes"???
        paged           = no;																#?????
        page_size       = 4;																#OK
         #Table 21-15 in datasheet:
         min_write_delay = 4000;															#Listed as 3.6ms
         max_write_delay = 4500;															# Unlisted
         readback_p1     = 0xff;                                           #???
         readback_p2     = 0xff;                                           #???
         read            = "1  0  1  0   0  0  0  0   0 0 0 x  x x a9 a8",	#OK
                           "a7 a6 a5 a4  a3 a2 a1 a0  o o o o  o o o o";	#OK

         write           = "1  1  0  0   0  0  0  0   0 0 0 x  x x a9 a8",	#OK
                           "a7 a6 a5 a4  a3 a2 a1 a0  i i i i  i i i i";	#OK

	loadpage_lo	= "  1   1   0   0      0   0   0   1",							#OK, but "_lo"?
			        "  0   0   0   0      0   0   0   0",							#OK
			        "  0   0   0   0      0   0  a1  a0",							#OK
			        "  i   i   i   i      i   i   i   i";							#OK

	writepage	= "  1   1   0   0      0   0   1   0",							#OK
			        "  0   0   x   x      x   x   a9   a8",							#OK
			        " a7  a6  a5  a4     a3  a2   0   0",							#OK
			        "  x   x   x   x      x   x   x   x";							#OK
#      <PpProgramEeprom>
#        <pollTimeout>5</pollTimeout>
#        <mode>0x05</mode>
#        <blockSize>256</blockSize>
#      </PpProgramEeprom>
#      <PpReadEeprom>
#        <blockSize>256</blockSize>
#      </PpReadEeprom>
#WAIT:::
#      <IspProgramEeprom>
#        <mode>0x41</mode>
#        <blockSize>4</blockSize>
#        <delay>5</delay>
#        <cmd1>0xC1</cmd1>
#        <cmd2>0xC2</cmd2>
#        <cmd3>0x00</cmd3>
#        <pollVal1>0x00</pollVal1>
#        <pollVal2>0x00</pollVal2>
#      </IspProgramEeprom>
#      <IspReadEeprom>
#        <blockSize>256</blockSize>

	mode		= 0x41;																			#OK
	delay		= 5; # PWM2 was 6;															#OK
	blocksize	= 4;																			#OK
	readsize	= 256;																			#OK
       ;
     memory "flash"
         paged           = yes;															#Assumed
#Table 21-12 from datasheet:
         size            = 16384;			#Bytes									#OK
# 64 words is 128 bytes
         page_size       = 128;															#OK
         num_pages       = 128;															#OK
# Table 21-15 from datasheet:
         min_write_delay = 4500;															#OK
         max_write_delay = 4500;															#Unlisted
         readback_p1     = 0xff;															#???
         readback_p2     = 0xff;															#???

         read_lo         = "  0   0   1   0    0   0   0   0",					#OK
                           "  0   0   0  a12  a11 a10 a9  a8",					#OK
                           " a7  a6  a5  a4   a3  a2  a1  a0",					#OK
                           "  o   o   o   o    o   o   o   o";					#OK

         read_hi         = "  0   0   1   0    1   0   0   0",					#OK
                           "  0   0   0  a12  a11 a10 a9  a8",					#OK
                           " a7  a6  a5  a4   a3  a2  a1  a0",					#OK
                           "  o   o   o   o    o   o   o   o";					#OK

         loadpage_lo     = "  0   1   0   0    0   0   0   0",					#OK
                           "  0   0   0   x    x   x   x   x",					#OK
                           "  x   x  a5  a4   a3  a2  a1  a0",					#OK
                           "  i   i   i   i    i   i   i   i";					#OK

         loadpage_hi     = "  0   1   0   0    1   0   0   0",					#OK
                           "  0   0   0   x    x   x   x   x",					#OK
                           "  x   x  a5  a4   a3  a2  a1  a0",					#OK
                           "  i   i   i   i    i   i   i   i";					#OK

         writepage       = "  0  1  0  0     1   1   0   0",					#OK
                           "  0  0  0 a12   a11 a10 a9  a8",					#OK
                           " a7 a6  x  x     x   x   x   x",					#OK
                           "  x  x  x  x     x   x   x   x";					#OK

#      <IspProgramFlash>
#        <mode>0x41</mode>
#        <blockSize>64</blockSize>
#        <delay>10</delay>
#        <cmd1>0x40</cmd1>
#        <cmd2>0x4C</cmd2>
#        <cmd3>0x00</cmd3>
#        <pollVal1>0x00</pollVal1>
#        <pollVal2>0x00</pollVal2>
#      </IspProgramFlash>
#      <IspReadFlash>
#        <blockSize>256</blockSize>
	mode		= 0x41;						#OK
	delay		= 10; #PWM2 was6;			#OK
	blocksize	= 64;						#OK
	readsize	= 256;						#OK
       ;
#   AT90PWM2 has Signature Bytes: 0x1E 0x93 0x81.
     memory "signature"
         size            = 3;
         read            = "0  0  1  1   0  0  0  0   0  0  0  x   x  x  x  x", #OK
                           "x  x  x  x   x  x a1 a0   o  o  o  o   o  o  o  o"; #OK
       ;
     memory "lock"
         size            = 1;
         write           = "1 0 1 0  1 1 0 0  1 1 1 x  x x x x",				#OK
                           "x x x x  x x x x  1 1 i i  i i i i";				#OK

         read            = "0 1 0 1  1 0 0 0  0 0 0 0  0 0 0 0",				#OK
                           "x x x x  x x x x  x x o o  o o o o";				#OK
        min_write_delay = 9000;			#????
        max_write_delay = 9000;			#????
       ;

     memory "lfuse"												#"Write Fuse Bits"
         size            = 1;
         write           = "1 0 1 0  1 1 0 0  1 0 1 0  0 0 0 0",				#OK
                           "x x x x  x x x x  i i i i  i i i i";				#OK

         read            = "0 1 0 1  0 0 0 0  0 0 0 0  0 0 0 0",				#OK	
                           "x x x x  x x x x  o o o o  o o o o";				#OK
        min_write_delay = 9000;			#????
        max_write_delay = 9000;			#????
       ;

     memory "hfuse"												#"Write Fuse High Bits"
         size            = 1;
         write           = "1 0 1 0  1 1 0 0  1 0 1 0  1 0 0 0",				#OK
                           "x x x x  x x x x  i i i i  i i i i";				#OK

         read            = "0 1 0 1  1 0 0 0  0 0 0 0  1 0 0 0",				#OK
                           "x x x x  x x x x  o o o o  o o o o";				#OK
        min_write_delay = 9000;			#????
        max_write_delay = 9000;			#????
       ;

     memory "efuse"
         size            = 1;									#"Write Extended Fuse Bits"
         write           = "1 0 1 0  1 1 0 0  1 0 1 0  0 1 0 0",				#OK
                           "x x x x  x x x x  x x x x  x x i i";				#Per Manual... not iiiiiiii?

         read            = "0 1 0 1  0 0 0 0  0 0 0 0  1 0 0 0",				#OK
                           "x x x x  x x x x  o o o o  o o o o";				#OK
        min_write_delay = 9000;			#????
        max_write_delay = 9000;			#????
     ;

     memory "calibration"
         size            = 1;
         read            = "0  0  1  1   1  0  0  0    0 0 0 x  x x x x",	#OK
                           "0  0  0  0   0  0  0  0    o o o o  o o o o";	#OK
     ;
  ;


