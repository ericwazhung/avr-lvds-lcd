GAS LISTING /var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s 			page 1


   1               		.file	"hfModulation.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.stabs	"/Users/meh/_avrProjects/LCDdirectLVDS/60-thisGitThingIsMessingUpMyVersioningScheme/",100,0
  10               		.stabs	"_commonCode_localized/hfModulation/1.00/hfModulation.c",100,0,2,.Ltext0
  11               		.text
  12               	.Ltext0:
  13               		.stabs	"gcc2_compiled.",60,0,0,0
  14               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,1,0
  15               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,1,0
  16               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,1,0
  17               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,1,0
  18               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,1,0
  19               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,1,
  20               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,1,0
  21               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,1,0
  22               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,1,0
  23               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,1,0
  24               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,1,0
  25               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,1,0
  26               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,1,0
  27               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,1,0
  28               		.stabs	"void:t(0,15)=(0,15)",128,0,1,0
  29               		.stabs	"_commonCode_localized/hfModulation/1.00/hfModulation.h",130,0,0,0
  30               		.stabs	"/usr/local/lib/gcc/avr/4.4.5/../../../../avr/include/stdint.h",130,0,0,0
  31               		.stabs	"int8_t:t(2,1)=(0,10)",128,0,121,0
  32               		.stabs	"uint8_t:t(2,2)=(0,11)",128,0,122,0
  33               		.stabs	"int16_t:t(2,3)=(0,1)",128,0,123,0
  34               		.stabs	"uint16_t:t(2,4)=(0,4)",128,0,124,0
  35               		.stabs	"int32_t:t(2,5)=(0,3)",128,0,125,0
  36               		.stabs	"uint32_t:t(2,6)=(0,5)",128,0,126,0
  37               		.stabs	"int64_t:t(2,7)=(0,6)",128,0,128,0
  38               		.stabs	"uint64_t:t(2,8)=(0,7)",128,0,129,0
  39               		.stabs	"intptr_t:t(2,9)=(2,3)",128,0,142,0
  40               		.stabs	"uintptr_t:t(2,10)=(2,4)",128,0,147,0
  41               		.stabs	"int_least8_t:t(2,11)=(2,1)",128,0,159,0
  42               		.stabs	"uint_least8_t:t(2,12)=(2,2)",128,0,164,0
  43               		.stabs	"int_least16_t:t(2,13)=(2,3)",128,0,169,0
  44               		.stabs	"uint_least16_t:t(2,14)=(2,4)",128,0,174,0
  45               		.stabs	"int_least32_t:t(2,15)=(2,5)",128,0,179,0
  46               		.stabs	"uint_least32_t:t(2,16)=(2,6)",128,0,184,0
  47               		.stabs	"int_least64_t:t(2,17)=(2,7)",128,0,192,0
  48               		.stabs	"uint_least64_t:t(2,18)=(2,8)",128,0,199,0
  49               		.stabs	"int_fast8_t:t(2,19)=(2,1)",128,0,213,0
  50               		.stabs	"uint_fast8_t:t(2,20)=(2,2)",128,0,218,0
  51               		.stabs	"int_fast16_t:t(2,21)=(2,3)",128,0,223,0
  52               		.stabs	"uint_fast16_t:t(2,22)=(2,4)",128,0,228,0
  53               		.stabs	"int_fast32_t:t(2,23)=(2,5)",128,0,233,0
  54               		.stabs	"uint_fast32_t:t(2,24)=(2,6)",128,0,238,0
  55               		.stabs	"int_fast64_t:t(2,25)=(2,7)",128,0,246,0
  56               		.stabs	"uint_fast64_t:t(2,26)=(2,8)",128,0,253,0
  57               		.stabs	"intmax_t:t(2,27)=(2,7)",128,0,273,0
GAS LISTING /var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s 			page 2


  58               		.stabs	"uintmax_t:t(2,28)=(2,8)",128,0,278,0
  59               		.stabn	162,0,0,0
  60               		.stabs	"hfm_t:t(1,1)=(1,2)=B(1,3)=s4desiredSum:(2,3),0,16;maxPower:(2,2),16,8;power:(2,2),24,8;;",
  61               		.stabn	162,0,0,0
  62               		.stabs	"hfm_setup:F(0,15)",36,0,37,hfm_setup
  63               		.stabs	"modulator:P(0,16)=*(1,2)",64,0,37,30
  64               		.stabs	"power:P(2,2)",64,0,37,22
  65               		.stabs	"maxPower:P(2,2)",64,0,37,20
  66               	.global	hfm_setup
  67               		.type	hfm_setup, @function
  68               	hfm_setup:
  69               		.stabd	46,0,0
   1:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //high frequency modulation .94
   2:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
   3:_commonCode_localized/hfModulation/1.00/hfModulation.c **** #include "hfModulation.h"
   4:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
   5:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //OLD:100% = 255, 0% = 0...
   6:_commonCode_localized/hfModulation/1.00/hfModulation.c **** ///volatile uint8_t  newDesired = 0;
   7:_commonCode_localized/hfModulation/1.00/hfModulation.c **** // 100% = maxPower, 0% = 0... 
   8:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
   9:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  10:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  11:_commonCode_localized/hfModulation/1.00/hfModulation.c **** /* Basic algorithm concept:
  12:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *	///increment numSteps (no longer necessary)
  13:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  * 
  14:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *	- if the desired value is equal to the current average
  15:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		- restart (repeat the same pattern again, the overall average will then be the same...)
  16:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		- numSteps = 0
  17:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		- runningSum = 0
  18:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  * 
  19:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  * 	- if the desired (desiredSum) value is greater than the current "average" (runningSum) value  /
  20:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		///- Increment numSteps
  21:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		- turn on the output
  22:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		- add the maximum value to the sum to be averaged (runningSum)...
  23:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *  - if the desired value is less than the current average
  24:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		///- Increment numSteps
  25:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		- turn off the output
  26:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *		- add nothing to the runningSum
  27:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *
  28:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *
  29:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *	--CAN BE OPTIMIZED for no divisions and no multiplications (?!)
  30:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *	
  31:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  *	--NOT PERFECTLY ACCURATE unless called by timer interrupts...
  32:_commonCode_localized/hfModulation/1.00/hfModulation.c ****  */
  33:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  34:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //Mainly just for setting up the maxPower (divisor)
  35:_commonCode_localized/hfModulation/1.00/hfModulation.c **** // [can] use hfm_setPower otherwise...
  36:_commonCode_localized/hfModulation/1.00/hfModulation.c **** // can't tell how to get away without using hfm_setup once
  37:_commonCode_localized/hfModulation/1.00/hfModulation.c **** void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
  38:_commonCode_localized/hfModulation/1.00/hfModulation.c **** {
  70               		.stabn	68,0,38,.LM0-.LFBB1
  71               	.LM0:
  72               	.LFBB1:
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75 0000 FC01      		movw r30,r24
  39:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	modulator->desiredSum = 0;
GAS LISTING /var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s 			page 3


  76               		.stabn	68,0,39,.LM1-.LFBB1
  77               	.LM1:
  78 0002 1182      		std Z+1,__zero_reg__
  79 0004 1082      		st Z,__zero_reg__
  40:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	modulator->maxPower = maxPower;
  80               		.stabn	68,0,40,.LM2-.LFBB1
  81               	.LM2:
  82 0006 4283      		std Z+2,r20
  83               	.LBB4:
  84               	.LBB5:
  41:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	hfm_setPower(modulator, power);
  42:_commonCode_localized/hfModulation/1.00/hfModulation.c **** }
  43:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  44:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //For the most part, an hfm will have the same divisor all the time... (255)
  45:_commonCode_localized/hfModulation/1.00/hfModulation.c **** // This needs to be set, initially! 
  46:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //   either init it in the hfm variable declaration
  47:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //   or use hfm_setup (ideal)
  48:_commonCode_localized/hfModulation/1.00/hfModulation.c **** // however, sometimes it needs to be variable, thus hfm_setup (above)
  49:_commonCode_localized/hfModulation/1.00/hfModulation.c **** void hfm_setPower(hfm_t	*modulator, uint8_t power)
  50:_commonCode_localized/hfModulation/1.00/hfModulation.c **** {
  51:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//Don't allow power values > 1, otherwise who knows what'll happen...
  52:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//(This is probably unnecessary, but whatev)
  53:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//It's not, actually, if power's greater than maxPower, the values never reset
  54:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	// This is trouble, e.g. in heartbeat, where modulator.power is read
  55:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	if(power <= (modulator->maxPower))
  85               		.stabn	68,0,55,.LM3-.LFBB1
  86               	.LM3:
  87 0008 8281      		ldd r24,Z+2
  88 000a 8617      		cp r24,r22
  89 000c 00F0      		brlo .L2
  56:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		modulator->power = power;
  90               		.stabn	68,0,56,.LM4-.LFBB1
  91               	.LM4:
  92 000e 6383      		std Z+3,r22
  93 0010 0895      		ret
  94               	.L2:
  57:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	else
  58:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		modulator->power = modulator->maxPower;
  95               		.stabn	68,0,58,.LM5-.LFBB1
  96               	.LM5:
  97 0012 8281      		ldd r24,Z+2
  98 0014 8383      		std Z+3,r24
  99 0016 0895      		ret
 100               	.LBE5:
 101               	.LBE4:
 102               		.size	hfm_setup, .-hfm_setup
 103               	.Lscope1:
 104               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 105               		.stabd	78,0,0
 106               		.stabs	"hfm_setPower:F(0,15)",36,0,49,hfm_setPower
 107               		.stabs	"modulator:P(0,16)",64,0,49,30
 108               		.stabs	"power:P(2,2)",64,0,49,22
 109               	.global	hfm_setPower
 110               		.type	hfm_setPower, @function
 111               	hfm_setPower:
 112               		.stabd	46,0,0
  50:_commonCode_localized/hfModulation/1.00/hfModulation.c **** {
GAS LISTING /var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s 			page 4


 113               		.stabn	68,0,50,.LM6-.LFBB2
 114               	.LM6:
 115               	.LFBB2:
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118 0018 FC01      		movw r30,r24
  55:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	if(power <= (modulator->maxPower))
 119               		.stabn	68,0,55,.LM7-.LFBB2
 120               	.LM7:
 121 001a 8281      		ldd r24,Z+2
 122 001c 8617      		cp r24,r22
 123 001e 00F0      		brlo .L7
  56:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		modulator->power = power;
 124               		.stabn	68,0,56,.LM8-.LFBB2
 125               	.LM8:
 126 0020 6383      		std Z+3,r22
 127 0022 0895      		ret
 128               	.L7:
 129               		.stabn	68,0,58,.LM9-.LFBB2
 130               	.LM9:
 131 0024 8281      		ldd r24,Z+2
 132 0026 8383      		std Z+3,r24
 133 0028 0895      		ret
 134               		.size	hfm_setPower, .-hfm_setPower
 135               	.Lscope2:
 136               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 137               		.stabd	78,0,0
 138               		.stabs	"hfm_nextOutput:F(2,2)",36,0,73,hfm_nextOutput
 139               		.stabs	"modulator:P(0,16)",64,0,73,30
 140               	.global	hfm_nextOutput
 141               		.type	hfm_nextOutput, @function
 142               	hfm_nextOutput:
 143               		.stabd	46,0,0
  59:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		
  60:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //	modulator->stepNumber = 0;
  61:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  62:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //0.94 This is just a test... It should be OK, but it hasn't been
  63:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //     thoroughly-thought-out... (removal of these)
  64:_commonCode_localized/hfModulation/1.00/hfModulation.c **** // CAUSES BADNESS.
  65:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //0.94-2 this should no longer be necessary... (runningSum is no more)
  66:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //	modulator->runningSum = 0;
  67:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//0.94-2 should also no longer be necessary:
  68:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //	modulator->desiredSum = 0;
  69:_commonCode_localized/hfModulation/1.00/hfModulation.c **** }
  70:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  71:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //Returns 0 if the "output" should be "off" in this cycle
  72:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //		  1 if the "output" should be "on"  in this cycle
  73:_commonCode_localized/hfModulation/1.00/hfModulation.c **** uint8_t hfm_nextOutput(hfm_t *modulator)
  74:_commonCode_localized/hfModulation/1.00/hfModulation.c **** {
 144               		.stabn	68,0,74,.LM10-.LFBB3
 145               	.LM10:
 146               	.LFBB3:
 147               	/* prologue: function */
 148               	/* frame size = 0 */
 149 002a FC01      		movw r30,r24
  75:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	uint8_t toReturn;
  76:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	
GAS LISTING /var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s 			page 5


  77:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//The first time, this will be == desired*1... 
  78:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	// (and runningSum will be zero)
  79:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//(modulator->desiredSum) += (modulator->power);
  80:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  81:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
  82:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//The first time, since runningsum == 0,
  83:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//	if desiredSum == 0 we else...
  84:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//		clr == good
  85:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	// if desiredSum > 0 we if...
  86:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//		set == good
  87:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	
  88:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	// IF desired == 255, we want it never to clr...
  89:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//		but running will be 0 the first time
  90:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//		and we'll therefore if... set == good
  91:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//		and later we'll runningSum == desiredSum (above) 
  92:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//    and reset and if again
  93:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	if(modulator->desiredSum > 0)
 150               		.stabn	68,0,93,.LM11-.LFBB3
 151               	.LM11:
 152 002c 8081      		ld r24,Z
 153 002e 9181      		ldd r25,Z+1
 154 0030 1816      		cp __zero_reg__,r24
 155 0032 1906      		cpc __zero_reg__,r25
 156 0034 04F0      		brlt .L11
 157 0036 80E0      		ldi r24,lo8(0)
 158 0038 00C0      		rjmp .L12
 159               	.L11:
  94:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	{
  95:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		(modulator->desiredSum) -= (modulator->maxPower); //0xff;
 160               		.stabn	68,0,95,.LM12-.LFBB3
 161               	.LM12:
 162 003a 8081      		ld r24,Z
 163 003c 9181      		ldd r25,Z+1
 164 003e 2281      		ldd r18,Z+2
 165 0040 821B      		sub r24,r18
 166 0042 9109      		sbc r25,__zero_reg__
 167 0044 9183      		std Z+1,r25
 168 0046 8083      		st Z,r24
 169 0048 81E0      		ldi r24,lo8(1)
 170               	.L12:
  96:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		toReturn = TRUE;
  97:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	}
  98:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	else	//avg == desired is handled at the start... (except 0-case which works here too)
  99:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	{
 100:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		//Don't modify runningSum, wait until desiredSum catches up...
 101:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		toReturn = FALSE;
 102:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	}
 103:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	
 104:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	(modulator->desiredSum) += (modulator->power);
 171               		.stabn	68,0,104,.LM13-.LFBB3
 172               	.LM13:
 173 004a 2081      		ld r18,Z
 174 004c 3181      		ldd r19,Z+1
 175 004e 9381      		ldd r25,Z+3
 176 0050 290F      		add r18,r25
 177 0052 311D      		adc r19,__zero_reg__
 178 0054 3183      		std Z+1,r19
GAS LISTING /var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s 			page 6


 179 0056 2083      		st Z,r18
 180               	/* epilogue start */
 105:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 
 106:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	
 107:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	
 108:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //	(modulator->stepNumber)++;
 109:_commonCode_localized/hfModulation/1.00/hfModulation.c **** /*
 110:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	//Restart the cycle if the output average == the desired
 111:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	if(modulator->runningSum == modulator->desiredSum)
 112:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	{
 113:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		//Handled below...
 114:_commonCode_localized/hfModulation/1.00/hfModulation.c **** //		modulator->stepNumber = 0;
 115:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		modulator->runningSum = 0;
 116:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 		modulator->desiredSum = 0;
 117:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	}
 118:_commonCode_localized/hfModulation/1.00/hfModulation.c **** */	
 119:_commonCode_localized/hfModulation/1.00/hfModulation.c **** 	return toReturn;
 120:_commonCode_localized/hfModulation/1.00/hfModulation.c **** }
 181               		.stabn	68,0,120,.LM14-.LFBB3
 182               	.LM14:
 183 0058 0895      		ret
 184               		.size	hfm_nextOutput, .-hfm_nextOutput
 185               		.stabs	"toReturn:r(2,2)",64,0,75,24
 186               		.stabn	192,0,0,.LFBB3-.LFBB3
 187               		.stabn	224,0,0,.Lscope3-.LFBB3
 188               	.Lscope3:
 189               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 190               		.stabd	78,0,0
 191               		.stabs	"",100,0,0,.Letext0
 192               	.Letext0:
GAS LISTING /var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 hfModulation.c
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:2      *ABS*:0000003f __SREG__
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:3      *ABS*:0000003e __SP_H__
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:4      *ABS*:0000003d __SP_L__
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:6      *ABS*:00000001 __zero_reg__
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:68     .text:00000000 hfm_setup
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:111    .text:00000018 hfm_setPower
/var/folders/yG/yGnXnnFGGj4hKA71DL26EU+++TI/-Tmp-//cckhblji.s:142    .text:0000002a hfm_nextOutput

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
