
_BUILD/LCDdirectLVDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001a36  00001aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000126  0080006e  0080006e  00001ad8  2**0
                  ALLOC
  3 .stab         000044d0  00000000  00000000  00001ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002199  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	60 c3       	rjmp	.+1728   	; 0x6c2 <__ctors_end>
       2:	7a c3       	rjmp	.+1780   	; 0x6f8 <__bad_interrupt>
       4:	79 c3       	rjmp	.+1778   	; 0x6f8 <__bad_interrupt>
       6:	78 c3       	rjmp	.+1776   	; 0x6f8 <__bad_interrupt>
       8:	77 c3       	rjmp	.+1774   	; 0x6f8 <__bad_interrupt>
       a:	76 c3       	rjmp	.+1772   	; 0x6f8 <__bad_interrupt>
       c:	75 c3       	rjmp	.+1770   	; 0x6f8 <__bad_interrupt>
       e:	74 c3       	rjmp	.+1768   	; 0x6f8 <__bad_interrupt>
      10:	73 c3       	rjmp	.+1766   	; 0x6f8 <__bad_interrupt>
      12:	72 c3       	rjmp	.+1764   	; 0x6f8 <__bad_interrupt>
      14:	71 c3       	rjmp	.+1762   	; 0x6f8 <__bad_interrupt>
      16:	70 c3       	rjmp	.+1760   	; 0x6f8 <__bad_interrupt>
      18:	6f c3       	rjmp	.+1758   	; 0x6f8 <__bad_interrupt>
      1a:	6e c3       	rjmp	.+1756   	; 0x6f8 <__bad_interrupt>
      1c:	bf c8       	rjmp	.-3714   	; 0xfffff19c <__eeprom_end+0xff7ef19c>
      1e:	6c c3       	rjmp	.+1752   	; 0x6f8 <__bad_interrupt>
      20:	6b c3       	rjmp	.+1750   	; 0x6f8 <__bad_interrupt>
      22:	6a c3       	rjmp	.+1748   	; 0x6f8 <__bad_interrupt>
      24:	69 c3       	rjmp	.+1746   	; 0x6f8 <__bad_interrupt>

00000026 <sineTable>:
      26:	00 00 92 01 24 03 b6 04 48 06 d9 07 6a 09 fb 0a     ....$...H...j...
      36:	8c 0c 1c 0e ab 0f 3a 11 c8 12 55 14 e2 15 6e 17     ......:...U...n.
      46:	f9 18 82 1a 0b 1c 93 1d 1a 1f 9f 20 23 22 a6 23     ........... #".#
      56:	28 25 a8 26 26 28 a3 29 1f 2b 99 2c 11 2e 87 2f     (%.&&(.).+.,.../
      66:	fb 30 6e 32 df 33 4d 35 ba 36 24 38 8c 39 f2 3a     .0n2.3M5.6$8.9.:
      76:	56 3c b8 3d 17 3f 73 40 ce 41 25 43 7a 44 cd 45     V<.=.?s@.A%CzD.E
      86:	1c 47 69 48 b4 49 fb 4a 3f 4c 81 4d bf 4e fb 4f     .GiH.I.J?L.M.N.O
      96:	33 51 68 52 9b 53 c9 54 f5 55 1d 57 42 58 64 59     3QhR.S.T.U.WBXdY
      a6:	82 5a 9c 5b b3 5c c7 5d d7 5e e3 5f eb 60 f0 61     .Z.[.\.].^._.`.a
      b6:	f1 62 ee 63 e8 64 dd 65 cf 66 bc 67 a6 68 8b 69     .b.c.d.e.f.g.h.i
      c6:	6d 6a 4a 6b 23 6c f8 6c c9 6d 96 6e 5e 6f 22 70     mjJk#l.l.m.n^o"p
      d6:	e2 70 9d 71 54 72 07 73 b5 73 5f 74 04 75 a5 75     .p.qTr.s.s_t.u.u
      e6:	41 76 d8 76 6b 77 fa 77 84 78 09 79 89 79 05 7a     Av.vkw.w.x.y.y.z
      f6:	7c 7a ee 7a 5c 7b c5 7b 29 7c 88 7c e3 7c 39 7d     |z.z\{.{)|.|.|9}
     106:	89 7d d5 7d 1d 7e 5f 7e 9c 7e d5 7e 09 7f 37 7f     .}.}.~_~.~.~..7.
     116:	61 7f 86 7f a6 7f c1 7f d8 7f e9 7f f5 7f fd 7f     a...............
     126:	ff 7f                                               ..

00000128 <header>:
     128:	4c 43 44 64 69 72 65 63 74 4c 56 44 53 35 39 20     LCDdirectLVDS59 
     138:	32 30 31 33 2d 31 32 2d 31 32 20 31 30 3a 30 30     2013-12-12 10:00
     148:	3a 34 30 00                                         :40.

0000014c <characters>:
     14c:	00 0c 36 36 0c 00 1c 06 18 06 00 00 00 00 00 60     ..66...........`
     15c:	1e 0c 1e 1e 38 3f 1c 3f 1e 1e 00 00 18 00 06 1e     ....8?.?........
     16c:	3e 0c 3f 3c 3f 7f 7f 3c 33 1e 78 67 0f 63 63 1c     >.?<?..<3.xg.cc.
     17c:	3f 1e 3f 1e 3f 33 33 63 63 33 7f 1e 03 1e 08 00     ?.?.?33cc3......
     18c:	0c 00 07 00 38 00 1c 00 07 0c 18 07 0e 00 00 00     ....8...........
     19c:	00 00 00 00 08 00 00 00 00 00 00 38 18 07 6e 00     ...........8..n.
     1ac:	1e 36 36 3e 63 36 06 0c 0c 66 0c 00 00 00 30 33     .66>c6...f....03
     1bc:	0f 33 33 3c 03 06 33 33 33 00 00 0c 00 0c 33 63     .33<..333.....3c
     1cc:	1e 66 66 36 46 46 66 33 0c 30 66 06 77 67 36 66     .ff6FFf3.0f.wg6f
     1dc:	33 66 33 2d 33 33 63 63 33 33 06 06 18 1c 00 0c     3f3-33cc33......
     1ec:	00 06 00 30 00 36 00 06 00 00 06 0c 00 00 00 00     ...0.6..........
     1fc:	00 00 00 0c 00 00 00 00 00 00 0c 18 0c 3b 00 1e     .............;..
     20c:	36 7f 03 33 1c 03 06 18 3c 0c 00 00 00 18 3b 0c     6..3....<.....;.
     21c:	30 30 36 1f 03 30 33 33 0c 0c 06 3f 18 30 7b 33     006..033...?.0{3
     22c:	66 03 66 16 16 03 33 0c 30 36 06 7f 6f 63 66 33     f.f...3.06..ocf3
     23c:	66 07 0c 33 33 63 36 33 19 06 0c 18 36 00 18 1e     f..33c63....6...
     24c:	3e 1e 30 1e 06 6e 36 0e 1e 66 0c 37 1f 1e 3b 6e     >.0..n6..f.7..;n
     25c:	1b 3e 3e 33 33 63 63 33 3f 0c 18 0c 00 00 0c 00     .>>33cc3?.......
     26c:	36 1e 18 6e 00 06 18 ff 3f 00 3f 00 0c 3f 0c 1c     6..n....?.?..?..
     27c:	1c 33 30 1f 18 1e 3e 0c 0c 03 00 30 18 7b 33 3e     .30...>....0.{3>
     28c:	03 66 1e 1e 03 3f 0c 30 1e 06 6b 7b 63 3e 33 3e     .f...?.0..k{c>3>
     29c:	1c 0c 33 33 6b 1c 1e 0c 06 18 18 63 00 00 30 66     ..33k......c..0f
     2ac:	33 3e 33 0f 33 6e 0c 18 36 0c 7f 33 33 66 33 36     3>3.3n..6..33f36
     2bc:	03 0c 33 33 63 36 33 19 07 00 38 00 00 0c 00 7f     ..33c63...8.....
     2cc:	30 0c 3b 00 06 18 3c 0c 00 00 00 06 37 0c 06 30     0.;...<.....7..0
     2dc:	7f 30 33 0c 33 30 00 00 06 3f 18 0c 7b 3f 66 03     .03.30...?..{?f.
     2ec:	66 16 16 73 33 0c 33 36 46 63 73 63 06 3b 1e 38     f..s3.36Fcsc.;.8
     2fc:	0c 33 33 7f 36 0c 46 06 30 18 00 00 00 3e 66 03     .33.6.F.0....>f.
     30c:	33 3f 06 33 66 0c 18 1e 0c 6b 33 33 66 33 36 1e     3?.3f....k33f36.
     31c:	0c 33 33 6b 1c 33 0c 0c 18 0c 00 00 00 00 36 1f     .33k.3........6.
     32c:	66 33 00 0c 0c 66 0c 0e 00 0c 03 33 0c 33 33 30     f3...f.....3.330
     33c:	33 33 06 33 18 0c 0e 0c 00 0c 00 03 33 66 66 36     33.3........3ff6
     34c:	46 06 66 33 0c 33 66 66 63 63 36 06 1e 36 33 0c     F.f3.3ffcc6..63.
     35c:	33 1e 77 63 0c 63 06 60 18 00 00 00 33 66 33 33     3.wc.c.`....3f33
     36c:	03 06 3e 66 0c 18 36 0c 63 33 33 3e 3e 06 30 2c     ..>f..6.c33>>.0,
     37c:	33 1e 7f 36 3e 26 0c 18 0c 00 00 0c 00 36 0c 63     3..6>&.......6.c
     38c:	6e 00 18 06 00 00 0c 00 0c 01 1e 3f 3f 1e 30 1e     n..........??.0.
     39c:	1e 06 1e 0e 0c 0c 18 00 06 0c 1e 33 3f 3c 3f 7f     ...........3?<?.
     3ac:	0f 7c 33 1e 1e 67 7f 63 63 1c 0f 38 67 1e 1e 3f     .|3..g.cc..8g..?
     3bc:	0c 63 63 1e 7f 1e 40 1e 00 00 00 6e 3d 1e 6e 1e     .cc...@....n=.n.
     3cc:	0f 30 67 1e 1b 67 1e 63 33 1e 06 30 0f 1f 18 6e     .0g..g.c3..0...n
     3dc:	0c 36 63 30 3f 38 18 07 00 00 00 00 00 00 00 00     .6c0?8..........
     3ec:	00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00     ................
     3fc:	00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00     ................
     40c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     41c:	00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
     42c:	1f 00 00 0e 00 00 00 00 00 0f 78 00 00 00 00 00     ..........x.....
     43c:	00 00 1f 00 00 00 00 00                             ........

00000444 <pgm_tetPiece>:
     444:	f0 00 22 22 f0 00 22 22 60 0c 64 02 60 0c 64 02     ..""..""`.d.`.d.
     454:	c0 06 40 8c c0 06 40 8c e0 04 c4 04 e4 00 64 04     ..@...@.......d.
     464:	e0 08 4c 04 e2 00 44 06 e0 02 44 0c e8 00 46 04     ..L...D...D...F.
     474:	60 06 60 06 60 06 60 06                             `.`.`.`.

0000047c <pgm_image1>:
     47c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................
     48c:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     49c:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     4ac:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     4bc:	c0 00 0f 0f 0f 00 0f 0f 0f 0f 00 0f 0f 0f 00 c0     ................
     4cc:	00 0f 0f 0f 00 00 00 0f 0f 00 00 00 0f 0f 0f 00     ................
     4dc:	00 0f 0f 0f 0f 00 0f 0f 0f 0f 00 0f 0f 0f 0f 00     ................
     4ec:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     4fc:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     50c:	00 0f 0f 00 00 0f 0f 0f 0f 0f 0f 00 00 0f 0f 00     ................
     51c:	00 0f 0f 0f 00 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     52c:	c0 00 0f 0f 0f 00 00 00 00 00 00 0f 0f 0f 00 c0     ................
     53c:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     54c:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     55c:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     56c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................

0000057c <pgm_image2>:
     57c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................
     58c:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     59c:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     5ac:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     5bc:	c0 00 0f 0f 0f 00 0f 0f 0f 0f 0f 0f 0f 0f 00 c0     ................
     5cc:	00 0f 0f 0f 00 00 00 0f 0f 00 0f 0f 0f 0f 0f 00     ................
     5dc:	00 0f 0f 0f 0f 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     5ec:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     5fc:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     60c:	00 0f 0f 00 00 0f 0f 0f 0f 0f 0f 00 00 0f 0f 00     ................
     61c:	00 0f 0f 0f 00 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     62c:	c0 00 0f 0f 0f 00 00 00 00 00 00 0f 0f 0f 00 c0     ................
     63c:	c0 00 00 0f 0f 0f 00 03 00 03 00 0f 0f 00 00 c0     ................
     64c:	c0 c0 00 00 0f 0f 00 03 03 03 00 0f 00 00 c0 c0     ................
     65c:	c0 c0 c0 00 00 0f 0f 00 00 00 0f 00 00 c0 c0 c0     ................
     66c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................

0000067c <__c.2309>:
     67c:	20 54 68 65 20 51 75 69 63 6b 20 42 72 6f 77 6e      The Quick Brown
     68c:	20 46 6f 78 20 4a 75 6d 70 65 64 20 4f 76 65 72      Fox Jumped Over
     69c:	20 54 68 65 20 4c 61 7a 79 20 44 6f 67 21 00         The Lazy Dog!.

000006ab <__c.1838>:
     6ab:	45 46 47 65 66 67 00                                EFGefg.

000006b2 <__c.1832>:
     6b2:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000006c2 <__ctors_end>:
     6c2:	11 24       	eor	r1, r1
     6c4:	1f be       	out	0x3f, r1	; 63
     6c6:	cf e5       	ldi	r28, 0x5F	; 95
     6c8:	d2 e0       	ldi	r29, 0x02	; 2
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	cd bf       	out	0x3d, r28	; 61

000006ce <__do_copy_data>:
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	a0 e6       	ldi	r26, 0x60	; 96
     6d2:	b0 e0       	ldi	r27, 0x00	; 0
     6d4:	e6 e3       	ldi	r30, 0x36	; 54
     6d6:	fa e1       	ldi	r31, 0x1A	; 26
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <__do_copy_data+0x10>
     6da:	05 90       	lpm	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	ae 36       	cpi	r26, 0x6E	; 110
     6e0:	b1 07       	cpc	r27, r17
     6e2:	d9 f7       	brne	.-10     	; 0x6da <__do_copy_data+0xc>

000006e4 <__do_clear_bss>:
     6e4:	11 e0       	ldi	r17, 0x01	; 1
     6e6:	ae e6       	ldi	r26, 0x6E	; 110
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <.do_clear_bss_start>

000006ec <.do_clear_bss_loop>:
     6ec:	1d 92       	st	X+, r1

000006ee <.do_clear_bss_start>:
     6ee:	a4 39       	cpi	r26, 0x94	; 148
     6f0:	b1 07       	cpc	r27, r17
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <.do_clear_bss_loop>
     6f4:	43 d5       	rcall	.+2694   	; 0x117c <main>
     6f6:	9d c9       	rjmp	.-3270   	; 0xfffffa32 <__eeprom_end+0xff7efa32>

000006f8 <__bad_interrupt>:
     6f8:	83 cc       	rjmp	.-1786   	; 0x0 <__vectors>

000006fa <adc_select>:
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     6fa:	97 b1       	in	r25, 0x07	; 7
     6fc:	8f 71       	andi	r24, 0x1F	; 31
     6fe:	90 7e       	andi	r25, 0xE0	; 224
     700:	89 2b       	or	r24, r25
     702:	87 b9       	out	0x07, r24	; 7
}
     704:	08 95       	ret

00000706 <adc_startConversion>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     706:	86 b1       	in	r24, 0x06	; 6

//Return TRUE on error (if there was a previous conversion in progress...)
uint8_t adc_startConversion(void)
{
	//Check if a conversion is already in progress...
	if(adc_isBusy())
     708:	80 74       	andi	r24, 0x40	; 64
     70a:	11 f0       	breq	.+4      	; 0x710 <adc_startConversion+0xa>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	08 95       	ret
	// until a conversion is started. Once the conversion starts, the channel and 
	// reference selection is locked to ensure a sufficient sampling time for the ADC."
	
	//"In Single Conversion mode, write this bit to one to start each conversion."
	// BEWARE: calling this will CLEAR the conversion-complete indicator
	setbit(ADSC, ADCSRA);
     710:	36 9a       	sbi	0x06, 6	; 6
     712:	80 e0       	ldi	r24, 0x00	; 0
	return FALSE;
}
     714:	08 95       	ret

00000716 <adc_init>:
	// (i.e. a 3.3V voltage regulator output)
	//Technically, these values are reset-defaults, but just make sure
	//!!!According to attiny861, these values set VCC as the voltage ref
	//   NOT an external reference. So the above note seems odd...
	// This IS what I want on the Tiny861 threePinIDer...
	clrbit(REFS0, ADMUX);
     716:	3e 98       	cbi	0x07, 6	; 7
	clrbit(REFS1, ADMUX);
     718:	3f 98       	cbi	0x07, 7	; 7
	
	//Use right-adjusted output
	// so values read from the 2-byte register are:
	//	8-bits in the Low reg, and 2 in the High reg
	clrbit(ADLAR, ADMUX);
     71a:	3d 98       	cbi	0x07, 5	; 7

	//Enable the ADC
	// (see description for noise cancelling techniques)
	setbit(ADEN, ADCSRA);
     71c:	37 9a       	sbi	0x06, 7	; 6
	
	//Don't use Auto Triggering
	// (@@@ could use a timer, etc.)
	clrbit(ADATE, ADCSRA);
     71e:	35 98       	cbi	0x06, 5	; 6
	// "ADIF is cleared by writing a logical one to the flag."
	// " BEWARE that if doing a Read-Modify-Write on ADCSRA, a pending interrupt can be disabled. "
	//   because the flag may be 1 when read, and re-writing 1 clears it.
	//   ???could get around this by using a special set/clrbit instruction which would always write 0
	//   to this bit...
	setbit(ADIF, ADCSRA);
     720:	34 9a       	sbi	0x06, 4	; 6
	
	//make sure the interrupt is not enabled...
	clrbit(ADIE, ADCSRA);
     722:	33 98       	cbi	0x06, 3	; 6
}

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     724:	86 b1       	in	r24, 0x06	; 6
     726:	87 60       	ori	r24, 0x07	; 7
     728:	86 b9       	out	0x06, r24	; 6
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     72a:	87 b1       	in	r24, 0x07	; 7
     72c:	8f 61       	ori	r24, 0x1F	; 31
     72e:	87 b9       	out	0x07, r24	; 7
	//Start a conversion so it will be initialized for the next...
	//"The first conversion after ADSC has been written 
	// after the ADC has been enabled ... 
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();
     730:	ea df       	rcall	.-44     	; 0x706 <adc_startConversion>
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     732:	86 b1       	in	r24, 0x06	; 6
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();

	//Wait for the initialization to complete for lockstepping...
	while(adc_isBusy())
     734:	80 74       	andi	r24, 0x40	; 64
     736:	e9 f7       	brne	.-6      	; 0x732 <adc_init+0x1c>
	{}
}
     738:	08 95       	ret

0000073a <adc_getValue>:
//Return the last value read by the ADC
// check if adc_isBusy is true before reading, in lockstep...
// Since ADLAR is cleared, it will be the low ten bits 
uint16_t adc_getValue(void)
{
	return ADC;
     73a:	24 b1       	in	r18, 0x04	; 4
     73c:	35 b1       	in	r19, 0x05	; 5
	//reading both values takes longer and some other things mentioned in the manual
	// (i.e. it might be more efficient to only read one byte if acceptable)
	// unless only reading ADCH: "ADCL must be read first, then ADCH"
	//!!! Might want to verify this occurs properly in the assembly code
	
}
     73e:	c9 01       	movw	r24, r18
     740:	08 95       	ret

00000742 <adc_isBusy>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     742:	86 b1       	in	r24, 0x06	; 6
     744:	82 95       	swap	r24
     746:	86 95       	lsr	r24
     748:	86 95       	lsr	r24
}
     74a:	81 70       	andi	r24, 0x01	; 1
     74c:	08 95       	ret

0000074e <adc_setPrescaler>:

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     74e:	96 b1       	in	r25, 0x06	; 6
     750:	87 70       	andi	r24, 0x07	; 7
     752:	98 7f       	andi	r25, 0xF8	; 248
     754:	89 2b       	or	r24, r25
     756:	86 b9       	out	0x06, r24	; 6
}
     758:	08 95       	ret

0000075a <adc_takeInput>:
	uint8_t bitNum = inputNum;

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
     75a:	83 30       	cpi	r24, 0x03	; 3
     75c:	80 f0       	brcs	.+32     	; 0x77e <adc_takeInput+0x24>

	//Analog inputs 7-10 are selected in DIDR1 and shifted...
	// 7 is bit 4, 10 is bit 7...
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
     75e:	87 30       	cpi	r24, 0x07	; 7
     760:	10 f4       	brcc	.+4      	; 0x766 <adc_takeInput+0xc>

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
		bitNum = inputNum + 1;
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	0c c0       	rjmp	.+24     	; 0x77e <adc_takeInput+0x24>
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
	{
		bitNum = inputNum - 3;
		setbit(bitNum, DIDR1);
     766:	92 b1       	in	r25, 0x02	; 2
     768:	83 50       	subi	r24, 0x03	; 3
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	02 c0       	rjmp	.+4      	; 0x774 <adc_takeInput+0x1a>
     770:	22 0f       	add	r18, r18
     772:	33 1f       	adc	r19, r19
     774:	8a 95       	dec	r24
     776:	e2 f7       	brpl	.-8      	; 0x770 <adc_takeInput+0x16>
     778:	92 2b       	or	r25, r18
     77a:	92 b9       	out	0x02, r25	; 2
		return;
     77c:	08 95       	ret
	}
#endif

	if(bitNum <= 7)
		setbit(bitNum, DIDR0);
     77e:	91 b1       	in	r25, 0x01	; 1
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	02 c0       	rjmp	.+4      	; 0x78a <adc_takeInput+0x30>
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	8a 95       	dec	r24
     78c:	e2 f7       	brpl	.-8      	; 0x786 <adc_takeInput+0x2c>
     78e:	92 2b       	or	r25, r18
     790:	91 b9       	out	0x01, r25	; 1
     792:	08 95       	ret

00000794 <timer_selectDivisor>:
	uint8_t csbits;
	
  #if defined(CSOBS)
	if(timerNum == 0 || timerNum == 1 || timerNum == 3)//IS_CSTYP(timerNum) || IS_CSOBS(timerNum))
  #else
	if(IS_CSTYP(timerNum))
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	28 f5       	brcc	.+74     	; 0x7e2 <timer_selectDivisor+0x4e>
  #endif
	{
		switch(clockDiv)
     798:	66 30       	cpi	r22, 0x06	; 6
     79a:	81 f0       	breq	.+32     	; 0x7bc <timer_selectDivisor+0x28>
     79c:	67 30       	cpi	r22, 0x07	; 7
     79e:	28 f4       	brcc	.+10     	; 0x7aa <timer_selectDivisor+0x16>
     7a0:	66 23       	and	r22, r22
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <timer_selectDivisor+0x24>
     7a4:	63 30       	cpi	r22, 0x03	; 3
     7a6:	e9 f4       	brne	.+58     	; 0x7e2 <timer_selectDivisor+0x4e>
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <timer_selectDivisor+0x20>
     7aa:	68 30       	cpi	r22, 0x08	; 8
     7ac:	49 f0       	breq	.+18     	; 0x7c0 <timer_selectDivisor+0x2c>
     7ae:	6a 30       	cpi	r22, 0x0A	; 10
     7b0:	c1 f4       	brne	.+48     	; 0x7e2 <timer_selectDivisor+0x4e>
     7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <timer_selectDivisor+0x30>
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <timer_selectDivisor+0x32>
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <timer_selectDivisor+0x32>
     7bc:	93 e0       	ldi	r25, 0x03	; 3
			case CLKDIV8:
				csbits = CSTYP_DIV8;
				break;
			case CLKDIV64:
				csbits = CSTYP_DIV64;	
				break;
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <timer_selectDivisor+0x32>
     7c0:	94 e0       	ldi	r25, 0x04	; 4
			case CLKDIV256:
				csbits = CSTYP_DIV256;	
				break;
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <timer_selectDivisor+0x32>
     7c4:	95 e0       	ldi	r25, 0x05	; 5
     7c6:	97 70       	andi	r25, 0x07	; 7
	}
  #endif
	else 
		return 1;	

	switch(timerNum)
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	29 f0       	breq	.+10     	; 0x7d6 <timer_selectDivisor+0x42>
	{
		//Assume Timer0 and Timer1 exist (see setWGM)
		case 0:
			writeMasked(csbits, CSMASK, T0_CSReg);
     7cc:	83 b7       	in	r24, 0x33	; 51
     7ce:	88 7f       	andi	r24, 0xF8	; 248
     7d0:	89 2b       	or	r24, r25
     7d2:	83 bf       	out	0x33, r24	; 51
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <timer_selectDivisor+0x4a>
			break;
		case 1:
			writeMasked(csbits, CSMASK, T1_CSReg);
     7d6:	8f b5       	in	r24, 0x2f	; 47
     7d8:	88 7f       	andi	r24, 0xF8	; 248
     7da:	89 2b       	or	r24, r25
     7dc:	8f bd       	out	0x2f, r24	; 47
     7de:	80 e0       	ldi	r24, 0x00	; 0
			break;
     7e0:	08 95       	ret
     7e2:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     7e4:	08 95       	ret

000007e6 <timer_setWGM>:
//	wgmLb *= 0xff;
//	wgmHb *= 0xff;

	//Make sure the chosen WGM will be written to the WGM bits properly, as implemented below...
	// Only modes 0-3 are implemented...
	if(wgm > 0x03)
     7e6:	64 30       	cpi	r22, 0x04	; 4
     7e8:	f0 f4       	brcc	.+60     	; 0x826 <timer_setWGM+0x40>
		return 1;
	
	switch(timerNum)
     7ea:	88 23       	and	r24, r24
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <timer_setWGM+0xe>
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	d1 f4       	brne	.+52     	; 0x826 <timer_setWGM+0x40>
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <timer_setWGM+0x22>
#ifdef _AVR_IOTNx61_H_
			//TinyX61s' Timer0 is an exception...
			// It only has WGM00, which serves the same functionality as
			// most others' WGM01 (when their WGM00 == 0)
			// (No PWM)
			if(wgmLb)
     7f4:	86 2f       	mov	r24, r22
     7f6:	81 70       	andi	r24, 0x01	; 1
     7f8:	b1 f4       	brne	.+44     	; 0x826 <timer_setWGM+0x40>
				return 1;

			//Whatever .stab is, this single change reduces it by 36Bytes
			writebit(WGM00, T0_WGMReg, wgmHb);
     7fa:	62 70       	andi	r22, 0x02	; 2
     7fc:	11 f0       	breq	.+4      	; 0x802 <timer_setWGM+0x1c>
     7fe:	a8 9a       	sbi	0x15, 0	; 21
     800:	01 c0       	rjmp	.+2      	; 0x804 <timer_setWGM+0x1e>
     802:	a8 98       	cbi	0x15, 0	; 21
     804:	85 b3       	in	r24, 0x15	; 21
     806:	0d c0       	rjmp	.+26     	; 0x822 <timer_setWGM+0x3c>
     808:	61 30       	cpi	r22, 0x01	; 1
     80a:	19 f4       	brne	.+6      	; 0x812 <timer_setWGM+0x2c>
					wgmHb = 0;
					break;
			}

			//NOTE: TinyX61s' WGM bits are both in TCCR1D (very unusual)
			writebit(WGM10, TCCR1D, wgmLb);
     80c:	86 b5       	in	r24, 0x26	; 38
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	02 c0       	rjmp	.+4      	; 0x816 <timer_setWGM+0x30>
     812:	86 b5       	in	r24, 0x26	; 38
     814:	8e 7f       	andi	r24, 0xFE	; 254
     816:	86 bd       	out	0x26, r24	; 38
     818:	86 b5       	in	r24, 0x26	; 38
			writebit(WGM11, TCCR1D, wgmHb);
     81a:	86 b5       	in	r24, 0x26	; 38
     81c:	8d 7f       	andi	r24, 0xFD	; 253
     81e:	86 bd       	out	0x26, r24	; 38
     820:	86 b5       	in	r24, 0x26	; 38
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	08 95       	ret
     826:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     828:	08 95       	ret

0000082a <timer_init>:

//Roughly equivalent to the ol' Init_timerX(clkDiv, wgm)
//Return 0 if no error...
#if (!defined(TIMER_INIT_UNUSED) || !TIMER_INIT_UNUSED)
uint8_t timer_init(uint8_t timerNum, uint8_t clockDiv, uint8_t wgm)
{
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	18 2f       	mov	r17, r24
     830:	06 2f       	mov	r16, r22
	//set the waveform mode
	ERR_HANDLE_NUM(1,				\
     832:	64 2f       	mov	r22, r20
     834:	d8 df       	rcall	.-80     	; 0x7e6 <timer_setWGM>
     836:	88 23       	and	r24, r24
     838:	11 f0       	breq	.+4      	; 0x83e <timer_init+0x14>
     83a:	80 61       	ori	r24, 0x10	; 16
     83c:	05 c0       	rjmp	.+10     	; 0x848 <timer_init+0x1e>
		timer_setWGM(timerNum, wgm)	);

	//select the clock
	ERR_HANDLE_NUM(2,							\
     83e:	81 2f       	mov	r24, r17
     840:	60 2f       	mov	r22, r16
     842:	a8 df       	rcall	.-176    	; 0x794 <timer_selectDivisor>
     844:	81 11       	cpse	r24, r1
     846:	80 62       	ori	r24, 0x20	; 32
		timer_selectDivisor(timerNum, clockDiv)	);
		
	return 0;
}
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <timer_compareMatchIntSetup>:
uint8_t timer_compareMatchIntSetup(uint8_t timerNum, uint8_t outputChannel,\
	  												uint8_t enable)
{
	uint8_t channelNum;

	if(timerNum >= MAXTIMERS)
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	10 f0       	brcs	.+4      	; 0x856 <timer_compareMatchIntSetup+0x8>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	08 95       	ret
		return 1;

	if(outputChannel >= 2) //MAXCHANNELSPERTIMER)
     856:	62 30       	cpi	r22, 0x02	; 2
     858:	10 f0       	brcs	.+4      	; 0x85e <timer_compareMatchIntSetup+0x10>
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	08 95       	ret
     85e:	44 23       	and	r20, r20
     860:	11 f0       	breq	.+4      	; 0x866 <timer_compareMatchIntSetup+0x18>
     862:	41 e0       	ldi	r20, 0x01	; 1
	channelNum = (timerNum<<4) + outputChannel;

	//Don't clear interrupts before disabling this one, or that defeats the purpose!
	// But do clear so we don't get unexpected overflows on init
	if(enable)
		cli();
     864:	f8 94       	cli
	
	switch(channelNum)
     866:	82 95       	swap	r24
     868:	80 7f       	andi	r24, 0xF0	; 240
     86a:	86 0f       	add	r24, r22
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	a1 f0       	breq	.+40     	; 0x898 <timer_compareMatchIntSetup+0x4a>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	30 f0       	brcs	.+12     	; 0x880 <timer_compareMatchIntSetup+0x32>
     874:	80 31       	cpi	r24, 0x10	; 16
     876:	e1 f0       	breq	.+56     	; 0x8b0 <timer_compareMatchIntSetup+0x62>
     878:	81 31       	cpi	r24, 0x11	; 17
     87a:	31 f1       	breq	.+76     	; 0x8c8 <timer_compareMatchIntSetup+0x7a>
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	08 95       	ret
			break;
	   #endif
	   #if defined(OCIE0A)
		case 0x00:
//			setbit(OCIE0A, T0_TIMSK);
			writebit(OCIE0A, T0_TIMSK, enable);
     880:	44 23       	and	r20, r20
     882:	19 f0       	breq	.+6      	; 0x88a <timer_compareMatchIntSetup+0x3c>
     884:	89 b7       	in	r24, 0x39	; 57
     886:	80 61       	ori	r24, 0x10	; 16
     888:	02 c0       	rjmp	.+4      	; 0x88e <timer_compareMatchIntSetup+0x40>
     88a:	89 b7       	in	r24, 0x39	; 57
     88c:	8f 7e       	andi	r24, 0xEF	; 239
     88e:	89 bf       	out	0x39, r24	; 57
     890:	89 b7       	in	r24, 0x39	; 57
			// My OCD bit me in the ass, this was set to TIMSK by mistake(?)
			setbit(OCF0A, T0_TIFR);
     892:	88 b7       	in	r24, 0x38	; 56
     894:	80 61       	ori	r24, 0x10	; 16
     896:	23 c0       	rjmp	.+70     	; 0x8de <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE0B)
		case 0x01:
//			setbit(OCIE0B, T0_TIMSK);
			writebit(OCIE0B, T0_TIMSK, enable);
     898:	44 23       	and	r20, r20
     89a:	19 f0       	breq	.+6      	; 0x8a2 <timer_compareMatchIntSetup+0x54>
     89c:	89 b7       	in	r24, 0x39	; 57
     89e:	88 60       	ori	r24, 0x08	; 8
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <timer_compareMatchIntSetup+0x58>
     8a2:	89 b7       	in	r24, 0x39	; 57
     8a4:	87 7f       	andi	r24, 0xF7	; 247
     8a6:	89 bf       	out	0x39, r24	; 57
     8a8:	89 b7       	in	r24, 0x39	; 57
			// As was this...
			setbit(OCF0B, T0_TIFR);
     8aa:	88 b7       	in	r24, 0x38	; 56
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	17 c0       	rjmp	.+46     	; 0x8de <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1A)
		case 0x10:
//			setbit(OCIE1A, T1_TIMSK);
			writebit(OCIE1A, T1_TIMSK, enable);
     8b0:	44 23       	and	r20, r20
     8b2:	19 f0       	breq	.+6      	; 0x8ba <timer_compareMatchIntSetup+0x6c>
     8b4:	89 b7       	in	r24, 0x39	; 57
     8b6:	80 64       	ori	r24, 0x40	; 64
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <timer_compareMatchIntSetup+0x70>
     8ba:	89 b7       	in	r24, 0x39	; 57
     8bc:	8f 7b       	andi	r24, 0xBF	; 191
     8be:	89 bf       	out	0x39, r24	; 57
     8c0:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1A, T1_TIFR);
     8c2:	88 b7       	in	r24, 0x38	; 56
     8c4:	80 64       	ori	r24, 0x40	; 64
     8c6:	0b c0       	rjmp	.+22     	; 0x8de <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1B)
		case 0x11:
//			setbit(OCIE1B, T1_TIMSK);
			writebit(OCIE1B, T1_TIMSK, enable);
     8c8:	44 23       	and	r20, r20
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <timer_compareMatchIntSetup+0x84>
     8cc:	89 b7       	in	r24, 0x39	; 57
     8ce:	80 62       	ori	r24, 0x20	; 32
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <timer_compareMatchIntSetup+0x88>
     8d2:	89 b7       	in	r24, 0x39	; 57
     8d4:	8f 7d       	andi	r24, 0xDF	; 223
     8d6:	89 bf       	out	0x39, r24	; 57
     8d8:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1B, T1_TIFR);
     8da:	88 b7       	in	r24, 0x38	; 56
     8dc:	80 62       	ori	r24, 0x20	; 32
     8de:	88 bf       	out	0x38, r24	; 56
			break;
	}
	
	//Don't reenable interrupts here if disabling... just leave them as they were....
	// but do enable for init...
	if(enable)
     8e0:	44 23       	and	r20, r20
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <timer_compareMatchIntSetup+0x9a>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret
		sei();
     8e8:	78 94       	sei
     8ea:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     8ec:	08 95       	ret

000008ee <hfm_setup>:

//Mainly just for setting up the maxPower (divisor)
// [can] use hfm_setPower otherwise...
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
     8ee:	fc 01       	movw	r30, r24
	modulator->maxPower = maxPower;
     8f0:	44 83       	std	Z+4, r20	; 0x04
{
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     8f2:	84 81       	ldd	r24, Z+4	; 0x04
     8f4:	86 17       	cp	r24, r22
     8f6:	10 f0       	brcs	.+4      	; 0x8fc <hfm_setup+0xe>
		modulator->power = power;
     8f8:	65 83       	std	Z+5, r22	; 0x05
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <hfm_setup+0x12>
	else
		modulator->power = modulator->maxPower;
     8fc:	84 81       	ldd	r24, Z+4	; 0x04
     8fe:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     900:	11 82       	std	Z+1, r1	; 0x01
     902:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     904:	13 82       	std	Z+3, r1	; 0x03
     906:	12 82       	std	Z+2, r1	; 0x02
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
	modulator->maxPower = maxPower;
	hfm_setPower(modulator, power);
}
     908:	08 95       	ret

0000090a <hfm_setPower>:
// This needs to be set, initially! 
//   either init it in the hfm variable declaration
//   or use hfm_setup (ideal)
// however, sometimes it needs to be variable, thus hfm_setup (above)
void hfm_setPower(hfm_t	*modulator, uint8_t power)
{
     90a:	fc 01       	movw	r30, r24
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     90c:	84 81       	ldd	r24, Z+4	; 0x04
     90e:	86 17       	cp	r24, r22
     910:	10 f0       	brcs	.+4      	; 0x916 <hfm_setPower+0xc>
		modulator->power = power;
     912:	65 83       	std	Z+5, r22	; 0x05
     914:	02 c0       	rjmp	.+4      	; 0x91a <hfm_setPower+0x10>
	else
		modulator->power = modulator->maxPower;
     916:	84 81       	ldd	r24, Z+4	; 0x04
     918:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     91e:	13 82       	std	Z+3, r1	; 0x03
     920:	12 82       	std	Z+2, r1	; 0x02
}
     922:	08 95       	ret

00000924 <hfm_nextOutput>:

//Returns 0 if the "output" should be "off" in this cycle
//		  1 if the "output" should be "on"  in this cycle
uint8_t hfm_nextOutput(hfm_t *modulator)
{
     924:	fc 01       	movw	r30, r24
	//Instead of dividing the average by the stepNumber (slow!),
	//just add the current to the avg and add desired to itself and compare the two
	
	
	//The first time, this will be == desired*1... (and runningSum will be zero)
	(modulator->desiredSum) += (modulator->power);
     926:	82 81       	ldd	r24, Z+2	; 0x02
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	25 81       	ldd	r18, Z+5	; 0x05
     92c:	82 0f       	add	r24, r18
     92e:	91 1d       	adc	r25, r1
     930:	93 83       	std	Z+3, r25	; 0x03
     932:	82 83       	std	Z+2, r24	; 0x02
	
	// IF desired == 255, we want it never to clr...
	//		but running will be 0 the first time
	//		and we'll therefore if... set == good
	//		and later we'll runningSum == desiredSum (above) and reset and if again
	if(modulator->desiredSum > modulator->runningSum)
     934:	22 81       	ldd	r18, Z+2	; 0x02
     936:	33 81       	ldd	r19, Z+3	; 0x03
     938:	80 81       	ld	r24, Z
     93a:	91 81       	ldd	r25, Z+1	; 0x01
     93c:	82 17       	cp	r24, r18
     93e:	93 07       	cpc	r25, r19
     940:	10 f0       	brcs	.+4      	; 0x946 <hfm_nextOutput+0x22>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	08 c0       	rjmp	.+16     	; 0x956 <hfm_nextOutput+0x32>
	{
		(modulator->runningSum) += (modulator->maxPower); //0xff;
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	24 81       	ldd	r18, Z+4	; 0x04
     94c:	82 0f       	add	r24, r18
     94e:	91 1d       	adc	r25, r1
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	80 83       	st	Z, r24
     954:	81 e0       	ldi	r24, 0x01	; 1
	}
	
//	(modulator->stepNumber)++;
	
	//Restart the cycle if the output average = the desired
	if(modulator->runningSum == modulator->desiredSum)
     956:	40 81       	ld	r20, Z
     958:	51 81       	ldd	r21, Z+1	; 0x01
     95a:	22 81       	ldd	r18, Z+2	; 0x02
     95c:	33 81       	ldd	r19, Z+3	; 0x03
     95e:	42 17       	cp	r20, r18
     960:	53 07       	cpc	r21, r19
     962:	21 f4       	brne	.+8      	; 0x96c <hfm_nextOutput+0x48>
	{
		//Handled below...
//		modulator->stepNumber = 0;
		modulator->runningSum = 0;
     964:	11 82       	std	Z+1, r1	; 0x01
     966:	10 82       	st	Z, r1
		modulator->desiredSum = 0;
     968:	13 82       	std	Z+3, r1	; 0x03
     96a:	12 82       	std	Z+2, r1	; 0x02
	}
	
	return toReturn;
}
     96c:	08 95       	ret

0000096e <sineRaw>:
//   rollover/wraparound should work fine... (e.g. Sine(coord_t))
//output is a value between -INT32_MAX and INT32_MAX (representing sin values -1 to 1)
sine_t sineRaw(theta_t theta)
{
//	theta %= 512;
	theta %= SINE_2PI;
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	66 d7       	rcall	.+3788   	; 0x1840 <__divmodhi4>

	if(theta < 0)
     974:	97 ff       	sbrs	r25, 7
     976:	02 c0       	rjmp	.+4      	; 0x97c <sineRaw+0xe>
		theta = SINE_2PI + theta;
     978:	80 50       	subi	r24, 0x00	; 0
     97a:	9e 4f       	sbci	r25, 0xFE	; 254

//For more accurate realtimeishness, it might be worthwhile to reverse this order...
	
	//in the first quadrant, just take the sine value from the table
	if(theta < SINE_SIZE-1) //128)
     97c:	80 38       	cpi	r24, 0x80	; 128
     97e:	91 05       	cpc	r25, r1
     980:	44 f4       	brge	.+16     	; 0x992 <sineRaw+0x24>
		return pgm_read_sine(sineTable[theta]);
     982:	fc 01       	movw	r30, r24
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	ea 5d       	subi	r30, 0xDA	; 218
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	25 91       	lpm	r18, Z+
     98e:	34 91       	lpm	r19, Z
     990:	29 c0       	rjmp	.+82     	; 0x9e4 <sineRaw+0x76>
	//in the second quadrant, mirror theta and subtract the offset
	else if(theta < SINE_SIZE2) //256)
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	91 05       	cpc	r25, r1
     996:	09 f0       	breq	.+2      	; 0x99a <sineRaw+0x2c>
     998:	5c f4       	brge	.+22     	; 0x9b0 <sineRaw+0x42>
		return pgm_read_sine(sineTable[SINE_SIZE2-theta]); //256-theta]);
     99a:	e0 e0       	ldi	r30, 0x00	; 0
     99c:	f1 e0       	ldi	r31, 0x01	; 1
     99e:	e8 1b       	sub	r30, r24
     9a0:	f9 0b       	sbc	r31, r25
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	ea 5d       	subi	r30, 0xDA	; 218
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	25 91       	lpm	r18, Z+
     9ac:	34 91       	lpm	r19, Z
     9ae:	1a c0       	rjmp	.+52     	; 0x9e4 <sineRaw+0x76>
	//in the third quadrant, mirror the value and subtract the offset
	else if(theta < SINE_SIZE3) //384)
     9b0:	21 e0       	ldi	r18, 0x01	; 1
     9b2:	80 38       	cpi	r24, 0x80	; 128
     9b4:	92 07       	cpc	r25, r18
     9b6:	44 f4       	brge	.+16     	; 0x9c8 <sineRaw+0x5a>
		return -(sine_t)pgm_read_sine(sineTable[theta-SINE_SIZE2]); //256]);
     9b8:	fc 01       	movw	r30, r24
     9ba:	ee 0f       	add	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	ea 5d       	subi	r30, 0xDA	; 218
     9c0:	f1 40       	sbci	r31, 0x01	; 1
     9c2:	85 91       	lpm	r24, Z+
     9c4:	94 91       	lpm	r25, Z
     9c6:	0a c0       	rjmp	.+20     	; 0x9dc <sineRaw+0x6e>
	//in the fourth quadrant, mirror both theta and the value and subtract the offset...
	else
		return -(sine_t)pgm_read_sine(sineTable[SINE_SIZE4-theta]); //512-theta]);
     9c8:	e0 e0       	ldi	r30, 0x00	; 0
     9ca:	f2 e0       	ldi	r31, 0x02	; 2
     9cc:	e8 1b       	sub	r30, r24
     9ce:	f9 0b       	sbc	r31, r25
     9d0:	ee 0f       	add	r30, r30
     9d2:	ff 1f       	adc	r31, r31
     9d4:	ea 5d       	subi	r30, 0xDA	; 218
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	85 91       	lpm	r24, Z+
     9da:	94 91       	lpm	r25, Z
     9dc:	22 27       	eor	r18, r18
     9de:	33 27       	eor	r19, r19
     9e0:	28 1b       	sub	r18, r24
     9e2:	39 0b       	sbc	r19, r25
}
     9e4:	c9 01       	movw	r24, r18
     9e6:	08 95       	ret

000009e8 <sineRaw8>:


#if ( defined(SINE_RAW8) && SINE_RAW8 )
int8_t sineRaw8(theta_t theta)
{
	theta %= SINE_2PI;
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	72 e0       	ldi	r23, 0x02	; 2
     9ec:	29 d7       	rcall	.+3666   	; 0x1840 <__divmodhi4>
     9ee:	9c 01       	movw	r18, r24

	if(theta < 0)
     9f0:	37 ff       	sbrs	r19, 7
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <sineRaw8+0x10>
		theta = SINE_2PI + theta;
     9f4:	20 50       	subi	r18, 0x00	; 0
     9f6:	3e 4f       	sbci	r19, 0xFE	; 254

	if(theta < SINE_SIZE-1)
     9f8:	20 38       	cpi	r18, 0x80	; 128
     9fa:	31 05       	cpc	r19, r1
     9fc:	3c f4       	brge	.+14     	; 0xa0c <sineRaw8+0x24>
		return pgm_read_sine8(sineTable[theta]);
     9fe:	f9 01       	movw	r30, r18
     a00:	ee 0f       	add	r30, r30
     a02:	ff 1f       	adc	r31, r31
     a04:	e9 5d       	subi	r30, 0xD9	; 217
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	84 91       	lpm	r24, Z
     a0a:	08 95       	ret
   else if(theta < SINE_SIZE2) //256)
     a0c:	2f 3f       	cpi	r18, 0xFF	; 255
     a0e:	31 05       	cpc	r19, r1
     a10:	09 f0       	breq	.+2      	; 0xa14 <sineRaw8+0x2c>
     a12:	54 f4       	brge	.+20     	; 0xa28 <sineRaw8+0x40>
		return pgm_read_sine8(sineTable[SINE_SIZE2-theta]); //256-theta]);
     a14:	e0 e0       	ldi	r30, 0x00	; 0
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	e2 1b       	sub	r30, r18
     a1a:	f3 0b       	sbc	r31, r19
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	e9 5d       	subi	r30, 0xD9	; 217
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	84 91       	lpm	r24, Z
     a26:	08 95       	ret
	else if(theta < SINE_SIZE3) //384)
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	20 38       	cpi	r18, 0x80	; 128
     a2c:	38 07       	cpc	r19, r24
     a2e:	44 f4       	brge	.+16     	; 0xa40 <sineRaw8+0x58>
		return -(int8_t)pgm_read_sine8(sineTable[theta-SINE_SIZE2]); //256]);
     a30:	f9 01       	movw	r30, r18
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	e9 5d       	subi	r30, 0xD9	; 217
     a38:	f1 40       	sbci	r31, 0x01	; 1
     a3a:	84 91       	lpm	r24, Z
     a3c:	81 95       	neg	r24
     a3e:	08 95       	ret
	else
	   return -(int8_t)pgm_read_sine8(sineTable[SINE_SIZE4-theta]); 
     a40:	e0 e0       	ldi	r30, 0x00	; 0
     a42:	f2 e0       	ldi	r31, 0x02	; 2
     a44:	e2 1b       	sub	r30, r18
     a46:	f3 0b       	sbc	r31, r19
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	e9 5d       	subi	r30, 0xD9	; 217
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	84 91       	lpm	r24, Z
     a52:	81 95       	neg	r24

}
     a54:	08 95       	ret

00000a56 <getTetBrick>:

//returns a 3-bit value
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
     a56:	e8 2f       	mov	r30, r24
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	e0 58       	subi	r30, 0x80	; 128
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	86 2f       	mov	r24, r22
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	63 e0       	ldi	r22, 0x03	; 3
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	c2 d6       	rcall	.+3460   	; 0x17f4 <__mulhi3>
     a70:	20 81       	ld	r18, Z
     a72:	31 81       	ldd	r19, Z+1	; 0x01
     a74:	42 81       	ldd	r20, Z+2	; 0x02
     a76:	53 81       	ldd	r21, Z+3	; 0x03
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <getTetBrick+0x2c>
     a7a:	56 95       	lsr	r21
     a7c:	47 95       	ror	r20
     a7e:	37 95       	ror	r19
     a80:	27 95       	ror	r18
     a82:	8a 95       	dec	r24
     a84:	d2 f7       	brpl	.-12     	; 0xa7a <getTetBrick+0x24>
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';

}
     a86:	82 2f       	mov	r24, r18
     a88:	87 70       	andi	r24, 0x07	; 7
     a8a:	08 95       	ret

00000a8c <setTetBrick>:

//val should only be 0-7
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
void setTetBrick(uint8_t row, uint8_t col, uint8_t val)
{
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
	//Clear the old value...
	tetRow[row] &= ~(((uint32_t)'\007')<<(3*col));
     a90:	e8 2f       	mov	r30, r24
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	86 2f       	mov	r24, r22
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	63 e0       	ldi	r22, 0x03	; 3
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	ab d6       	rcall	.+3414   	; 0x17f4 <__mulhi3>
     a9e:	a8 2f       	mov	r26, r24
	//Write the new value...
	tetRow[row] |= (((uint32_t)val)<<(3*col));
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	e0 58       	subi	r30, 0x80	; 128
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255
     aac:	67 e0       	ldi	r22, 0x07	; 7
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0a 2e       	mov	r0, r26
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <setTetBrick+0x34>
     ab8:	66 0f       	add	r22, r22
     aba:	77 1f       	adc	r23, r23
     abc:	88 1f       	adc	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <setTetBrick+0x2c>
     ac4:	60 95       	com	r22
     ac6:	70 95       	com	r23
     ac8:	80 95       	com	r24
     aca:	90 95       	com	r25
     acc:	00 81       	ld	r16, Z
     ace:	11 81       	ldd	r17, Z+1	; 0x01
     ad0:	22 81       	ldd	r18, Z+2	; 0x02
     ad2:	33 81       	ldd	r19, Z+3	; 0x03
     ad4:	60 23       	and	r22, r16
     ad6:	71 23       	and	r23, r17
     ad8:	82 23       	and	r24, r18
     ada:	93 23       	and	r25, r19
     adc:	24 2f       	mov	r18, r20
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <setTetBrick+0x62>
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	44 1f       	adc	r20, r20
     aec:	55 1f       	adc	r21, r21
     aee:	aa 95       	dec	r26
     af0:	d2 f7       	brpl	.-12     	; 0xae6 <setTetBrick+0x5a>
     af2:	62 2b       	or	r22, r18
     af4:	73 2b       	or	r23, r19
     af6:	84 2b       	or	r24, r20
     af8:	95 2b       	or	r25, r21
     afa:	60 83       	st	Z, r22
     afc:	71 83       	std	Z+1, r23	; 0x01
     afe:	82 83       	std	Z+2, r24	; 0x02
     b00:	93 83       	std	Z+3, r25	; 0x03
}
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <tetInit>:
//For now, let's just test that it works...
// (This could be implemented with bitfields?)
uint32_t tetRow[TET_HEIGHT];

void tetInit(uint8_t filledRows)
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	e0 e8       	ldi	r30, 0x80	; 128
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
     b10:	11 92       	st	Z+, r1
     b12:	11 92       	st	Z+, r1
     b14:	11 92       	st	Z+, r1
     b16:	11 92       	st	Z+, r1
void tetInit(uint8_t filledRows)
{
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	e8 3c       	cpi	r30, 0xC8	; 200
     b1c:	f9 07       	cpc	r31, r25
     b1e:	c1 f7       	brne	.-16     	; 0xb10 <tetInit+0x8>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     b20:	12 e1       	ldi	r17, 0x12	; 18
     b22:	18 1b       	sub	r17, r24
     b24:	0b c0       	rjmp	.+22     	; 0xb3c <tetInit+0x34>
     b26:	00 e0       	ldi	r16, 0x00	; 0
		for(col=0; col<TET_WIDTH; col++)
			setTetBrick(row, col, (row+col)&0x07);
     b28:	40 2f       	mov	r20, r16
     b2a:	41 0f       	add	r20, r17
     b2c:	47 70       	andi	r20, 0x07	; 7
     b2e:	81 2f       	mov	r24, r17
     b30:	60 2f       	mov	r22, r16
     b32:	ac df       	rcall	.-168    	; 0xa8c <setTetBrick>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
		for(col=0; col<TET_WIDTH; col++)
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	0a 30       	cpi	r16, 0x0A	; 10
     b38:	b9 f7       	brne	.-18     	; 0xb28 <tetInit+0x20>
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     b3a:	1f 5f       	subi	r17, 0xFF	; 255
     b3c:	12 31       	cpi	r17, 0x12	; 18
     b3e:	98 f3       	brcs	.-26     	; 0xb26 <tetInit+0x1e>

		row+=4;

	}
#endif
}
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <tetUpdate>:


}

void tetUpdate(void)
{
     b46:	2f 92       	push	r2
     b48:	3f 92       	push	r3
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <tetUpdate+0x26>
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	uint8_t pieceCol;

	uint8_t noChange = FALSE;
	uint8_t settle = FALSE;

	if(newPieceHitCount == 5)
     b70:	80 91 7e 00 	lds	r24, 0x007E
     b74:	85 30       	cpi	r24, 0x05	; 5
     b76:	21 f4       	brne	.+8      	; 0xb80 <tetUpdate+0x3a>
	{
		newPieceHitCount = 0;
     b78:	10 92 7e 00 	sts	0x007E, r1
		tetInit(0);
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	c4 df       	rcall	.-120    	; 0xb08 <tetInit>
	}

	new_pieceOrientation = pieceOrientation;
     b80:	30 90 6f 00 	lds	r3, 0x006F
	new_pieceLeftCol = pieceLeftCol;
     b84:	40 91 71 00 	lds	r20, 0x0071
	new_pieceTopRow = pieceTopRow;
     b88:	20 90 70 00 	lds	r2, 0x0070

	if(callCount%4 == 2)
     b8c:	50 91 7f 00 	lds	r21, 0x007F
     b90:	85 2f       	mov	r24, r21
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	83 70       	andi	r24, 0x03	; 3
     b96:	90 70       	andi	r25, 0x00	; 0
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	91 05       	cpc	r25, r1
     b9c:	31 f4       	brne	.+12     	; 0xbaa <tetUpdate+0x64>
   {
		new_pieceOrientation=pieceOrientation+1;
     b9e:	23 2d       	mov	r18, r3
     ba0:	2f 5f       	subi	r18, 0xFF	; 255
      if (new_pieceOrientation==4)
     ba2:	24 30       	cpi	r18, 0x04	; 4
     ba4:	09 f0       	breq	.+2      	; 0xba8 <tetUpdate+0x62>
     ba6:	e0 c0       	rjmp	.+448    	; 0xd68 <tetUpdate+0x222>
     ba8:	de c0       	rjmp	.+444    	; 0xd66 <tetUpdate+0x220>
			new_pieceOrientation=0;
	}

      if(callCount%4==0)
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	19 f4       	brne	.+6      	; 0xbb4 <tetUpdate+0x6e>
      {  
         new_pieceLeftCol=pieceLeftCol+1;
     bae:	34 2f       	mov	r19, r20
     bb0:	3f 5f       	subi	r19, 0xFF	; 255
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <tetUpdate+0x78>
		}

		if(callCount%4==3)
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <tetUpdate+0x76>
		{
			new_pieceTopRow=pieceTopRow+1;
     bba:	23 94       	inc	r2
     bbc:	34 2f       	mov	r19, r20
     bbe:	23 2d       	mov	r18, r3
      }

	callCount++;
     bc0:	5f 5f       	subi	r21, 0xFF	; 255
     bc2:	50 93 7f 00 	sts	0x007F, r21
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     bc6:	80 91 6e 00 	lds	r24, 0x006E
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	82 0f       	add	r24, r18
     bd6:	91 1d       	adc	r25, r1
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	8c 5b       	subi	r24, 0xBC	; 188
     bde:	9b 4f       	sbci	r25, 0xFB	; 251
     be0:	12 2d       	mov	r17, r2
     be2:	1d 5f       	subi	r17, 0xFD	; 253
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b3 e0       	ldi	r27, 0x03	; 3
     be8:	fc 01       	movw	r30, r24
     bea:	c5 90       	lpm	r12, Z+
     bec:	d4 90       	lpm	r13, Z
     bee:	36 c0       	rjmp	.+108    	; 0xc5c <tetUpdate+0x116>
			uint8_t boardCol = new_pieceLeftCol + pieceCol;

			uint8_t boardBrick = getTetBrick(boardRow, boardCol);


			if(pieceBrick)
     bf0:	cf 01       	movw	r24, r30
     bf2:	8e 0d       	add	r24, r14
     bf4:	9f 1d       	adc	r25, r15
     bf6:	26 01       	movw	r4, r12
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <tetUpdate+0xb8>
     bfa:	56 94       	lsr	r5
     bfc:	47 94       	ror	r4
     bfe:	8a 95       	dec	r24
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <tetUpdate+0xb4>
     c02:	40 fe       	sbrs	r4, 0
     c04:	1a c0       	rjmp	.+52     	; 0xc3a <tetUpdate+0xf4>
			{
				if(boardRow >= TET_HEIGHT)
     c06:	12 31       	cpi	r17, 0x12	; 18
     c08:	f8 f4       	brcc	.+62     	; 0xc48 <tetUpdate+0x102>
					break;
				}

				//There's some plausibility for some oddities here...
				// revisit 41-15.zip
				if(boardCol >= TET_WIDTH)
     c0a:	0a 30       	cpi	r16, 0x0A	; 10
     c0c:	f8 f4       	brcc	.+62     	; 0xc4c <tetUpdate+0x106>
				   noChange = TRUE;
				   break;
				}


				if(boardBrick)
     c0e:	80 2f       	mov	r24, r16
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	63 e0       	ldi	r22, 0x03	; 3
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	ee d5       	rcall	.+3036   	; 0x17f4 <__mulhi3>
     c18:	24 01       	movw	r4, r8
     c1a:	35 01       	movw	r6, r10
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <tetUpdate+0xe0>
     c1e:	76 94       	lsr	r7
     c20:	67 94       	ror	r6
     c22:	57 94       	ror	r5
     c24:	47 94       	ror	r4
     c26:	8a 95       	dec	r24
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <tetUpdate+0xd8>
     c2a:	84 2d       	mov	r24, r4
     c2c:	87 70       	andi	r24, 0x07	; 7
     c2e:	29 f0       	breq	.+10     	; 0xc3a <tetUpdate+0xf4>
				{
					//Must be a settle...
					if((new_pieceOrientation == pieceOrientation) &&
     c30:	23 15       	cp	r18, r3
     c32:	61 f4       	brne	.+24     	; 0xc4c <tetUpdate+0x106>
     c34:	34 17       	cp	r19, r20
     c36:	51 f4       	brne	.+20     	; 0xc4c <tetUpdate+0x106>
     c38:	07 c0       	rjmp	.+14     	; 0xc48 <tetUpdate+0x102>
     c3a:	31 96       	adiw	r30, 0x01	; 1
     c3c:	0f 5f       	subi	r16, 0xFF	; 255


	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
     c3e:	e4 30       	cpi	r30, 0x04	; 4
     c40:	f1 05       	cpc	r31, r1
     c42:	b1 f6       	brne	.-84     	; 0xbf0 <tetUpdate+0xaa>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <tetUpdate+0x10a>
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <tetUpdate+0x108>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	a1 e0       	ldi	r26, 0x01	; 1



	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
     c50:	b1 50       	subi	r27, 0x01	; 1
     c52:	11 50       	subi	r17, 0x01	; 1
     c54:	bf 3f       	cpi	r27, 0xFF	; 255
     c56:	d9 f0       	breq	.+54     	; 0xc8e <tetUpdate+0x148>
     c58:	88 23       	and	r24, r24
     c5a:	c9 f4       	brne	.+50     	; 0xc8e <tetUpdate+0x148>
     c5c:	aa 23       	and	r26, r26
     c5e:	09 f0       	breq	.+2      	; 0xc62 <tetUpdate+0x11c>
     c60:	85 c0       	rjmp	.+266    	; 0xd6c <tetUpdate+0x226>
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     c62:	eb 2e       	mov	r14, r27
     c64:	ff 24       	eor	r15, r15
     c66:	ee 0c       	add	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	ee 0c       	add	r14, r14
     c6c:	ff 1c       	adc	r15, r15
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';
     c6e:	e1 2f       	mov	r30, r17
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	e0 58       	subi	r30, 0x80	; 128
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	80 80       	ld	r8, Z
     c80:	91 80       	ldd	r9, Z+1	; 0x01
     c82:	a2 80       	ldd	r10, Z+2	; 0x02
     c84:	b3 80       	ldd	r11, Z+3	; 0x03
     c86:	03 2f       	mov	r16, r19
     c88:	e0 e0       	ldi	r30, 0x00	; 0
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	b1 cf       	rjmp	.-158    	; 0xbf0 <tetUpdate+0xaa>





	if(!noChange)
     c8e:	aa 23       	and	r26, r26
     c90:	31 f4       	brne	.+12     	; 0xc9e <tetUpdate+0x158>
	{
		pieceOrientation = new_pieceOrientation;
     c92:	20 93 6f 00 	sts	0x006F, r18
		pieceLeftCol = new_pieceLeftCol;
     c96:	30 93 71 00 	sts	0x0071, r19
		pieceTopRow = new_pieceTopRow;
     c9a:	20 92 70 00 	sts	0x0070, r2
	}

	if(settle)
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <tetUpdate+0x15e>
     ca2:	64 c0       	rjmp	.+200    	; 0xd6c <tetUpdate+0x226>
	{
		// Check if we've hit on a new piece...
		if((pieceTopRow == PIECE_STARTROW) &&
     ca4:	80 91 70 00 	lds	r24, 0x0070
     ca8:	88 23       	and	r24, r24
     caa:	09 f0       	breq	.+2      	; 0xcae <tetUpdate+0x168>
     cac:	45 c0       	rjmp	.+138    	; 0xd38 <tetUpdate+0x1f2>
     cae:	80 91 71 00 	lds	r24, 0x0071
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <tetUpdate+0x172>
     cb6:	40 c0       	rjmp	.+128    	; 0xd38 <tetUpdate+0x1f2>
     cb8:	80 91 6f 00 	lds	r24, 0x006F
     cbc:	88 23       	and	r24, r24
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <tetUpdate+0x17c>
     cc0:	3b c0       	rjmp	.+118    	; 0xd38 <tetUpdate+0x1f2>
		   (pieceLeftCol == PIECE_STARTCOL) &&
		   (pieceOrientation == 0))
		   newPieceHitCount++;
     cc2:	80 91 7e 00 	lds	r24, 0x007E
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	80 93 7e 00 	sts	0x007E, r24
     ccc:	35 c0       	rjmp	.+106    	; 0xd38 <tetUpdate+0x1f2>

		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
			{
				if(getTetPieceBrick(pieceNum, pieceOrientation,
     cce:	40 91 6e 00 	lds	r20, 0x006E
     cd2:	e4 2f       	mov	r30, r20
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	ee 0f       	add	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	80 91 6f 00 	lds	r24, 0x006F
     ce2:	e8 0f       	add	r30, r24
     ce4:	f1 1d       	adc	r31, r1
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	ec 5b       	subi	r30, 0xBC	; 188
     cec:	fb 4f       	sbci	r31, 0xFB	; 251
     cee:	85 91       	lpm	r24, Z+
     cf0:	94 91       	lpm	r25, Z
     cf2:	b7 01       	movw	r22, r14
     cf4:	62 0f       	add	r22, r18
     cf6:	73 1f       	adc	r23, r19
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <tetUpdate+0x1b8>
     cfa:	96 95       	lsr	r25
     cfc:	87 95       	ror	r24
     cfe:	6a 95       	dec	r22
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <tetUpdate+0x1b4>
     d02:	80 ff       	sbrs	r24, 0
     d04:	0c c0       	rjmp	.+24     	; 0xd1e <tetUpdate+0x1d8>
										  pieceRow, pieceCol))
				setTetBrick(pieceTopRow+pieceRow,
     d06:	80 91 70 00 	lds	r24, 0x0070
     d0a:	60 91 71 00 	lds	r22, 0x0071
     d0e:	6e 0d       	add	r22, r14
     d10:	4f 5f       	subi	r20, 0xFF	; 255
     d12:	81 0f       	add	r24, r17
     d14:	29 83       	std	Y+1, r18	; 0x01
     d16:	3a 83       	std	Y+2, r19	; 0x02
     d18:	b9 de       	rcall	.-654    	; 0xa8c <setTetBrick>
     d1a:	3a 81       	ldd	r19, Y+2	; 0x02
     d1c:	29 81       	ldd	r18, Y+1	; 0x01
     d1e:	08 94       	sec
     d20:	e1 1c       	adc	r14, r1
     d22:	f1 1c       	adc	r15, r1
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
     d24:	64 e0       	ldi	r22, 0x04	; 4
     d26:	e6 16       	cp	r14, r22
     d28:	f1 04       	cpc	r15, r1
     d2a:	89 f6       	brne	.-94     	; 0xcce <tetUpdate+0x188>
		   (pieceOrientation == 0))
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
     d2c:	1f 5f       	subi	r17, 0xFF	; 255
     d2e:	2c 5f       	subi	r18, 0xFC	; 252
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	14 30       	cpi	r17, 0x04	; 4
     d34:	21 f4       	brne	.+8      	; 0xd3e <tetUpdate+0x1f8>
     d36:	06 c0       	rjmp	.+12     	; 0xd44 <tetUpdate+0x1fe>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	ee 24       	eor	r14, r14
     d40:	ff 24       	eor	r15, r15
     d42:	c5 cf       	rjmp	.-118    	; 0xcce <tetUpdate+0x188>
								pieceNum+1);
			}


		//Load a new piece...
		pieceNum++;
     d44:	80 91 6e 00 	lds	r24, 0x006E
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	80 93 6e 00 	sts	0x006E, r24
		if(pieceNum==NUM_PIECES)
     d4e:	87 30       	cpi	r24, 0x07	; 7
     d50:	11 f4       	brne	.+4      	; 0xd56 <tetUpdate+0x210>
			pieceNum = 0;
     d52:	10 92 6e 00 	sts	0x006E, r1
		pieceLeftCol = PIECE_STARTCOL;
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	80 93 71 00 	sts	0x0071, r24
		pieceTopRow = PIECE_STARTROW;
     d5c:	10 92 70 00 	sts	0x0070, r1
		pieceOrientation = 0;
     d60:	10 92 6f 00 	sts	0x006F, r1
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <tetUpdate+0x226>
	}

}
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	34 2f       	mov	r19, r20
     d6a:	2a cf       	rjmp	.-428    	; 0xbc0 <tetUpdate+0x7a>
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	af 90       	pop	r10
     d84:	9f 90       	pop	r9
     d86:	8f 90       	pop	r8
     d88:	7f 90       	pop	r7
     d8a:	6f 90       	pop	r6
     d8c:	5f 90       	pop	r5
     d8e:	4f 90       	pop	r4
     d90:	3f 90       	pop	r3
     d92:	2f 90       	pop	r2
     d94:	08 95       	ret

00000d96 <tetBrick_to_fb>:

uint8_t tetColorScheme = 0;

uint8_t tetBrick_to_fb(uint8_t tetBrick)
{
	if(!tetBrick)
     d96:	88 23       	and	r24, r24
     d98:	a9 f0       	breq	.+42     	; 0xdc4 <tetBrick_to_fb+0x2e>
		return 0;

	switch(tetColorScheme)
     d9a:	90 91 72 00 	lds	r25, 0x0072
     d9e:	81 50       	subi	r24, 0x01	; 1
     da0:	92 30       	cpi	r25, 0x02	; 2
     da2:	38 f4       	brcc	.+14     	; 0xdb2 <tetBrick_to_fb+0x1c>
	{
		heartUpdate();
	}
#endif

}
     da4:	87 30       	cpi	r24, 0x07	; 7
     da6:	68 f4       	brcc	.+26     	; 0xdc2 <tetBrick_to_fb+0x2c>
     da8:	e8 2f       	mov	r30, r24
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	e0 5a       	subi	r30, 0xA0	; 160
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <tetBrick_to_fb+0x28>
     db2:	87 30       	cpi	r24, 0x07	; 7
     db4:	30 f4       	brcc	.+12     	; 0xdc2 <tetBrick_to_fb+0x2c>
     db6:	e8 2f       	mov	r30, r24
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	e9 59       	subi	r30, 0x99	; 153
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	08 95       	ret
     dc2:	8f e3       	ldi	r24, 0x3F	; 63
			}
//		default:
//			return 0;
	}

}
     dc4:	08 95       	ret

00000dc6 <segClear>:
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     dc6:	10 92 73 00 	sts	0x0073, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	80 93 c8 00 	sts	0x00C8, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     dd0:	83 e6       	ldi	r24, 0x63	; 99
     dd2:	80 93 c9 00 	sts	0x00C9, r24
}
     dd6:	08 95       	ret

00000dd8 <segTerminate>:
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     dd8:	80 91 73 00 	lds	r24, 0x0073
     ddc:	83 34       	cpi	r24, 0x43	; 67
     dde:	f8 f4       	brcc	.+62     	; 0xe1e <segTerminate+0x46>
     de0:	e8 2f       	mov	r30, r24
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	e8 53       	subi	r30, 0x38	; 56
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	90 81       	ld	r25, Z
     dee:	98 7f       	andi	r25, 0xF8	; 248
     df0:	f1 f0       	breq	.+60     	; 0xe2e <segTerminate+0x56>
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	80 93 73 00 	sts	0x0073, r24

		rowSegBuffer[segPosition].red_length 
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
     df8:	a8 2f       	mov	r26, r24
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
	if((segPosition < NUM_SEGMENTS-1) 
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;

		rowSegBuffer[segPosition].red_length 
     dfc:	fd 01       	movw	r30, r26
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	e8 53       	subi	r30, 0x38	; 56
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	aa 0f       	add	r26, r26
     e08:	bb 1f       	adc	r27, r27
     e0a:	aa 53       	subi	r26, 0x3A	; 58
     e0c:	bf 4f       	sbci	r27, 0xFF	; 255
     e0e:	8c 91       	ld	r24, X
     e10:	87 70       	andi	r24, 0x07	; 7
     e12:	80 83       	st	Z, r24
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
		rowSegBuffer[segPosition].green_blue
     e14:	11 96       	adiw	r26, 0x01	; 1
     e16:	8c 91       	ld	r24, X
     e18:	11 97       	sbiw	r26, 0x01	; 1
     e1a:	81 83       	std	Z+1, r24	; 0x01
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     e1c:	08 95       	ret
		rowSegBuffer[segPosition].green_blue
			= rowSegBuffer[segPosition-1].green_blue;
	}
	//We're already at the last segment, so we have to nullify it
	//This might terminate the last pixel early, but is necessary.
	else if(segPosition == NUM_SEGMENTS-1)
     e1e:	83 34       	cpi	r24, 0x43	; 67
     e20:	31 f4       	brne	.+12     	; 0xe2e <segTerminate+0x56>
	{
		//Apparently white doesn't cause sync problems... so load it white
		rowSegBuffer[segPosition].red_length = fbRed_to_seg(_W);
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	80 93 4e 01 	sts	0x014E, r24
		rowSegBuffer[segPosition].green_blue = 
     e28:	83 e7       	ldi	r24, 0x73	; 115
     e2a:	80 93 4f 01 	sts	0x014F, r24
     e2e:	08 95       	ret

00000e30 <newSeg>:
// Returns TRUE if it had to be truncated
//  (out of segment memory, past the display edge...)
// length is the real length, not shifted for storage...
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{
     e30:	20 91 73 00 	lds	r18, 0x0073
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     e34:	56 2f       	mov	r21, r22
     e36:	58 6f       	ori	r21, 0xF8	; 248
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     e38:	15 c0       	rjmp	.+42     	; 0xe64 <newSeg+0x34>
	{
		// No more segments available...	
		// The last segment must have a length of 0
		if(segPosition == NUM_SEGMENTS-1)
     e3a:	23 34       	cpi	r18, 0x43	; 67
     e3c:	19 f4       	brne	.+6      	; 0xe44 <newSeg+0x14>
     e3e:	20 93 73 00 	sts	0x0073, r18
     e42:	1b c0       	rjmp	.+54     	; 0xe7a <newSeg+0x4a>
	
		//Check if the segment buffer is cleared...
		// then DON'T increment segPosition...
		//if(!((segPosition == 0) && 
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     e44:	22 23       	and	r18, r18
     e46:	21 f4       	brne	.+8      	; 0xe50 <newSeg+0x20>
     e48:	30 91 c8 00 	lds	r19, 0x00C8
     e4c:	38 7f       	andi	r19, 0xF8	; 248
     e4e:	09 f0       	breq	.+2      	; 0xe52 <newSeg+0x22>
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;
     e50:	2f 5f       	subi	r18, 0xFF	; 255


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     e52:	e2 2f       	mov	r30, r18
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	e8 53       	subi	r30, 0x38	; 56
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	50 83       	st	Z, r21
			red | (SEG_MAXLENGTH<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     e60:	41 83       	std	Z+1, r20	; 0x01

		length -= SEG_MAXLENGTH;
     e62:	4f 97       	sbiw	r24, 0x1f	; 31
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     e64:	8f 31       	cpi	r24, 0x1F	; 31
     e66:	91 05       	cpc	r25, r1
     e68:	40 f7       	brcc	.-48     	; 0xe3a <newSeg+0xa>
     e6a:	20 93 73 00 	sts	0x0073, r18

	}

	//We can fit whatever's left (or the whole thing) into a single segment
	// Unless, of course, there's nothing left...
	if(length > 0) //< SEG_MAXLENGTH)//Guaranteed now...
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	11 f4       	brne	.+4      	; 0xe76 <newSeg+0x46>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	08 95       	ret
	{
		//Make sure there's another segment to write to!
		if(segPosition == NUM_SEGMENTS-1)
     e76:	23 34       	cpi	r18, 0x43	; 67
     e78:	19 f4       	brne	.+6      	; 0xe80 <newSeg+0x50>
		{
			segTerminate();
     e7a:	ae df       	rcall	.-164    	; 0xdd8 <segTerminate>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
     e7e:	08 95       	ret
		}

		//if(!((segPosition == 0) &&
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     e80:	22 23       	and	r18, r18
     e82:	21 f4       	brne	.+8      	; 0xe8c <newSeg+0x5c>
     e84:	30 91 c8 00 	lds	r19, 0x00C8
     e88:	38 7f       	andi	r19, 0xF8	; 248
     e8a:	19 f0       	breq	.+6      	; 0xe92 <newSeg+0x62>
	     ((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
  				segPosition++;
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	20 93 73 00 	sts	0x0073, r18


		rowSegBuffer[segPosition].red_length = 
     e92:	e0 91 73 00 	lds	r30, 0x0073
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e8 53       	subi	r30, 0x38	; 56
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	88 0f       	add	r24, r24
     ea2:	88 0f       	add	r24, r24
     ea4:	88 0f       	add	r24, r24
     ea6:	86 2b       	or	r24, r22
     ea8:	80 83       	st	Z, r24
			red | (length<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     eaa:	41 83       	std	Z+1, r20	; 0x01
     eac:	80 e0       	ldi	r24, 0x00	; 0
	}

	return FALSE;

}
     eae:	08 95       	ret

00000eb0 <stretchSeg>:
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     eb0:	e0 91 73 00 	lds	r30, 0x0073
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	df 01       	movw	r26, r30
     eb8:	aa 0f       	add	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	a8 53       	subi	r26, 0x38	; 56
     ebe:	bf 4f       	sbci	r27, 0xFF	; 255
     ec0:	2c 91       	ld	r18, X

		if(!additionalLength)
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	11 f1       	breq	.+68     	; 0xf0a <stretchSeg+0x5a>
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     ec6:	42 2f       	mov	r20, r18
     ec8:	46 95       	lsr	r20
     eca:	46 95       	lsr	r20
     ecc:	46 95       	lsr	r20

		if(!additionalLength)
			return FALSE;

		//We can stretch the current segment
		if(oldLength < SEG_MAXLENGTH)
     ece:	4f 31       	cpi	r20, 0x1F	; 31
     ed0:	98 f4       	brcc	.+38     	; 0xef8 <stretchSeg+0x48>
		{
			uint8_t maxStretch = SEG_MAXLENGTH - oldLength;

			// Will the entire addition fit in the previous segment?
			if(additionalLength <= maxStretch)
     ed2:	3f e1       	ldi	r19, 0x1F	; 31
     ed4:	34 1b       	sub	r19, r20
     ed6:	43 2f       	mov	r20, r19
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	48 17       	cp	r20, r24
     edc:	59 07       	cpc	r21, r25
     ede:	38 f0       	brcs	.+14     	; 0xeee <stretchSeg+0x3e>
			{
				rowSegBuffer[segPosition].red_length += 
     ee0:	88 0f       	add	r24, r24
     ee2:	88 0f       	add	r24, r24
     ee4:	88 0f       	add	r24, r24
     ee6:	82 0f       	add	r24, r18
     ee8:	8c 93       	st	X, r24
     eea:	80 e0       	ldi	r24, 0x00	; 0
					(additionalLength << SEG_LENGTH_SHIFT);

				//Then we're done.
			//	additionalLength = 0;
			//	break;
				return FALSE;
     eec:	08 95       	ret
			else
			{
				uint8_t red = 
					rowSegBuffer[segPosition].red_length & RED_MASK;

				rowSegBuffer[segPosition].red_length =
     eee:	28 6f       	ori	r18, 0xF8	; 248
     ef0:	2c 93       	st	X, r18
					red | (SEG_MAXLENGTH << SEG_LENGTH_SHIFT);

				additionalLength -= maxStretch;
     ef2:	84 1b       	sub	r24, r20
     ef4:	95 0b       	sbc	r25, r21

		// We shouldn't ever get here if additionalLength = 0...

		//But we should test to make sure there's still lenth after
		// the stretch...
		if(additionalLength)
     ef6:	49 f0       	breq	.+18     	; 0xf0a <stretchSeg+0x5a>
				rowSegBuffer[segPosition].green_blue;

			uint8_t retVal;

			//Create new segment(s) with the remaining length
			retVal = newSeg(additionalLength, red, green_blue);
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	e8 53       	subi	r30, 0x38	; 56
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	60 81       	ld	r22, Z
     f02:	67 70       	andi	r22, 0x07	; 7
     f04:	41 81       	ldd	r20, Z+1	; 0x01
     f06:	94 df       	rcall	.-216    	; 0xe30 <newSeg>

			//Then we're done...
			//additionalLength = 0;
			//break;

			return retVal;
     f08:	08 95       	ret
     f0a:	80 e0       	ldi	r24, 0x00	; 0
		}	

		//We shouldn't ever get here...
		// Well, maybe... if additionalLength == maxStretch...?
		return FALSE;
}
     f0c:	08 95       	ret

00000f0e <addSeg>:
// the last segment...
uint8_t addSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Currently not smart enough to stretch the first segment...
	if(segPosition == 0)
     f0e:	e0 91 73 00 	lds	r30, 0x0073
     f12:	ee 23       	and	r30, r30
     f14:	11 f4       	brne	.+4      	; 0xf1a <addSeg+0xc>
		return newSeg(length, red, green_blue);
     f16:	8c df       	rcall	.-232    	; 0xe30 <newSeg>
     f18:	08 95       	ret

	//Can we stretch?
	if(((rowSegBuffer[segPosition].red_length & RED_MASK) == red)
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	e8 53       	subi	r30, 0x38	; 56
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	20 81       	ld	r18, Z
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	27 70       	andi	r18, 0x07	; 7
     f2a:	30 70       	andi	r19, 0x00	; 0
     f2c:	a6 2f       	mov	r26, r22
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	2a 17       	cp	r18, r26
     f32:	3b 07       	cpc	r19, r27
     f34:	29 f4       	brne	.+10     	; 0xf40 <addSeg+0x32>
     f36:	21 81       	ldd	r18, Z+1	; 0x01
     f38:	24 17       	cp	r18, r20
     f3a:	11 f4       	brne	.+4      	; 0xf40 <addSeg+0x32>
		&& (rowSegBuffer[segPosition].green_blue == green_blue))
			return stretchSeg(length);
     f3c:	b9 df       	rcall	.-142    	; 0xeb0 <stretchSeg>
     f3e:	08 95       	ret
	else
		return newSeg(length, red, green_blue);
     f40:	77 df       	rcall	.-274    	; 0xe30 <newSeg>

}
     f42:	08 95       	ret

00000f44 <rbpix_to_seg>:
//This is just an intermediate test, for now...
// for reloading the rowbuffer to a seg-buffer.
//This could easily be revised (and generalized) to be...
// addSegment or addPixel
void rbpix_to_seg(uint8_t rbValue, uint8_t col, uint8_t length)
{
     f44:	1f 93       	push	r17
     f46:	18 2f       	mov	r17, r24
     f48:	84 2f       	mov	r24, r20
	static uint8_t last_rbValue = 0;
	//uint8_t length = 1;

	if(col == 0)
     f4a:	66 23       	and	r22, r22
     f4c:	59 f4       	brne	.+22     	; 0xf64 <rbpix_to_seg+0x20>
	{
		last_rbValue = 0;
     f4e:	10 92 7d 00 	sts	0x007D, r1
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     f52:	10 92 73 00 	sts	0x0073, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	90 93 c8 00 	sts	0x00C8, r25
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     f5c:	93 e6       	ldi	r25, 0x63	; 99
     f5e:	90 93 c9 00 	sts	0x00C9, r25
     f62:	0b c0       	rjmp	.+22     	; 0xf7a <rbpix_to_seg+0x36>
	{
		last_rbValue = 0;
		segClear();
	}
	//Same color as last pixel...
	else if(segPosition && (rbValue == last_rbValue))
     f64:	90 91 73 00 	lds	r25, 0x0073
     f68:	99 23       	and	r25, r25
     f6a:	39 f0       	breq	.+14     	; 0xf7a <rbpix_to_seg+0x36>
     f6c:	90 91 7d 00 	lds	r25, 0x007D
     f70:	19 17       	cp	r17, r25
     f72:	19 f4       	brne	.+6      	; 0xf7a <rbpix_to_seg+0x36>
	{
		stretchSeg(length);
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9c df       	rcall	.-200    	; 0xeb0 <stretchSeg>
		return;
     f78:	16 c0       	rjmp	.+44     	; 0xfa6 <rbpix_to_seg+0x62>

	uint8_t green = rbValue & 0x03;
	uint8_t red = (rbValue & 0x1C) >> 2;
	uint8_t blue = rbValue >> 5;

	newSeg(length, red, (blue<<4) | green);
     f7a:	61 2f       	mov	r22, r17
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	6c 71       	andi	r22, 0x1C	; 28
     f80:	70 70       	andi	r23, 0x00	; 0
     f82:	75 95       	asr	r23
     f84:	67 95       	ror	r22
     f86:	75 95       	asr	r23
     f88:	67 95       	ror	r22
     f8a:	21 2f       	mov	r18, r17
     f8c:	22 95       	swap	r18
     f8e:	26 95       	lsr	r18
     f90:	27 70       	andi	r18, 0x07	; 7
     f92:	22 95       	swap	r18
     f94:	20 7f       	andi	r18, 0xF0	; 240
     f96:	91 2f       	mov	r25, r17
     f98:	93 70       	andi	r25, 0x03	; 3
     f9a:	29 2b       	or	r18, r25
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	42 2f       	mov	r20, r18
     fa0:	47 df       	rcall	.-370    	; 0xe30 <newSeg>

	last_rbValue = rbValue;
     fa2:	10 93 7d 00 	sts	0x007D, r17
}
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <fb_to_rb>:
   //         |   Blue Value (0-3)
   //         Alpha... only partially implemented

#warning "This isn't at all optimized..."
   // Blue setting = Blue Value | 0x04
   uint8_t blueValue = (fbColor & 0x30) >> 4;
     faa:	68 2f       	mov	r22, r24
     fac:	70 e0       	ldi	r23, 0x00	; 0
   rb = (blueValue << 5) | 0x80;

   // Red setting = redVal << 1 | redVal & 0x01
   uint8_t redValue = (fbColor & 0x03);
   rb |= ((redValue << 1) | (redValue & 0x01)) << 2;
     fae:	83 70       	andi	r24, 0x03	; 3
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9c 01       	movw	r18, r24
     fb4:	21 70       	andi	r18, 0x01	; 1
     fb6:	30 70       	andi	r19, 0x00	; 0
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	28 2b       	or	r18, r24
     fbe:	39 2b       	or	r19, r25
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	20 68       	ori	r18, 0x80	; 128
     fca:	ab 01       	movw	r20, r22
     fcc:	40 73       	andi	r20, 0x30	; 48
     fce:	50 70       	andi	r21, 0x00	; 0
     fd0:	44 0f       	add	r20, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	24 2b       	or	r18, r20
     fd6:	cb 01       	movw	r24, r22
     fd8:	8c 70       	andi	r24, 0x0C	; 12
     fda:	90 70       	andi	r25, 0x00	; 0
     fdc:	95 95       	asr	r25
     fde:	87 95       	ror	r24
     fe0:	95 95       	asr	r25
     fe2:	87 95       	ror	r24
   // Green Setting = Green Value...
   uint8_t greenValue = (fbColor & 0x0C) >> 2;
   rb |= greenValue;

   return rb;
}
     fe4:	82 2b       	or	r24, r18
     fe6:	08 95       	ret

00000fe8 <pll_enable>:
   // this is 64MHz/512=125kHz
   // The benefit of such high PWM frequency is the low RC values necessary
   //  for filtering to DC.
   // "To change Timer/Counter1 to the async mode follow this procedure"
   // 1: Enable the PLL
   setbit(PLLE, PLLCSR);
     fe8:	89 b5       	in	r24, 0x29	; 41
     fea:	82 60       	ori	r24, 0x02	; 2
     fec:	89 bd       	out	0x29, r24	; 41
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fee:	88 ec       	ldi	r24, 0xC8	; 200
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <pll_enable+0xa>
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <pll_enable+0x12>
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
   {
      asm("nop");
     ff8:	00 00       	nop
   // 2: Wait 100us for the PLL to stabilize
   // (can't use dmsWait since the timer updating the dmsCount hasn't yet been started!)
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
     ffa:	09 b4       	in	r0, 0x29	; 41
     ffc:	00 fe       	sbrs	r0, 0
     ffe:	fc cf       	rjmp	.-8      	; 0xff8 <pll_enable+0x10>
   {
      asm("nop");
   }
   // 4: Set the PCKE bit to enable async mode
   setbit(PCKE, PLLCSR);
    1000:	89 b5       	in	r24, 0x29	; 41
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	89 bd       	out	0x29, r24	; 41

}
    1006:	08 95       	ret

00001008 <lvds_timerInit>:
   //Timer1 is used for LVDS (in PLL clocking mode)
  
  	//pll_enable();	
   
   //We want it to count 7 bits, 0-6 and reset at 7
   OCR1C = 6;
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	8b bd       	out	0x2b, r24	; 43

	//We want the clock to go low at TCNT=0 and high at TCNT=4
	CLOCK_OCR = 3; //2; //3;
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	8c bd       	out	0x2c, r24	; 44
	//PLL is 4MHz*8 = 32MHz
	// then TimerClockDivisor=8 gives 4MHz
	pll_enable();
	#define SLOW_LVDS_TEST TRUE
#elif (defined(OSCCAL_VAL))
   OSCCAL = OSCCAL_VAL;
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	81 bf       	out	0x31, r24	; 49
	//  (horizontally... pre LVDS_PRESCALER affecting DOTS_TO_CYC)
	//  so accessing *all* pixels in a row would make it even slower...
	// Further, it didn't seem to be paying attention to the fact that
	// the same pixels are drawn on multiple rows...
	// WTF? (the image was scaled, proportionately! 1pix x 1pix)
	pll_enable();
    1014:	e9 df       	rcall	.-46     	; 0xfe8 <pll_enable>
	pll_enable();
	//#warning "The PLL configuration code is not in here yet!"
#endif

	//Set the Timer1 clock prescaler...
	writeMasked(CSBITS, 
    1016:	8f b5       	in	r24, 0x2f	; 47
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	84 60       	ori	r24, 0x04	; 4
    101c:	8f bd       	out	0x2f, r24	; 47
					TCCR1B);

	//Set the DeadTime prescaler (no prescaling, same speed as TCNT1)...
	// Allegedly this is prescaled from the PCK (or CK)
	// 	NOT from the Timer1 prescaler...
	writeMasked(DTPSBITS,
    101e:	8f b5       	in	r24, 0x2f	; 47
    1020:	80 63       	ori	r24, 0x30	; 48
    1022:	8f bd       	out	0x2f, r24	; 47
 
   //FastPWM
//Now Handled in lvds_xxxOnCompare():

	//These are also written below (excluding PWM1D)
	setbit(PWM1A, TCCR1A);  //Enable PWM on OC1A for DVH
    1024:	80 b7       	in	r24, 0x30	; 48
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	80 bf       	out	0x30, r24	; 48
                           //Need to do the same for other channels
  
	setbit(PWM1B, TCCR1A);  //Enable PWM on OC1B for CLOCK 
    102a:	80 b7       	in	r24, 0x30	; 48
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	80 bf       	out	0x30, r24	; 48

	setbit(PWM1D, TCCR1C);
    1030:	87 b5       	in	r24, 0x27	; 39
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	87 bd       	out	0x27, r24	; 39

	//PWM1D is not in TCCR1A...

	setoutPORT(PB1, PORTB);	//+OC1A, DVH/BLUE, MISO (usually heart)
    1036:	b9 9a       	sbi	0x17, 1	; 23
//	setoutPORT(PB0, PORTB);	//-OC1A 	MOSI unused
	setoutPORT(PB2, PORTB); //-OC1B, -GREEN	 (INVERTED) SCK
    1038:	ba 9a       	sbi	0x17, 2	; 23
	setoutPORT(PB3, PORTB); //+OC1B Clock (OC1B, not inverted)
    103a:	bb 9a       	sbi	0x17, 3	; 23
	setoutPORT(PB5, PORTB); //+OC1D, RED
    103c:	bd 9a       	sbi	0x17, 5	; 23


   writeMasked(((0<<WGM11) | (0<<WGM10)), //FastPWM (combined with above)
    103e:	86 b5       	in	r24, 0x26	; 38
    1040:	8c 7f       	andi	r24, 0xFC	; 252
    1042:	86 bd       	out	0x26, r24	; 38
//			   | (0<<COM1B1) | (1<<COM1B0) 
//			   | (1<<PWM1A) | (1<<PWM1B) )
//#define lvds_ComplementaryClrOnCompare() \ //
	//Do TCCR1C first, because it contains shadow-bits of TCCR1A that I
	// don't want to have to rewrite...
	TCCR1C = ( (1<<COM1D1) | (0<<COM1D0)
    1044:	89 e0       	ldi	r24, 0x09	; 9
    1046:	87 bd       	out	0x27, r24	; 39
				| (1<<PWM1D) );

	TCCR1A = ( (0<<COM1A1) | (1<<COM1A0) 
    1048:	83 e6       	ldi	r24, 0x63	; 99
    104a:	80 bf       	out	0x30, r24	; 48
   // PWM inversion must be enabled:

	//inverted with PWM1X
//   setbit(PWM1X, TCCR1B);
 
 	Nada_init();
    104c:	80 e3       	ldi	r24, 0x30	; 48
    104e:	84 bd       	out	0x24, r24	; 36
    1050:	84 e0       	ldi	r24, 0x04	; 4
    1052:	8d bd       	out	0x2d, r24	; 45
}
    1054:	08 95       	ret

00001056 <lcd_Init>:
//   (the fewer changes, the less likely we'll glitch...?)


void lcd_Init(void)
{
 	Nada_init();
    1056:	80 e3       	ldi	r24, 0x30	; 48
    1058:	84 bd       	out	0x24, r24	; 36
    105a:	84 e0       	ldi	r24, 0x04	; 4
    105c:	8d bd       	out	0x2d, r24	; 45
}
    105e:	08 95       	ret

00001060 <updateLCD>:

	//Hsync and Actually draw the pixels... (when DE is active)
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);
    1060:	20 91 74 00 	lds	r18, 0x0074
// rowNum is only used when DE is active...
//  and should be 0 at *drawn row* 0
void loadData(uint16_t rowNum, uint8_t dataEnable)
{
	//H Active pulse...
   if(vSync)
    1064:	80 91 75 00 	lds	r24, 0x0075
    1068:	88 23       	and	r24, r24
    106a:	39 f0       	breq	.+14     	; 0x107a <updateLCD+0x1a>
   {
		//Vsync_fromNada() is called at the end of the last interupt
      VplusH_fromVsync();
    106c:	1d bc       	out	0x2d, r1	; 45
    106e:	8f ea       	ldi	r24, 0xAF	; 175
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <updateLCD+0x12>
      Hlow_Delay();
      Vsync_fromVplusH();
    1076:	85 e0       	ldi	r24, 0x05	; 5
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <updateLCD+0x28>
      HD_Delay();
   }
   else
   {
      Hsync_fromNada();
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	8d bd       	out	0x2d, r24	; 45
    107e:	8f ea       	ldi	r24, 0xAF	; 175
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <updateLCD+0x22>
      Hlow_Delay();
      Nada_fromHsync();
    1086:	84 e0       	ldi	r24, 0x04	; 4
    1088:	8d bd       	out	0x2d, r24	; 45
    108a:	88 e5       	ldi	r24, 0x58	; 88
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <updateLCD+0x2e>
      HD_Delay();
   }

   if(dataEnable)
    1092:	22 23       	and	r18, r18
    1094:	09 f4       	brne	.+2      	; 0x1098 <updateLCD+0x38>
    1096:	2d c0       	rjmp	.+90     	; 0x10f2 <Done_974+0xe>
		// 4 doesn't work... blue-lines

#else		//ROW_SEG_BUFFER
void drawPix(uint8_t rowNum)
{
	TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
    1098:	83 e5       	ldi	r24, 0x53	; 83
    109a:	80 bf       	out	0x30, r24	; 48
		  "I"  (_SFR_IO_ADDR(DT1)),	//DT1: %6
		  "I"  (_SFR_IO_ADDR(OCR1A))	//OCR1A %7
	);
*/

__asm__ __volatile__
    109c:	e8 ec       	ldi	r30, 0xC8	; 200
    109e:	f0 e0       	ldi	r31, 0x00	; 0

000010a0 <LoadNext_974>:
    10a0:	41 91       	ld	r20, Z+
    10a2:	54 2f       	mov	r21, r20
    10a4:	57 70       	andi	r21, 0x07	; 7
    10a6:	61 91       	ld	r22, Z+
    10a8:	76 2f       	mov	r23, r22
    10aa:	6f 70       	andi	r22, 0x0F	; 15
    10ac:	72 95       	swap	r23
    10ae:	7f 70       	andi	r23, 0x0F	; 15
    10b0:	5a bd       	out	0x2a, r21	; 42
    10b2:	64 bd       	out	0x24, r22	; 36
    10b4:	7d bd       	out	0x2d, r23	; 45
    10b6:	48 7f       	andi	r20, 0xF8	; 248
    10b8:	a9 f0       	breq	.+42     	; 0x10e4 <Done_974>
    10ba:	00 00       	nop
    10bc:	00 00       	nop

000010be <Counter_974>:
    10be:	48 50       	subi	r20, 0x08	; 8
    10c0:	79 f3       	breq	.-34     	; 0x10a0 <LoadNext_974>
    10c2:	00 00       	nop
    10c4:	00 00       	nop
    10c6:	00 00       	nop
    10c8:	00 00       	nop
    10ca:	00 00       	nop
    10cc:	00 00       	nop
    10ce:	00 00       	nop
    10d0:	00 00       	nop
    10d2:	00 00       	nop
    10d4:	00 00       	nop
    10d6:	00 00       	nop
    10d8:	00 00       	nop
    10da:	00 00       	nop
    10dc:	00 00       	nop
    10de:	00 00       	nop
    10e0:	00 00       	nop
    10e2:	ed cf       	rjmp	.-38     	; 0x10be <Counter_974>

000010e4 <Done_974>:
		// green seems to be floating between the last pixel and the
		// delay_cyc (!)
		//Disable complementary-output for Green 
		//  (on /OC1B, where CLK is OC1B)
		// Since Nada, V, and H DT's might be bad for clocking.
		TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
    10e4:	83 e6       	ldi	r24, 0x63	; 99
    10e6:	80 bf       	out	0x30, r24	; 48
         | (1<<COM1B1) | (0<<COM1B0)
         | (1<<PWM1A) | (1<<PWM1B) );

		fullBlue();
    10e8:	14 bc       	out	0x24, r1	; 36
    10ea:	86 e0       	ldi	r24, 0x06	; 6
    10ec:	8d bd       	out	0x2d, r24	; 45
		Nada_fromDEonly();
    10ee:	80 e3       	ldi	r24, 0x30	; 48
    10f0:	84 bd       	out	0x24, r24	; 36
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);

	hsyncCount++;
    10f2:	80 91 76 00 	lds	r24, 0x0076
    10f6:	90 91 77 00 	lds	r25, 0x0077
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	90 93 77 00 	sts	0x0077, r25
    1100:	80 93 76 00 	sts	0x0076, r24

	switch(hsyncCount)
    1104:	83 32       	cpi	r24, 0x23	; 35
    1106:	91 05       	cpc	r25, r1
    1108:	c1 f0       	breq	.+48     	; 0x113a <Done_974+0x56>
    110a:	84 32       	cpi	r24, 0x24	; 36
    110c:	91 05       	cpc	r25, r1
    110e:	20 f4       	brcc	.+8      	; 0x1118 <Done_974+0x34>
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	e1 f4       	brne	.+56     	; 0x114e <Done_974+0x6a>
    1116:	08 c0       	rjmp	.+16     	; 0x1128 <Done_974+0x44>
    1118:	86 32       	cpi	r24, 0x26	; 38
    111a:	91 05       	cpc	r25, r1
    111c:	a9 f0       	breq	.+42     	; 0x1148 <Done_974+0x64>
    111e:	23 e0       	ldi	r18, 0x03	; 3
    1120:	86 32       	cpi	r24, 0x26	; 38
    1122:	92 07       	cpc	r25, r18
    1124:	a1 f4       	brne	.+40     	; 0x114e <Done_974+0x6a>
    1126:	15 c0       	rjmp	.+42     	; 0x1152 <Done_974+0x6e>
	{
		//V Front Porch, begins with initLCD

		//Vsync H->L (Begin V-Sync)
		case T_DV:
			dataEnable = FALSE;
    1128:	10 92 74 00 	sts	0x0074, r1
			//clrpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = TRUE;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 75 00 	sts	0x0075, r24
			Vsync_fromNada();
    1132:	80 e4       	ldi	r24, 0x40	; 64
    1134:	84 bd       	out	0x24, r24	; 36
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	05 c0       	rjmp	.+10     	; 0x1144 <Done_974+0x60>
		//	if(hfm_nextOutput(&modulator))
		//		colorOverride = 0xff;
		//	else
		//		colorOverride = 7;
			//setpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = FALSE;
    113a:	10 92 75 00 	sts	0x0075, r1
			Nada_fromVsync();
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	84 bd       	out	0x24, r24	; 36
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	8d bd       	out	0x2d, r24	; 45
    1146:	03 c0       	rjmp	.+6      	; 0x114e <Done_974+0x6a>
			break;
		//Start of frame (DE active)
		case T_VD +(T_Vlow + T_DV):
			dataEnable = TRUE;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 74 00 	sts	0x0074, r24
    114e:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1150:	08 95       	ret
		// All rows have been displayed
		// Return to V Front Porch
		case V_COUNT +(T_VD + T_Vlow + T_DV):
			dataEnable = FALSE;
    1152:	10 92 74 00 	sts	0x0074, r1
		//	break;
		//Frame complete
		//case HSYNC_COUNT_FRAME_COMPLETE:
			//T_DV +(V_COUNT+T_VD+T_Vlow) + FRAME_UPDATE_DELAY:
			hsyncCount = 0;
    1156:	10 92 77 00 	sts	0x0077, r1
    115a:	10 92 76 00 	sts	0x0076, r1
    115e:	81 e0       	ldi	r24, 0x01	; 1
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...

	return frameComplete;
}
    1160:	08 95       	ret

00001162 <init_timer0Hsync>:

#if (TIMER0_OCRVAL > 255)
 #error "Despite all my efforts, TIMER0_OCRVAL is *still* > 255!"
#endif

   OCR0A = TIMER0_OCRVAL; //T_Hlow_CYC + T_HD_CYC + T_DE_CYC + T_DH_CYC;
    1162:	83 ee       	ldi	r24, 0xE3	; 227
    1164:	83 bb       	out	0x13, r24	; 19
	timer_setWGM(0, WGM_CLR_ON_COMPARE);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	62 e0       	ldi	r22, 0x02	; 2
    116a:	3d db       	rcall	.-2438   	; 0x7e6 <timer_setWGM>
   timer_selectDivisor(0, TIMER0_CLKDIV); //CLKDIV1);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	68 e0       	ldi	r22, 0x08	; 8
    1170:	11 db       	rcall	.-2526   	; 0x794 <timer_selectDivisor>
   timer_compareMatchIntEnable(0, OUT_CHANNELA);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	41 e0       	ldi	r20, 0x01	; 1
    1178:	6a db       	rcall	.-2348   	; 0x84e <timer_compareMatchIntSetup>
}
    117a:	08 95       	ret

0000117c <main>:
	adc_takeInput(6);
	adc_init();
	adc_select(6);
#endif

	tetInit(7);
    117c:	87 e0       	ldi	r24, 0x07	; 7
    117e:	c4 dc       	rcall	.-1656   	; 0xb08 <tetInit>

	init_timer0Hsync();
    1180:	f0 df       	rcall	.-32     	; 0x1162 <init_timer0Hsync>
	//This starts pretty late... watch out for WDT
	init_heartBeat();

	setHeartRate(0);

	lvds_timerInit();
    1182:	42 df       	rcall	.-380    	; 0x1008 <lvds_timerInit>
	uint8_t imageNum = 0;
	uint8_t colorShift = 0;
	while(1)
	{
 #if (defined(FRAME_SYNC) && FRAME_SYNC)
		if(frameCount==0 && !getbit(OCIE0A, T0_TIMSK))
    1184:	80 91 78 00 	lds	r24, 0x0078
    1188:	88 23       	and	r24, r24
    118a:	39 f4       	brne	.+14     	; 0x119a <main+0x1e>
    118c:	89 b7       	in	r24, 0x39	; 57
    118e:	80 71       	andi	r24, 0x10	; 16
    1190:	e9 f7       	brne	.-6      	; 0x118c <main+0x10>
 #if (defined(LIFE) && LIFE)
			lifeRound();
 #endif //LIFE
 
 #if (FRAME_COUNT_TO_DELAY != 0)
			timer_compareMatchIntEnable(0, OUT_CHANNELA);
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	41 e0       	ldi	r20, 0x01	; 1
    1196:	5b db       	rcall	.-2378   	; 0x84e <timer_compareMatchIntSetup>
    1198:	f5 cf       	rjmp	.-22     	; 0x1184 <main+0x8>
    119a:	ff cf       	rjmp	.-2      	; 0x119a <main+0x1e>

0000119c <__vector_14>:
//#include "../../../_commonCode/lcdStuff/0.50ncf/lcdStuff.c"
//#include "lcdUpdate.c"

//SIGNAL(TIMER1_COMPA_vect)
SIGNAL(TIMER0_COMPA_vect)
{
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	9f 92       	push	r9
    11a8:	af 92       	push	r10
    11aa:	bf 92       	push	r11
    11ac:	cf 92       	push	r12
    11ae:	df 92       	push	r13
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	2f 93       	push	r18
    11ba:	3f 93       	push	r19
    11bc:	4f 93       	push	r20
    11be:	5f 93       	push	r21
    11c0:	6f 93       	push	r22
    11c2:	7f 93       	push	r23
    11c4:	8f 93       	push	r24
    11c6:	9f 93       	push	r25
    11c8:	af 93       	push	r26
    11ca:	bf 93       	push	r27
    11cc:	ef 93       	push	r30
    11ce:	ff 93       	push	r31
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <__vector_14+0x3a>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	setpinPORT(PB2, PORTB);
	clrpinPORT(PB2, PORTB);
#endif


	if(updateLCD())
    11da:	42 df       	rcall	.-380    	; 0x1060 <updateLCD>
    11dc:	88 23       	and	r24, r24
    11de:	69 f0       	breq	.+26     	; 0x11fa <__vector_14+0x5e>
	{
#if (FRAME_COUNT_TO_DELAY != 0)
			//static uint8_t frameCount = 0;
			frameCount++;
    11e0:	80 91 79 00 	lds	r24, 0x0079
    11e4:	8f 5f       	subi	r24, 0xFF	; 255
    11e6:	80 93 79 00 	sts	0x0079, r24
			if(frameCount == FRAME_COUNT_TO_DELAY)
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	31 f4       	brne	.+12     	; 0x11fa <__vector_14+0x5e>
			{
				frameCount = 0;
    11ee:	10 92 79 00 	sts	0x0079, r1
				timer_compareMatchIntSetup(0, OUT_CHANNELA, FALSE);
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	2a db       	rcall	.-2476   	; 0x84e <timer_compareMatchIntSetup>
	}

#if(defined(LOADROW) && LOADROW)
	//Load the next row into the row(seg)buffer
	//data is enabled after T_VD+T_Vlow...
	if((hsyncCount >= T_VD+T_Vlow) && (hsyncCount < T_VD+T_Vlow+V_COUNT))
    11fa:	00 91 76 00 	lds	r16, 0x0076
    11fe:	10 91 77 00 	lds	r17, 0x0077
    1202:	03 52       	subi	r16, 0x23	; 35
    1204:	10 40       	sbci	r17, 0x00	; 0
    1206:	23 e0       	ldi	r18, 0x03	; 3
    1208:	00 30       	cpi	r16, 0x00	; 0
    120a:	12 07       	cpc	r17, r18
    120c:	08 f0       	brcs	.+2      	; 0x1210 <__vector_14+0x74>
    120e:	c5 c1       	rjmp	.+906    	; 0x159a <__vector_14+0x3fe>

 #elif (defined(SEG_SINE) && SEG_SINE)
	static uint16_t lastThetaOffset = 0;
	static uint8_t frameCount = 0;

	if(rowNum == 0)
    1210:	01 15       	cp	r16, r1
    1212:	11 05       	cpc	r17, r1
    1214:	71 f4       	brne	.+28     	; 0x1232 <__vector_14+0x96>
	{
		lastThetaOffset+=16;
    1216:	80 91 7b 00 	lds	r24, 0x007B
    121a:	90 91 7c 00 	lds	r25, 0x007C
    121e:	40 96       	adiw	r24, 0x10	; 16
    1220:	90 93 7c 00 	sts	0x007C, r25
    1224:	80 93 7b 00 	sts	0x007B, r24
		frameCount++;
    1228:	80 91 7a 00 	lds	r24, 0x007A
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	80 93 7a 00 	sts	0x007A, r24
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
    1232:	10 92 73 00 	sts	0x0073, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
    1236:	86 e0       	ldi	r24, 0x06	; 6
    1238:	80 93 c8 00 	sts	0x00C8, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
    123c:	83 e6       	ldi	r24, 0x63	; 99
    123e:	80 93 c9 00 	sts	0x00C9, r24
	}
	//pgm_read_sine(sineTable[theta])

	segClear();
	//addSegfb(3,0x06, (6<<4) | 3);
	addSegfb(3, _W);
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	67 e0       	ldi	r22, 0x07	; 7
    1248:	43 e7       	ldi	r20, 0x73	; 115
    124a:	61 de       	rcall	.-830    	; 0xf0e <addSeg>

	uint8_t sineVal = (uint8_t)((int8_t)128 + 
    124c:	80 91 7b 00 	lds	r24, 0x007B
    1250:	90 91 7c 00 	lds	r25, 0x007C
    1254:	80 0f       	add	r24, r16
    1256:	91 1f       	adc	r25, r17
    1258:	c7 db       	rcall	.-2162   	; 0x9e8 <sineRaw8>
			sineRaw8(rowNum+lastThetaOffset));
    125a:	70 e8       	ldi	r23, 0x80	; 128
    125c:	f7 2e       	mov	r15, r23
    125e:	f8 0e       	add	r15, r24

	uint8_t nextSineVal = (uint8_t)((int8_t)128 +
    1260:	80 91 7b 00 	lds	r24, 0x007B
    1264:	90 91 7c 00 	lds	r25, 0x007C
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	80 0f       	add	r24, r16
    126c:	91 1f       	adc	r25, r17
    126e:	bc db       	rcall	.-2184   	; 0x9e8 <sineRaw8>
			sineRaw8(rowNum+1+lastThetaOffset));
    1270:	80 58       	subi	r24, 0x80	; 128

	uint8_t length; 

	//If the step-size is greater than one pixel, we'll see hashing
	// this should fix that.
	if(nextSineVal < sineVal)
    1272:	8f 15       	cp	r24, r15
    1274:	20 f4       	brcc	.+8      	; 0x127e <__vector_14+0xe2>
	{
		length = (sineVal - nextSineVal);
    1276:	ef 2c       	mov	r14, r15
    1278:	e8 1a       	sub	r14, r24
		//This assures that the additional length of the white-segment
		// goes in the proper direction...
		sineVal-=length;//*4;
    127a:	fe 18       	sub	r15, r14
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <__vector_14+0xea>
	}
	else if(nextSineVal > sineVal)
    127e:	f8 16       	cp	r15, r24
    1280:	20 f4       	brcc	.+8      	; 0x128a <__vector_14+0xee>
		length = (nextSineVal - sineVal);
    1282:	e8 2e       	mov	r14, r24
    1284:	ef 18       	sub	r14, r15
		
	//But we don't want zero-length white segments (where the sine values
	// are horizontal)
	if(length == 0)
    1286:	ee 20       	and	r14, r14
    1288:	11 f4       	brne	.+4      	; 0x128e <__vector_14+0xf2>
    128a:	ee 24       	eor	r14, r14
    128c:	e3 94       	inc	r14
		length = 1;

	uint8_t rgbVal=0;
	uint8_t J=0;
	uint8_t j = frameCount;
    128e:	90 90 7a 00 	lds	r9, 0x007A
    1292:	e0 e0       	ldi	r30, 0x00	; 0
{
	while(value > 0x2f)
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    1294:	63 e0       	ldi	r22, 0x03	; 3
    1296:	d6 2e       	mov	r13, r22
		J++;
		j++; // = J+frameCount;
		
		rgbVal = rgbGradient(j);

		if((uint16_t)J*(uint16_t)WIDTH>=sineVal)
    1298:	af 2c       	mov	r10, r15
    129a:	bb 24       	eor	r11, r11
	uint8_t j = frameCount;

#define WIDTH 5//3//4
	while(1)
	{
		J++;
    129c:	ce 2e       	mov	r12, r30
    129e:	c3 94       	inc	r12
    12a0:	6c 2d       	mov	r22, r12
    12a2:	69 0d       	add	r22, r9
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <__vector_14+0x10c>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    12a6:	60 53       	subi	r22, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    12a8:	60 33       	cpi	r22, 0x30	; 48
    12aa:	e8 f7       	brcc	.-6      	; 0x12a6 <__vector_14+0x10a>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
    12ac:	46 2f       	mov	r20, r22
    12ae:	43 70       	andi	r20, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	62 ff       	sbrs	r22, 2
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <__vector_14+0x120>
    12b6:	3d 2d       	mov	r19, r13
    12b8:	34 1b       	sub	r19, r20
    12ba:	43 2f       	mov	r20, r19
	uint8_t G = ((value)&0x0C)>>2; 
    12bc:	9b 01       	movw	r18, r22
    12be:	2c 70       	andi	r18, 0x0C	; 12
    12c0:	30 70       	andi	r19, 0x00	; 0
    12c2:	35 95       	asr	r19
    12c4:	27 95       	ror	r18
    12c6:	35 95       	asr	r19
    12c8:	27 95       	ror	r18
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
    12ca:	64 ff       	sbrs	r22, 4
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <__vector_14+0x138>
    12ce:	8d 2d       	mov	r24, r13
    12d0:	82 1b       	sub	r24, r18
    12d2:	28 2f       	mov	r18, r24
	uint8_t B = ((value)&0x30) >> 4; 
    12d4:	cb 01       	movw	r24, r22
    12d6:	80 73       	andi	r24, 0x30	; 48
    12d8:	90 70       	andi	r25, 0x00	; 0
    12da:	34 e0       	ldi	r19, 0x04	; 4
    12dc:	95 95       	asr	r25
    12de:	87 95       	ror	r24
    12e0:	3a 95       	dec	r19
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <__vector_14+0x140>
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    12e4:	66 ff       	sbrs	r22, 6
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <__vector_14+0x152>
    12e8:	9d 2d       	mov	r25, r13
    12ea:	98 1b       	sub	r25, r24
    12ec:	89 2f       	mov	r24, r25

	return rgb(r,g,b);
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	23 70       	andi	r18, 0x03	; 3
    12f2:	30 70       	andi	r19, 0x00	; 0
    12f4:	22 0f       	add	r18, r18
    12f6:	33 1f       	adc	r19, r19
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	43 70       	andi	r20, 0x03	; 3
    12fe:	42 2b       	or	r20, r18
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	83 70       	andi	r24, 0x03	; 3
    1304:	90 70       	andi	r25, 0x00	; 0
    1306:	b4 e0       	ldi	r27, 0x04	; 4
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	ba 95       	dec	r27
    130e:	e1 f7       	brne	.-8      	; 0x1308 <__vector_14+0x16c>
    1310:	48 2b       	or	r20, r24
		j++; // = J+frameCount;
		
		rgbVal = rgbGradient(j);

		if((uint16_t)J*(uint16_t)WIDTH>=sineVal)
    1312:	8c 2d       	mov	r24, r12
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	65 e0       	ldi	r22, 0x05	; 5
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	6c d2       	rcall	.+1240   	; 0x17f4 <__mulhi3>
    131c:	24 2f       	mov	r18, r20
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	f4 2f       	mov	r31, r20
    1322:	f1 70       	andi	r31, 0x01	; 1
    1324:	40 73       	andi	r20, 0x30	; 48
    1326:	8a 15       	cp	r24, r10
    1328:	9b 05       	cpc	r25, r11
    132a:	98 f4       	brcc	.+38     	; 0x1352 <__vector_14+0x1b6>
			break;

		addSegfb(WIDTH, rgbVal);
    132c:	b9 01       	movw	r22, r18
    132e:	63 70       	andi	r22, 0x03	; 3
    1330:	70 70       	andi	r23, 0x00	; 0
    1332:	66 0f       	add	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	6f 2b       	or	r22, r31
    1338:	40 64       	ori	r20, 0x40	; 64
    133a:	2c 70       	andi	r18, 0x0C	; 12
    133c:	30 70       	andi	r19, 0x00	; 0
    133e:	35 95       	asr	r19
    1340:	27 95       	ror	r18
    1342:	35 95       	asr	r19
    1344:	27 95       	ror	r18
    1346:	42 2b       	or	r20, r18
    1348:	85 e0       	ldi	r24, 0x05	; 5
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	e0 dd       	rcall	.-1088   	; 0xf0e <addSeg>
    134e:	ec 2d       	mov	r30, r12
    1350:	a5 cf       	rjmp	.-182    	; 0x129c <__vector_14+0x100>
	}

	J--;

	addSegfb(sineVal-(uint16_t)J*(uint16_t)WIDTH, rgbVal); 
    1352:	8e 2f       	mov	r24, r30
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	65 e0       	ldi	r22, 0x05	; 5
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	4c d2       	rcall	.+1176   	; 0x17f4 <__mulhi3>
    135c:	b9 01       	movw	r22, r18
    135e:	63 70       	andi	r22, 0x03	; 3
    1360:	70 70       	andi	r23, 0x00	; 0
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	6f 2b       	or	r22, r31
    1368:	40 64       	ori	r20, 0x40	; 64
    136a:	2c 70       	andi	r18, 0x0C	; 12
    136c:	30 70       	andi	r19, 0x00	; 0
    136e:	35 95       	asr	r19
    1370:	27 95       	ror	r18
    1372:	35 95       	asr	r19
    1374:	27 95       	ror	r18
    1376:	42 2b       	or	r20, r18
    1378:	95 01       	movw	r18, r10
    137a:	28 1b       	sub	r18, r24
    137c:	39 0b       	sbc	r19, r25
    137e:	c9 01       	movw	r24, r18
    1380:	c6 dd       	rcall	.-1140   	; 0xf0e <addSeg>

	addSegfb(length, _W); 
    1382:	8e 2d       	mov	r24, r14
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	67 e0       	ldi	r22, 0x07	; 7
    1388:	43 e7       	ldi	r20, 0x73	; 115
    138a:	c1 dd       	rcall	.-1150   	; 0xf0e <addSeg>
	addSegfb(257-sineVal-length, rgbGradient(rowNum/8)); //rowNum/8);
    138c:	68 01       	movw	r12, r16
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	d6 94       	lsr	r13
    1392:	c7 94       	ror	r12
    1394:	8a 95       	dec	r24
    1396:	e1 f7       	brne	.-8      	; 0x1390 <__vector_14+0x1f4>
    1398:	8c 2d       	mov	r24, r12
    139a:	9c 2d       	mov	r25, r12
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <__vector_14+0x204>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    139e:	90 53       	subi	r25, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    13a0:	90 33       	cpi	r25, 0x30	; 48
    13a2:	e8 f7       	brcc	.-6      	; 0x139e <__vector_14+0x202>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
    13a4:	69 2f       	mov	r22, r25
    13a6:	63 70       	andi	r22, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    13a8:	92 ff       	sbrs	r25, 2
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <__vector_14+0x216>
    13ac:	23 e0       	ldi	r18, 0x03	; 3
    13ae:	26 1b       	sub	r18, r22
    13b0:	62 2f       	mov	r22, r18
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    13b2:	98 2f       	mov	r25, r24
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <__vector_14+0x21c>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    13b6:	90 53       	subi	r25, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    13b8:	90 33       	cpi	r25, 0x30	; 48
    13ba:	e8 f7       	brcc	.-6      	; 0x13b6 <__vector_14+0x21a>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
    13bc:	79 2f       	mov	r23, r25
    13be:	73 70       	andi	r23, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    13c0:	92 ff       	sbrs	r25, 2
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <__vector_14+0x22e>
    13c4:	23 e0       	ldi	r18, 0x03	; 3
    13c6:	27 1b       	sub	r18, r23
    13c8:	72 2f       	mov	r23, r18
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    13ca:	28 2f       	mov	r18, r24
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <__vector_14+0x234>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    13ce:	20 53       	subi	r18, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    13d0:	20 33       	cpi	r18, 0x30	; 48
    13d2:	e8 f7       	brcc	.-6      	; 0x13ce <__vector_14+0x232>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    13d4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
    13d6:	a9 01       	movw	r20, r18
    13d8:	40 73       	andi	r20, 0x30	; 48
    13da:	50 70       	andi	r21, 0x00	; 0
    13dc:	b4 e0       	ldi	r27, 0x04	; 4
    13de:	55 95       	asr	r21
    13e0:	47 95       	ror	r20
    13e2:	ba 95       	dec	r27
    13e4:	e1 f7       	brne	.-8      	; 0x13de <__vector_14+0x242>
    13e6:	54 2f       	mov	r21, r20
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    13e8:	26 ff       	sbrs	r18, 6
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <__vector_14+0x25a>
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	94 1b       	sub	r25, r20
    13f0:	59 2f       	mov	r21, r25
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <__vector_14+0x25a>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    13f4:	80 53       	subi	r24, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    13f6:	80 33       	cpi	r24, 0x30	; 48
    13f8:	e8 f7       	brcc	.-6      	; 0x13f4 <__vector_14+0x258>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    13fa:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t G = ((value)&0x0C)>>2; 
    13fc:	9c 01       	movw	r18, r24
    13fe:	2c 70       	andi	r18, 0x0C	; 12
    1400:	30 70       	andi	r19, 0x00	; 0
    1402:	35 95       	asr	r19
    1404:	27 95       	ror	r18
    1406:	35 95       	asr	r19
    1408:	27 95       	ror	r18
    140a:	42 2f       	mov	r20, r18
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
    140c:	84 ff       	sbrs	r24, 4
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <__vector_14+0x27a>
    1410:	23 e0       	ldi	r18, 0x03	; 3
    1412:	24 1b       	sub	r18, r20
    1414:	42 2f       	mov	r20, r18
    1416:	21 e0       	ldi	r18, 0x01	; 1
    1418:	31 e0       	ldi	r19, 0x01	; 1
    141a:	2f 19       	sub	r18, r15
    141c:	31 09       	sbc	r19, r1
    141e:	71 70       	andi	r23, 0x01	; 1
    1420:	63 70       	andi	r22, 0x03	; 3
    1422:	66 0f       	add	r22, r22
    1424:	67 2b       	or	r22, r23
    1426:	95 2f       	mov	r25, r21
    1428:	92 95       	swap	r25
    142a:	90 73       	andi	r25, 0x30	; 48
    142c:	90 64       	ori	r25, 0x40	; 64
    142e:	43 70       	andi	r20, 0x03	; 3
    1430:	49 2b       	or	r20, r25
    1432:	c9 01       	movw	r24, r18
    1434:	8e 19       	sub	r24, r14
    1436:	91 09       	sbc	r25, r1
    1438:	6a dd       	rcall	.-1324   	; 0xf0e <addSeg>

	addSegfb(3, _W);
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	67 e0       	ldi	r22, 0x07	; 7
    1440:	43 e7       	ldi	r20, 0x73	; 115
    1442:	65 dd       	rcall	.-1334   	; 0xf0e <addSeg>

	//Draw a sideways character...
	{
		addSegfb(3, _R);
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	67 e0       	ldi	r22, 0x07	; 7
    144a:	40 e4       	ldi	r20, 0x40	; 64
    144c:	60 dd       	rcall	.-1344   	; 0xf0e <addSeg>
		// starting with the lower-case letters which are shifted down a row
	   // and some garbage in the top row...
		// now I get that I'm reading weird memory locations, but this
		// doesn't seem right. I should be accessing outside the array 
		// altogether, no? 	
		char thisChar = (rowNum/8)%('~'-' '+1) + ' '; //pgm_read_byte(&(string[rowNum/8])); 
    144e:	c6 01       	movw	r24, r12
    1450:	6f e5       	ldi	r22, 0x5F	; 95
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	e1 d1       	rcall	.+962    	; 0x1818 <__udivmodhi4>
    1456:	80 5e       	subi	r24, 0xE0	; 224
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	c8 01       	movw	r24, r16
    145c:	87 70       	andi	r24, 0x07	; 7
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	f1 e0       	ldi	r31, 0x01	; 1
    1462:	ef 2e       	mov	r14, r31
    1464:	f1 2c       	mov	r15, r1
    1466:	02 c0       	rjmp	.+4      	; 0x146c <__vector_14+0x2d0>
    1468:	ee 0c       	add	r14, r14
    146a:	ff 1c       	adc	r15, r15
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <__vector_14+0x2cc>
    1470:	e9 e9       	ldi	r30, 0x99	; 153
    1472:	ae 2e       	mov	r10, r30
    1474:	e2 e0       	ldi	r30, 0x02	; 2
    1476:	be 2e       	mov	r11, r30

		//Ironically, there are exactly the number of characters to be
		// displayed in 768 lines (plus one on the right, to center)
		for(i=8; i>0; i--)
		{
			if(getbit(rowNum%8, getCharRow(thisChar,i-1)))
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	c5 01       	movw	r24, r10
    147c:	8e 0f       	add	r24, r30
    147e:	91 1d       	adc	r25, r1
    1480:	fc 01       	movw	r30, r24
    1482:	e4 5d       	subi	r30, 0xD4	; 212
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	84 91       	lpm	r24, Z
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	8e 21       	and	r24, r14
    148c:	9f 21       	and	r25, r15
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	29 f0       	breq	.+10     	; 0x149c <__vector_14+0x300>
				addSegfb(1, _Y); //0x06, (4<<4) | 3);
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	67 e0       	ldi	r22, 0x07	; 7
    1498:	43 e4       	ldi	r20, 0x43	; 67
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <__vector_14+0x308>
			else
				addSegfb(1, _R); //0x06, (4<<4) | 0);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	67 e0       	ldi	r22, 0x07	; 7
    14a2:	40 e4       	ldi	r20, 0x40	; 64
    14a4:	34 dd       	rcall	.-1432   	; 0xf0e <addSeg>
    14a6:	21 ea       	ldi	r18, 0xA1	; 161
    14a8:	3f ef       	ldi	r19, 0xFF	; 255
    14aa:	a2 0e       	add	r10, r18
    14ac:	b3 1e       	adc	r11, r19
		char thisChar = (rowNum/8)%('~'-' '+1) + ' '; //pgm_read_byte(&(string[rowNum/8])); 
		//'A'; //string[rowNum/8];

		//Ironically, there are exactly the number of characters to be
		// displayed in 768 lines (plus one on the right, to center)
		for(i=8; i>0; i--)
    14ae:	31 ea       	ldi	r19, 0xA1	; 161
    14b0:	a3 16       	cp	r10, r19
    14b2:	3f ef       	ldi	r19, 0xFF	; 255
    14b4:	b3 06       	cpc	r11, r19
    14b6:	01 f7       	brne	.-64     	; 0x1478 <__vector_14+0x2dc>
				addSegfb(1, _Y); //0x06, (4<<4) | 3);
			else
				addSegfb(1, _R); //0x06, (4<<4) | 0);
		}

		addSegfb(3, _R); //0x06, (4<<4) | 0);
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	67 e0       	ldi	r22, 0x07	; 7
    14be:	40 e4       	ldi	r20, 0x40	; 64
    14c0:	26 dd       	rcall	.-1460   	; 0xf0e <addSeg>

		addSegfb(1, _W); //0x04, (6<<4) | 3);
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	67 e0       	ldi	r22, 0x07	; 7
    14c8:	43 e7       	ldi	r20, 0x73	; 115
    14ca:	21 dd       	rcall	.-1470   	; 0xf0e <addSeg>

		//PGM_P charPtr = strchrnul_P(
		PGM_P tqbf = PSTR(" The Quick Brown Fox Jumped Over The Lazy Dog!"); 
		//, rowNum/8);

		strncpy_P(&thisChar, tqbf+(rowNum/8), 1);
    14cc:	b6 01       	movw	r22, r12
    14ce:	64 58       	subi	r22, 0x84	; 132
    14d0:	79 4f       	sbci	r23, 0xF9	; 249
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	10 d2       	rcall	.+1056   	; 0x18fc <strncpy_P>

		addSegfb(3, rgb(0,0,1));//_B); //0, (6<<4) | 0);
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	40 e5       	ldi	r20, 0x50	; 80
    14e4:	14 dd       	rcall	.-1496   	; 0xf0e <addSeg>

		if(rowNum/8 < strlen_P(tqbf))
    14e6:	8c e7       	ldi	r24, 0x7C	; 124
    14e8:	96 e0       	ldi	r25, 0x06	; 6
    14ea:	ff d1       	rcall	.+1022   	; 0x18ea <strlen_P>
    14ec:	c8 16       	cp	r12, r24
    14ee:	d9 06       	cpc	r13, r25
    14f0:	20 f5       	brcc	.+72     	; 0x153a <__vector_14+0x39e>
    14f2:	79 e9       	ldi	r23, 0x99	; 153
    14f4:	c7 2e       	mov	r12, r23
    14f6:	72 e0       	ldi	r23, 0x02	; 2
    14f8:	d7 2e       	mov	r13, r23
		{
			for(i=8; i>0; i--)
			{
				if(getbit(rowNum%8, getCharRow(thisChar,i-1)))
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	c6 01       	movw	r24, r12
    14fe:	8e 0f       	add	r24, r30
    1500:	91 1d       	adc	r25, r1
    1502:	fc 01       	movw	r30, r24
    1504:	e4 5d       	subi	r30, 0xD4	; 212
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	84 91       	lpm	r24, Z
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	8e 21       	and	r24, r14
    150e:	9f 21       	and	r25, r15
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	21 f0       	breq	.+8      	; 0x151c <__vector_14+0x380>
					addSegfb(1, rgb(3,0,1));//_C); //0, (6<<4) | 3);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	67 e0       	ldi	r22, 0x07	; 7
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <__vector_14+0x386>
				else
					addSegfb(1, rgb(0,0,1));//_B); //0, (6<<4) | 0);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	40 e5       	ldi	r20, 0x50	; 80
    1524:	f4 dc       	rcall	.-1560   	; 0xf0e <addSeg>
    1526:	21 ea       	ldi	r18, 0xA1	; 161
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	c2 0e       	add	r12, r18
    152c:	d3 1e       	adc	r13, r19

		addSegfb(3, rgb(0,0,1));//_B); //0, (6<<4) | 0);

		if(rowNum/8 < strlen_P(tqbf))
		{
			for(i=8; i>0; i--)
    152e:	31 ea       	ldi	r19, 0xA1	; 161
    1530:	c3 16       	cp	r12, r19
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	d3 06       	cpc	r13, r19
    1536:	09 f7       	brne	.-62     	; 0x14fa <__vector_14+0x35e>
    1538:	05 c0       	rjmp	.+10     	; 0x1544 <__vector_14+0x3a8>
				else
					addSegfb(1, rgb(0,0,1));//_B); //0, (6<<4) | 0);
			}
		}
		else
			addSegfb(8, rgb(0,0,1));//_B); //0,(6<<4) | 0);
    153a:	88 e0       	ldi	r24, 0x08	; 8
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	40 e5       	ldi	r20, 0x50	; 80
    1542:	e5 dc       	rcall	.-1590   	; 0xf0e <addSeg>

		addSegfb(3, rgb(0,0,1));//_B); //0,(6<<4)|0);
    1544:	83 e0       	ldi	r24, 0x03	; 3
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	40 e5       	ldi	r20, 0x50	; 80
    154c:	e0 dc       	rcall	.-1600   	; 0xf0e <addSeg>

	//newSeg(3,0x06,(4<<4) | 0);

	uint8_t i;
	for(i=0; i<64; i++)
		addSegfb(1, (i+rowNum/4)&0x3f);
    154e:	16 95       	lsr	r17
    1550:	07 95       	ror	r16
    1552:	16 95       	lsr	r17
    1554:	07 95       	ror	r16
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	40 2f       	mov	r20, r16
    155a:	60 2f       	mov	r22, r16
    155c:	63 70       	andi	r22, 0x03	; 3
    155e:	66 0f       	add	r22, r22
    1560:	80 2f       	mov	r24, r16
    1562:	81 70       	andi	r24, 0x01	; 1
    1564:	68 2b       	or	r22, r24
    1566:	40 73       	andi	r20, 0x30	; 48
    1568:	40 64       	ori	r20, 0x40	; 64
    156a:	c8 01       	movw	r24, r16
    156c:	8c 70       	andi	r24, 0x0C	; 12
    156e:	90 70       	andi	r25, 0x00	; 0
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	96 95       	lsr	r25
    1576:	87 95       	ror	r24
    1578:	48 2b       	or	r20, r24
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	2a 83       	std	Y+2, r18	; 0x02
    1580:	c6 dc       	rcall	.-1652   	; 0xf0e <addSeg>
	}

	//newSeg(3,0x06,(4<<4) | 0);

	uint8_t i;
	for(i=0; i<64; i++)
    1582:	2a 81       	ldd	r18, Y+2	; 0x02
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	0f 5f       	subi	r16, 0xFF	; 255
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	20 34       	cpi	r18, 0x40	; 64
    158c:	29 f7       	brne	.-54     	; 0x1558 <__vector_14+0x3bc>
		addSegfb(1, (i+rowNum/4)&0x3f);

	addSegfb(3, _W); //0x06, (6<<4) | 3);
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	67 e0       	ldi	r22, 0x07	; 7
    1594:	43 e7       	ldi	r20, 0x73	; 115
    1596:	bb dc       	rcall	.-1674   	; 0xf0e <addSeg>

	segTerminate();
    1598:	1f dc       	rcall	.-1986   	; 0xdd8 <segTerminate>
	// to load a row to a row-buffer (as opposed to a frame-buffer)
	// thus, DE could gain more pixels because there would be fewer
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	ff 91       	pop	r31
    15a4:	ef 91       	pop	r30
    15a6:	bf 91       	pop	r27
    15a8:	af 91       	pop	r26
    15aa:	9f 91       	pop	r25
    15ac:	8f 91       	pop	r24
    15ae:	7f 91       	pop	r23
    15b0:	6f 91       	pop	r22
    15b2:	5f 91       	pop	r21
    15b4:	4f 91       	pop	r20
    15b6:	3f 91       	pop	r19
    15b8:	2f 91       	pop	r18
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	af 90       	pop	r10
    15ca:	9f 90       	pop	r9
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <vfprintf>:
    15d6:	ab e0       	ldi	r26, 0x0B	; 11
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e0 ef       	ldi	r30, 0xF0	; 240
    15dc:	fa e0       	ldi	r31, 0x0A	; 10
    15de:	47 c1       	rjmp	.+654    	; 0x186e <__prologue_saves__+0x8>
    15e0:	6c 01       	movw	r12, r24
    15e2:	4b 01       	movw	r8, r22
    15e4:	7a 01       	movw	r14, r20
    15e6:	fc 01       	movw	r30, r24
    15e8:	17 82       	std	Z+7, r1	; 0x07
    15ea:	16 82       	std	Z+6, r1	; 0x06
    15ec:	83 81       	ldd	r24, Z+3	; 0x03
    15ee:	81 fd       	sbrc	r24, 1
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <vfprintf+0x2c>
    15f2:	2f ef       	ldi	r18, 0xFF	; 255
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	fa c0       	rjmp	.+500    	; 0x17ec <vfprintf+0x216>
    15f8:	22 e0       	ldi	r18, 0x02	; 2
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	e2 0e       	add	r14, r18
    15fe:	f3 1e       	adc	r15, r19
    1600:	04 c0       	rjmp	.+8      	; 0x160a <vfprintf+0x34>
    1602:	5e 01       	movw	r10, r28
    1604:	08 94       	sec
    1606:	a1 1c       	adc	r10, r1
    1608:	b1 1c       	adc	r11, r1
    160a:	f6 01       	movw	r30, r12
    160c:	73 80       	ldd	r7, Z+3	; 0x03
    160e:	f4 01       	movw	r30, r8
    1610:	73 fc       	sbrc	r7, 3
    1612:	85 91       	lpm	r24, Z+
    1614:	73 fe       	sbrs	r7, 3
    1616:	81 91       	ld	r24, Z+
    1618:	4f 01       	movw	r8, r30
    161a:	88 23       	and	r24, r24
    161c:	09 f4       	brne	.+2      	; 0x1620 <vfprintf+0x4a>
    161e:	e3 c0       	rjmp	.+454    	; 0x17e6 <vfprintf+0x210>
    1620:	85 32       	cpi	r24, 0x25	; 37
    1622:	51 f4       	brne	.+20     	; 0x1638 <vfprintf+0x62>
    1624:	73 fc       	sbrc	r7, 3
    1626:	05 91       	lpm	r16, Z+
    1628:	73 fe       	sbrs	r7, 3
    162a:	01 91       	ld	r16, Z+
    162c:	4f 01       	movw	r8, r30
    162e:	05 32       	cpi	r16, 0x25	; 37
    1630:	11 f0       	breq	.+4      	; 0x1636 <vfprintf+0x60>
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	1a c0       	rjmp	.+52     	; 0x166a <vfprintf+0x94>
    1636:	85 e2       	ldi	r24, 0x25	; 37
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	29 c0       	rjmp	.+82     	; 0x168e <vfprintf+0xb8>
    163c:	00 23       	and	r16, r16
    163e:	09 f4       	brne	.+2      	; 0x1642 <vfprintf+0x6c>
    1640:	d2 c0       	rjmp	.+420    	; 0x17e6 <vfprintf+0x210>
    1642:	82 eb       	ldi	r24, 0xB2	; 178
    1644:	96 e0       	ldi	r25, 0x06	; 6
    1646:	60 2f       	mov	r22, r16
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	44 d1       	rcall	.+648    	; 0x18d4 <strchr_P>
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	39 f4       	brne	.+14     	; 0x165e <vfprintf+0x88>
    1650:	03 32       	cpi	r16, 0x23	; 35
    1652:	11 f4       	brne	.+4      	; 0x1658 <vfprintf+0x82>
    1654:	10 61       	ori	r17, 0x10	; 16
    1656:	03 c0       	rjmp	.+6      	; 0x165e <vfprintf+0x88>
    1658:	0c 36       	cpi	r16, 0x6C	; 108
    165a:	61 f4       	brne	.+24     	; 0x1674 <vfprintf+0x9e>
    165c:	10 68       	ori	r17, 0x80	; 128
    165e:	f4 01       	movw	r30, r8
    1660:	73 fc       	sbrc	r7, 3
    1662:	05 91       	lpm	r16, Z+
    1664:	73 fe       	sbrs	r7, 3
    1666:	01 91       	ld	r16, Z+
    1668:	4f 01       	movw	r8, r30
    166a:	17 ff       	sbrs	r17, 7
    166c:	e7 cf       	rjmp	.-50     	; 0x163c <vfprintf+0x66>
    166e:	00 23       	and	r16, r16
    1670:	09 f4       	brne	.+2      	; 0x1674 <vfprintf+0x9e>
    1672:	b9 c0       	rjmp	.+370    	; 0x17e6 <vfprintf+0x210>
    1674:	8b ea       	ldi	r24, 0xAB	; 171
    1676:	96 e0       	ldi	r25, 0x06	; 6
    1678:	60 2f       	mov	r22, r16
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	2b d1       	rcall	.+598    	; 0x18d4 <strchr_P>
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	49 f0       	breq	.+18     	; 0x1694 <vfprintf+0xbe>
    1682:	24 e0       	ldi	r18, 0x04	; 4
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	e2 0e       	add	r14, r18
    1688:	f3 1e       	adc	r15, r19
    168a:	8f e3       	ldi	r24, 0x3F	; 63
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	b6 01       	movw	r22, r12
    1690:	44 d1       	rcall	.+648    	; 0x191a <fputc>
    1692:	bb cf       	rjmp	.-138    	; 0x160a <vfprintf+0x34>
    1694:	03 36       	cpi	r16, 0x63	; 99
    1696:	29 f0       	breq	.+10     	; 0x16a2 <vfprintf+0xcc>
    1698:	03 37       	cpi	r16, 0x73	; 115
    169a:	71 f0       	breq	.+28     	; 0x16b8 <vfprintf+0xe2>
    169c:	03 35       	cpi	r16, 0x53	; 83
    169e:	e1 f4       	brne	.+56     	; 0x16d8 <vfprintf+0x102>
    16a0:	0a c0       	rjmp	.+20     	; 0x16b6 <vfprintf+0xe0>
    16a2:	87 01       	movw	r16, r14
    16a4:	0e 5f       	subi	r16, 0xFE	; 254
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	f7 01       	movw	r30, r14
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	b6 01       	movw	r22, r12
    16b0:	34 d1       	rcall	.+616    	; 0x191a <fputc>
    16b2:	78 01       	movw	r14, r16
    16b4:	aa cf       	rjmp	.-172    	; 0x160a <vfprintf+0x34>
    16b6:	11 60       	ori	r17, 0x01	; 1
    16b8:	f7 01       	movw	r30, r14
    16ba:	60 80       	ld	r6, Z
    16bc:	71 80       	ldd	r7, Z+1	; 0x01
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <vfprintf+0xf0>
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	b6 01       	movw	r22, r12
    16c4:	2a d1       	rcall	.+596    	; 0x191a <fputc>
    16c6:	f3 01       	movw	r30, r6
    16c8:	10 fd       	sbrc	r17, 0
    16ca:	85 91       	lpm	r24, Z+
    16cc:	10 ff       	sbrs	r17, 0
    16ce:	81 91       	ld	r24, Z+
    16d0:	3f 01       	movw	r6, r30
    16d2:	88 23       	and	r24, r24
    16d4:	a9 f7       	brne	.-22     	; 0x16c0 <vfprintf+0xea>
    16d6:	90 cf       	rjmp	.-224    	; 0x15f8 <vfprintf+0x22>
    16d8:	04 36       	cpi	r16, 0x64	; 100
    16da:	11 f0       	breq	.+4      	; 0x16e0 <vfprintf+0x10a>
    16dc:	09 36       	cpi	r16, 0x69	; 105
    16de:	29 f5       	brne	.+74     	; 0x172a <vfprintf+0x154>
    16e0:	17 ff       	sbrs	r17, 7
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <vfprintf+0x11e>
    16e4:	f7 01       	movw	r30, r14
    16e6:	60 81       	ld	r22, Z
    16e8:	71 81       	ldd	r23, Z+1	; 0x01
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	93 81       	ldd	r25, Z+3	; 0x03
    16ee:	24 e0       	ldi	r18, 0x04	; 4
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	0a c0       	rjmp	.+20     	; 0x1708 <vfprintf+0x132>
    16f4:	f7 01       	movw	r30, r14
    16f6:	20 81       	ld	r18, Z
    16f8:	31 81       	ldd	r19, Z+1	; 0x01
    16fa:	b9 01       	movw	r22, r18
    16fc:	88 27       	eor	r24, r24
    16fe:	77 fd       	sbrc	r23, 7
    1700:	80 95       	com	r24
    1702:	98 2f       	mov	r25, r24
    1704:	22 e0       	ldi	r18, 0x02	; 2
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	e2 0e       	add	r14, r18
    170a:	f3 1e       	adc	r15, r19
    170c:	1f 7e       	andi	r17, 0xEF	; 239
    170e:	97 ff       	sbrs	r25, 7
    1710:	08 c0       	rjmp	.+16     	; 0x1722 <vfprintf+0x14c>
    1712:	90 95       	com	r25
    1714:	80 95       	com	r24
    1716:	70 95       	com	r23
    1718:	61 95       	neg	r22
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8f 4f       	sbci	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	10 64       	ori	r17, 0x40	; 64
    1722:	a5 01       	movw	r20, r10
    1724:	2a e0       	ldi	r18, 0x0A	; 10
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	33 c0       	rjmp	.+102    	; 0x1790 <vfprintf+0x1ba>
    172a:	00 37       	cpi	r16, 0x70	; 112
    172c:	a9 f0       	breq	.+42     	; 0x1758 <vfprintf+0x182>
    172e:	01 37       	cpi	r16, 0x71	; 113
    1730:	30 f4       	brcc	.+12     	; 0x173e <vfprintf+0x168>
    1732:	08 35       	cpi	r16, 0x58	; 88
    1734:	b1 f0       	breq	.+44     	; 0x1762 <vfprintf+0x18c>
    1736:	0f 36       	cpi	r16, 0x6F	; 111
    1738:	09 f0       	breq	.+2      	; 0x173c <vfprintf+0x166>
    173a:	55 c0       	rjmp	.+170    	; 0x17e6 <vfprintf+0x210>
    173c:	06 c0       	rjmp	.+12     	; 0x174a <vfprintf+0x174>
    173e:	05 37       	cpi	r16, 0x75	; 117
    1740:	39 f0       	breq	.+14     	; 0x1750 <vfprintf+0x17a>
    1742:	08 37       	cpi	r16, 0x78	; 120
    1744:	09 f0       	breq	.+2      	; 0x1748 <vfprintf+0x172>
    1746:	4f c0       	rjmp	.+158    	; 0x17e6 <vfprintf+0x210>
    1748:	08 c0       	rjmp	.+16     	; 0x175a <vfprintf+0x184>
    174a:	28 e0       	ldi	r18, 0x08	; 8
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	0c c0       	rjmp	.+24     	; 0x1768 <vfprintf+0x192>
    1750:	1f 7e       	andi	r17, 0xEF	; 239
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	08 c0       	rjmp	.+16     	; 0x1768 <vfprintf+0x192>
    1758:	10 61       	ori	r17, 0x10	; 16
    175a:	14 62       	ori	r17, 0x24	; 36
    175c:	20 e1       	ldi	r18, 0x10	; 16
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <vfprintf+0x192>
    1762:	14 60       	ori	r17, 0x04	; 4
    1764:	20 e1       	ldi	r18, 0x10	; 16
    1766:	32 e0       	ldi	r19, 0x02	; 2
    1768:	17 ff       	sbrs	r17, 7
    176a:	08 c0       	rjmp	.+16     	; 0x177c <vfprintf+0x1a6>
    176c:	f7 01       	movw	r30, r14
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	44 e0       	ldi	r20, 0x04	; 4
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	07 c0       	rjmp	.+14     	; 0x178a <vfprintf+0x1b4>
    177c:	f7 01       	movw	r30, r14
    177e:	60 81       	ld	r22, Z
    1780:	71 81       	ldd	r23, Z+1	; 0x01
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	42 e0       	ldi	r20, 0x02	; 2
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	e4 0e       	add	r14, r20
    178c:	f5 1e       	adc	r15, r21
    178e:	a5 01       	movw	r20, r10
    1790:	f0 d0       	rcall	.+480    	; 0x1972 <__ultoa_invert>
    1792:	08 2f       	mov	r16, r24
    1794:	0a 19       	sub	r16, r10
    1796:	61 2e       	mov	r6, r17
    1798:	77 24       	eor	r7, r7
    179a:	16 ff       	sbrs	r17, 6
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <vfprintf+0x1d0>
    179e:	8d e2       	ldi	r24, 0x2D	; 45
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	b6 01       	movw	r22, r12
    17a4:	ba d0       	rcall	.+372    	; 0x191a <fputc>
    17a6:	64 fe       	sbrs	r6, 4
    17a8:	13 c0       	rjmp	.+38     	; 0x17d0 <vfprintf+0x1fa>
    17aa:	fe 01       	movw	r30, r28
    17ac:	e0 0f       	add	r30, r16
    17ae:	f1 1d       	adc	r31, r1
    17b0:	80 81       	ld	r24, Z
    17b2:	80 33       	cpi	r24, 0x30	; 48
    17b4:	69 f0       	breq	.+26     	; 0x17d0 <vfprintf+0x1fa>
    17b6:	80 e3       	ldi	r24, 0x30	; 48
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	b6 01       	movw	r22, r12
    17bc:	ae d0       	rcall	.+348    	; 0x191a <fputc>
    17be:	62 fe       	sbrs	r6, 2
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <vfprintf+0x1fa>
    17c2:	c3 01       	movw	r24, r6
    17c4:	80 72       	andi	r24, 0x20	; 32
    17c6:	90 70       	andi	r25, 0x00	; 0
    17c8:	88 5a       	subi	r24, 0xA8	; 168
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	b6 01       	movw	r22, r12
    17ce:	a5 d0       	rcall	.+330    	; 0x191a <fputc>
    17d0:	01 50       	subi	r16, 0x01	; 1
    17d2:	f5 01       	movw	r30, r10
    17d4:	e0 0f       	add	r30, r16
    17d6:	f1 1d       	adc	r31, r1
    17d8:	80 81       	ld	r24, Z
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	b6 01       	movw	r22, r12
    17de:	9d d0       	rcall	.+314    	; 0x191a <fputc>
    17e0:	00 23       	and	r16, r16
    17e2:	b1 f7       	brne	.-20     	; 0x17d0 <vfprintf+0x1fa>
    17e4:	12 cf       	rjmp	.-476    	; 0x160a <vfprintf+0x34>
    17e6:	f6 01       	movw	r30, r12
    17e8:	26 81       	ldd	r18, Z+6	; 0x06
    17ea:	37 81       	ldd	r19, Z+7	; 0x07
    17ec:	c9 01       	movw	r24, r18
    17ee:	2b 96       	adiw	r28, 0x0b	; 11
    17f0:	ee e0       	ldi	r30, 0x0E	; 14
    17f2:	59 c0       	rjmp	.+178    	; 0x18a6 <__epilogue_restores__+0x8>

000017f4 <__mulhi3>:
    17f4:	55 27       	eor	r21, r21
    17f6:	00 24       	eor	r0, r0

000017f8 <__mulhi3_loop>:
    17f8:	80 ff       	sbrs	r24, 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <__mulhi3_skip1>
    17fc:	06 0e       	add	r0, r22
    17fe:	57 1f       	adc	r21, r23

00001800 <__mulhi3_skip1>:
    1800:	66 0f       	add	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	61 15       	cp	r22, r1
    1806:	71 05       	cpc	r23, r1
    1808:	21 f0       	breq	.+8      	; 0x1812 <__mulhi3_exit>
    180a:	96 95       	lsr	r25
    180c:	87 95       	ror	r24
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	99 f7       	brne	.-26     	; 0x17f8 <__mulhi3_loop>

00001812 <__mulhi3_exit>:
    1812:	95 2f       	mov	r25, r21
    1814:	80 2d       	mov	r24, r0
    1816:	08 95       	ret

00001818 <__udivmodhi4>:
    1818:	aa 1b       	sub	r26, r26
    181a:	bb 1b       	sub	r27, r27
    181c:	51 e1       	ldi	r21, 0x11	; 17
    181e:	07 c0       	rjmp	.+14     	; 0x182e <__udivmodhi4_ep>

00001820 <__udivmodhi4_loop>:
    1820:	aa 1f       	adc	r26, r26
    1822:	bb 1f       	adc	r27, r27
    1824:	a6 17       	cp	r26, r22
    1826:	b7 07       	cpc	r27, r23
    1828:	10 f0       	brcs	.+4      	; 0x182e <__udivmodhi4_ep>
    182a:	a6 1b       	sub	r26, r22
    182c:	b7 0b       	sbc	r27, r23

0000182e <__udivmodhi4_ep>:
    182e:	88 1f       	adc	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	5a 95       	dec	r21
    1834:	a9 f7       	brne	.-22     	; 0x1820 <__udivmodhi4_loop>
    1836:	80 95       	com	r24
    1838:	90 95       	com	r25
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	08 95       	ret

00001840 <__divmodhi4>:
    1840:	97 fb       	bst	r25, 7
    1842:	09 2e       	mov	r0, r25
    1844:	07 26       	eor	r0, r23
    1846:	0a d0       	rcall	.+20     	; 0x185c <__divmodhi4_neg1>
    1848:	77 fd       	sbrc	r23, 7
    184a:	04 d0       	rcall	.+8      	; 0x1854 <__divmodhi4_neg2>
    184c:	e5 df       	rcall	.-54     	; 0x1818 <__udivmodhi4>
    184e:	06 d0       	rcall	.+12     	; 0x185c <__divmodhi4_neg1>
    1850:	00 20       	and	r0, r0
    1852:	1a f4       	brpl	.+6      	; 0x185a <__divmodhi4_exit>

00001854 <__divmodhi4_neg2>:
    1854:	70 95       	com	r23
    1856:	61 95       	neg	r22
    1858:	7f 4f       	sbci	r23, 0xFF	; 255

0000185a <__divmodhi4_exit>:
    185a:	08 95       	ret

0000185c <__divmodhi4_neg1>:
    185c:	f6 f7       	brtc	.-4      	; 0x185a <__divmodhi4_exit>
    185e:	90 95       	com	r25
    1860:	81 95       	neg	r24
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <__prologue_saves__>:
    1866:	2f 92       	push	r2
    1868:	3f 92       	push	r3
    186a:	4f 92       	push	r4
    186c:	5f 92       	push	r5
    186e:	6f 92       	push	r6
    1870:	7f 92       	push	r7
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	ca 1b       	sub	r28, r26
    1890:	db 0b       	sbc	r29, r27
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	09 94       	ijmp

0000189e <__epilogue_restores__>:
    189e:	2a 88       	ldd	r2, Y+18	; 0x12
    18a0:	39 88       	ldd	r3, Y+17	; 0x11
    18a2:	48 88       	ldd	r4, Y+16	; 0x10
    18a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    18a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    18a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    18aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    18ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    18ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    18b0:	b9 84       	ldd	r11, Y+9	; 0x09
    18b2:	c8 84       	ldd	r12, Y+8	; 0x08
    18b4:	df 80       	ldd	r13, Y+7	; 0x07
    18b6:	ee 80       	ldd	r14, Y+6	; 0x06
    18b8:	fd 80       	ldd	r15, Y+5	; 0x05
    18ba:	0c 81       	ldd	r16, Y+4	; 0x04
    18bc:	1b 81       	ldd	r17, Y+3	; 0x03
    18be:	aa 81       	ldd	r26, Y+2	; 0x02
    18c0:	b9 81       	ldd	r27, Y+1	; 0x01
    18c2:	ce 0f       	add	r28, r30
    18c4:	d1 1d       	adc	r29, r1
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	ed 01       	movw	r28, r26
    18d2:	08 95       	ret

000018d4 <strchr_P>:
    18d4:	fc 01       	movw	r30, r24
    18d6:	05 90       	lpm	r0, Z+
    18d8:	06 16       	cp	r0, r22
    18da:	21 f0       	breq	.+8      	; 0x18e4 <strchr_P+0x10>
    18dc:	00 20       	and	r0, r0
    18de:	d9 f7       	brne	.-10     	; 0x18d6 <strchr_P+0x2>
    18e0:	c0 01       	movw	r24, r0
    18e2:	08 95       	ret
    18e4:	31 97       	sbiw	r30, 0x01	; 1
    18e6:	cf 01       	movw	r24, r30
    18e8:	08 95       	ret

000018ea <strlen_P>:
    18ea:	fc 01       	movw	r30, r24
    18ec:	05 90       	lpm	r0, Z+
    18ee:	00 20       	and	r0, r0
    18f0:	e9 f7       	brne	.-6      	; 0x18ec <strlen_P+0x2>
    18f2:	80 95       	com	r24
    18f4:	90 95       	com	r25
    18f6:	8e 0f       	add	r24, r30
    18f8:	9f 1f       	adc	r25, r31
    18fa:	08 95       	ret

000018fc <strncpy_P>:
    18fc:	fb 01       	movw	r30, r22
    18fe:	dc 01       	movw	r26, r24
    1900:	41 50       	subi	r20, 0x01	; 1
    1902:	50 40       	sbci	r21, 0x00	; 0
    1904:	48 f0       	brcs	.+18     	; 0x1918 <strncpy_P+0x1c>
    1906:	05 90       	lpm	r0, Z+
    1908:	0d 92       	st	X+, r0
    190a:	00 20       	and	r0, r0
    190c:	c9 f7       	brne	.-14     	; 0x1900 <strncpy_P+0x4>
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <strncpy_P+0x16>
    1910:	1d 92       	st	X+, r1
    1912:	41 50       	subi	r20, 0x01	; 1
    1914:	50 40       	sbci	r21, 0x00	; 0
    1916:	e0 f7       	brcc	.-8      	; 0x1910 <strncpy_P+0x14>
    1918:	08 95       	ret

0000191a <fputc>:
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	8c 01       	movw	r16, r24
    1924:	eb 01       	movw	r28, r22
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	81 ff       	sbrs	r24, 1
    192a:	1b c0       	rjmp	.+54     	; 0x1962 <fputc+0x48>
    192c:	82 ff       	sbrs	r24, 2
    192e:	0d c0       	rjmp	.+26     	; 0x194a <fputc+0x30>
    1930:	2e 81       	ldd	r18, Y+6	; 0x06
    1932:	3f 81       	ldd	r19, Y+7	; 0x07
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	9d 81       	ldd	r25, Y+5	; 0x05
    1938:	28 17       	cp	r18, r24
    193a:	39 07       	cpc	r19, r25
    193c:	64 f4       	brge	.+24     	; 0x1956 <fputc+0x3c>
    193e:	e8 81       	ld	r30, Y
    1940:	f9 81       	ldd	r31, Y+1	; 0x01
    1942:	01 93       	st	Z+, r16
    1944:	f9 83       	std	Y+1, r31	; 0x01
    1946:	e8 83       	st	Y, r30
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <fputc+0x3c>
    194a:	e8 85       	ldd	r30, Y+8	; 0x08
    194c:	f9 85       	ldd	r31, Y+9	; 0x09
    194e:	80 2f       	mov	r24, r16
    1950:	09 95       	icall
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	31 f4       	brne	.+12     	; 0x1962 <fputc+0x48>
    1956:	8e 81       	ldd	r24, Y+6	; 0x06
    1958:	9f 81       	ldd	r25, Y+7	; 0x07
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	9f 83       	std	Y+7, r25	; 0x07
    195e:	8e 83       	std	Y+6, r24	; 0x06
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <fputc+0x4c>
    1962:	0f ef       	ldi	r16, 0xFF	; 255
    1964:	1f ef       	ldi	r17, 0xFF	; 255
    1966:	c8 01       	movw	r24, r16
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	08 95       	ret

00001972 <__ultoa_invert>:
    1972:	fa 01       	movw	r30, r20
    1974:	aa 27       	eor	r26, r26
    1976:	28 30       	cpi	r18, 0x08	; 8
    1978:	61 f1       	breq	.+88     	; 0x19d2 <__ultoa_invert+0x60>
    197a:	20 31       	cpi	r18, 0x10	; 16
    197c:	91 f1       	breq	.+100    	; 0x19e2 <__ultoa_invert+0x70>
    197e:	e8 94       	clt
    1980:	6f 93       	push	r22
    1982:	6e 7f       	andi	r22, 0xFE	; 254
    1984:	6e 5f       	subi	r22, 0xFE	; 254
    1986:	7f 4f       	sbci	r23, 0xFF	; 255
    1988:	8f 4f       	sbci	r24, 0xFF	; 255
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	af 4f       	sbci	r26, 0xFF	; 255
    198e:	b1 e0       	ldi	r27, 0x01	; 1
    1990:	40 d0       	rcall	.+128    	; 0x1a12 <__ultoa_invert+0xa0>
    1992:	b4 e0       	ldi	r27, 0x04	; 4
    1994:	3e d0       	rcall	.+124    	; 0x1a12 <__ultoa_invert+0xa0>
    1996:	67 0f       	add	r22, r23
    1998:	78 1f       	adc	r23, r24
    199a:	89 1f       	adc	r24, r25
    199c:	9a 1f       	adc	r25, r26
    199e:	a1 1d       	adc	r26, r1
    19a0:	68 0f       	add	r22, r24
    19a2:	79 1f       	adc	r23, r25
    19a4:	8a 1f       	adc	r24, r26
    19a6:	91 1d       	adc	r25, r1
    19a8:	a1 1d       	adc	r26, r1
    19aa:	6a 0f       	add	r22, r26
    19ac:	71 1d       	adc	r23, r1
    19ae:	81 1d       	adc	r24, r1
    19b0:	91 1d       	adc	r25, r1
    19b2:	a1 1d       	adc	r26, r1
    19b4:	22 d0       	rcall	.+68     	; 0x19fa <__ultoa_invert+0x88>
    19b6:	09 f4       	brne	.+2      	; 0x19ba <__ultoa_invert+0x48>
    19b8:	68 94       	set
    19ba:	3f 91       	pop	r19
    19bc:	06 2e       	mov	r0, r22
    19be:	00 0c       	add	r0, r0
    19c0:	30 19       	sub	r19, r0
    19c2:	00 0c       	add	r0, r0
    19c4:	00 0c       	add	r0, r0
    19c6:	30 19       	sub	r19, r0
    19c8:	30 5d       	subi	r19, 0xD0	; 208
    19ca:	31 93       	st	Z+, r19
    19cc:	ce f6       	brtc	.-78     	; 0x1980 <__ultoa_invert+0xe>
    19ce:	cf 01       	movw	r24, r30
    19d0:	08 95       	ret
    19d2:	46 2f       	mov	r20, r22
    19d4:	47 70       	andi	r20, 0x07	; 7
    19d6:	40 5d       	subi	r20, 0xD0	; 208
    19d8:	41 93       	st	Z+, r20
    19da:	b3 e0       	ldi	r27, 0x03	; 3
    19dc:	0f d0       	rcall	.+30     	; 0x19fc <__ultoa_invert+0x8a>
    19de:	c9 f7       	brne	.-14     	; 0x19d2 <__ultoa_invert+0x60>
    19e0:	f6 cf       	rjmp	.-20     	; 0x19ce <__ultoa_invert+0x5c>
    19e2:	46 2f       	mov	r20, r22
    19e4:	4f 70       	andi	r20, 0x0F	; 15
    19e6:	40 5d       	subi	r20, 0xD0	; 208
    19e8:	4a 33       	cpi	r20, 0x3A	; 58
    19ea:	18 f0       	brcs	.+6      	; 0x19f2 <__ultoa_invert+0x80>
    19ec:	49 5d       	subi	r20, 0xD9	; 217
    19ee:	31 fd       	sbrc	r19, 1
    19f0:	40 52       	subi	r20, 0x20	; 32
    19f2:	41 93       	st	Z+, r20
    19f4:	02 d0       	rcall	.+4      	; 0x19fa <__ultoa_invert+0x88>
    19f6:	a9 f7       	brne	.-22     	; 0x19e2 <__ultoa_invert+0x70>
    19f8:	ea cf       	rjmp	.-44     	; 0x19ce <__ultoa_invert+0x5c>
    19fa:	b4 e0       	ldi	r27, 0x04	; 4
    19fc:	a6 95       	lsr	r26
    19fe:	97 95       	ror	r25
    1a00:	87 95       	ror	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	ba 95       	dec	r27
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <__ultoa_invert+0x8a>
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	61 05       	cpc	r22, r1
    1a0e:	71 05       	cpc	r23, r1
    1a10:	08 95       	ret
    1a12:	9b 01       	movw	r18, r22
    1a14:	ac 01       	movw	r20, r24
    1a16:	0a 2e       	mov	r0, r26
    1a18:	06 94       	lsr	r0
    1a1a:	57 95       	ror	r21
    1a1c:	47 95       	ror	r20
    1a1e:	37 95       	ror	r19
    1a20:	27 95       	ror	r18
    1a22:	ba 95       	dec	r27
    1a24:	c9 f7       	brne	.-14     	; 0x1a18 <__ultoa_invert+0xa6>
    1a26:	62 0f       	add	r22, r18
    1a28:	73 1f       	adc	r23, r19
    1a2a:	84 1f       	adc	r24, r20
    1a2c:	95 1f       	adc	r25, r21
    1a2e:	a0 1d       	adc	r26, r0
    1a30:	08 95       	ret

00001a32 <_exit>:
    1a32:	f8 94       	cli

00001a34 <__stop_program>:
    1a34:	ff cf       	rjmp	.-2      	; 0x1a34 <__stop_program>
