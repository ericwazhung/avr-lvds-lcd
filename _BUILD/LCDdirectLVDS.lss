
_BUILD/LCDdirectLVDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000084  00800060  00800060  000014ac  2**0
                  ALLOC
  2 .stab         00003f48  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001f59  00000000  00000000  000053f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	63 c2       	rjmp	.+1222   	; 0x4ca <__bad_interrupt>
       4:	62 c2       	rjmp	.+1220   	; 0x4ca <__bad_interrupt>
       6:	61 c2       	rjmp	.+1218   	; 0x4ca <__bad_interrupt>
       8:	60 c2       	rjmp	.+1216   	; 0x4ca <__bad_interrupt>
       a:	5f c2       	rjmp	.+1214   	; 0x4ca <__bad_interrupt>
       c:	5e c2       	rjmp	.+1212   	; 0x4ca <__bad_interrupt>
       e:	5d c2       	rjmp	.+1210   	; 0x4ca <__bad_interrupt>
      10:	5c c2       	rjmp	.+1208   	; 0x4ca <__bad_interrupt>
      12:	5b c2       	rjmp	.+1206   	; 0x4ca <__bad_interrupt>
      14:	5a c2       	rjmp	.+1204   	; 0x4ca <__bad_interrupt>
      16:	59 c2       	rjmp	.+1202   	; 0x4ca <__bad_interrupt>
      18:	58 c2       	rjmp	.+1200   	; 0x4ca <__bad_interrupt>
      1a:	57 c2       	rjmp	.+1198   	; 0x4ca <__bad_interrupt>
      1c:	a9 c7       	rjmp	.+3922   	; 0xf70 <__vector_14>
      1e:	55 c2       	rjmp	.+1194   	; 0x4ca <__bad_interrupt>
      20:	54 c2       	rjmp	.+1192   	; 0x4ca <__bad_interrupt>
      22:	53 c2       	rjmp	.+1190   	; 0x4ca <__bad_interrupt>
      24:	52 c2       	rjmp	.+1188   	; 0x4ca <__bad_interrupt>

00000026 <sineTable>:
      26:	00 00 92 01 24 03 b6 04 48 06 d9 07 6a 09 fb 0a     ....$...H...j...
      36:	8c 0c 1c 0e ab 0f 3a 11 c8 12 55 14 e2 15 6e 17     ......:...U...n.
      46:	f9 18 82 1a 0b 1c 93 1d 1a 1f 9f 20 23 22 a6 23     ........... #".#
      56:	28 25 a8 26 26 28 a3 29 1f 2b 99 2c 11 2e 87 2f     (%.&&(.).+.,.../
      66:	fb 30 6e 32 df 33 4d 35 ba 36 24 38 8c 39 f2 3a     .0n2.3M5.6$8.9.:
      76:	56 3c b8 3d 17 3f 73 40 ce 41 25 43 7a 44 cd 45     V<.=.?s@.A%CzD.E
      86:	1c 47 69 48 b4 49 fb 4a 3f 4c 81 4d bf 4e fb 4f     .GiH.I.J?L.M.N.O
      96:	33 51 68 52 9b 53 c9 54 f5 55 1d 57 42 58 64 59     3QhR.S.T.U.WBXdY
      a6:	82 5a 9c 5b b3 5c c7 5d d7 5e e3 5f eb 60 f0 61     .Z.[.\.].^._.`.a
      b6:	f1 62 ee 63 e8 64 dd 65 cf 66 bc 67 a6 68 8b 69     .b.c.d.e.f.g.h.i
      c6:	6d 6a 4a 6b 23 6c f8 6c c9 6d 96 6e 5e 6f 22 70     mjJk#l.l.m.n^o"p
      d6:	e2 70 9d 71 54 72 07 73 b5 73 5f 74 04 75 a5 75     .p.qTr.s.s_t.u.u
      e6:	41 76 d8 76 6b 77 fa 77 84 78 09 79 89 79 05 7a     Av.vkw.w.x.y.y.z
      f6:	7c 7a ee 7a 5c 7b c5 7b 29 7c 88 7c e3 7c 39 7d     |z.z\{.{)|.|.|9}
     106:	89 7d d5 7d 1d 7e 5f 7e 9c 7e d5 7e 09 7f 37 7f     .}.}.~_~.~.~..7.
     116:	61 7f 86 7f a6 7f c1 7f d8 7f e9 7f f5 7f fd 7f     a...............
     126:	ff 7f                                               ..

00000128 <header>:
     128:	4c 43 44 64 69 72 65 63 74 4c 56 44 53 36 30 20     LCDdirectLVDS60 
     138:	32 30 31 33 2d 31 32 2d 31 35 20 30 36 3a 35 36     2013-12-15 06:56
     148:	3a 31 35 00                                         :15.

0000014c <characters>:
     14c:	00 0c 36 36 0c 00 1c 06 18 06 00 00 00 00 00 60     ..66...........`
     15c:	1e 0c 1e 1e 38 3f 1c 3f 1e 1e 00 00 18 00 06 1e     ....8?.?........
     16c:	3e 0c 3f 3c 3f 7f 7f 3c 33 1e 78 67 0f 63 63 1c     >.?<?..<3.xg.cc.
     17c:	3f 1e 3f 1e 3f 33 33 63 63 33 7f 1e 03 1e 08 00     ?.?.?33cc3......
     18c:	0c 00 07 00 38 00 1c 00 07 0c 18 07 0e 00 00 00     ....8...........
     19c:	00 00 00 00 08 00 00 00 00 00 00 38 18 07 6e 0e     ...........8..n.
     1ac:	00 1e 36 36 3e 63 36 06 0c 0c 66 0c 00 00 00 30     ..66>c6...f....0
     1bc:	33 0f 33 33 3c 03 06 33 33 33 00 00 0c 00 0c 33     3.33<..333.....3
     1cc:	63 1e 66 66 36 46 46 66 33 0c 30 66 06 77 67 36     c.ff6FFf3.0f.wg6
     1dc:	66 33 66 33 2d 33 33 63 63 33 33 06 06 18 1c 00     f3f3-33cc33.....
     1ec:	0c 00 06 00 30 00 36 00 06 00 00 06 0c 00 00 00     ....0.6.........
     1fc:	00 00 00 00 0c 00 00 00 00 00 00 0c 18 0c 3b 13     ..............;.
     20c:	00 1e 36 7f 03 33 1c 03 06 18 3c 0c 00 00 00 18     ..6..3....<.....
     21c:	3b 0c 30 30 36 1f 03 30 33 33 0c 0c 06 3f 18 30     ;.006..033...?.0
     22c:	7b 33 66 03 66 16 16 03 33 0c 30 36 06 7f 6f 63     {3f.f...3.06..oc
     23c:	66 33 66 07 0c 33 33 63 36 33 19 06 0c 18 36 00     f3f..33c63....6.
     24c:	18 1e 3e 1e 30 1e 06 6e 36 0e 1e 66 0c 37 1f 1e     ..>.0..n6..f.7..
     25c:	3b 6e 1b 3e 3e 33 33 63 63 33 3f 0c 18 0c 00 39     ;n.>>33cc3?....9
     26c:	00 0c 00 36 1e 18 6e 00 06 18 ff 3f 00 3f 00 0c     ...6..n....?.?..
     27c:	3f 0c 1c 1c 33 30 1f 18 1e 3e 0c 0c 03 00 30 18     ?...30...>....0.
     28c:	7b 33 3e 03 66 1e 1e 03 3f 0c 30 1e 06 6b 7b 63     {3>.f...?.0..k{c
     29c:	3e 33 3e 1c 0c 33 33 6b 1c 1e 0c 06 18 18 63 00     >3>..33k......c.
     2ac:	00 30 66 33 3e 33 0f 33 6e 0c 18 36 0c 7f 33 33     .0f3>3.3n..6..33
     2bc:	66 33 36 03 0c 33 33 63 36 33 19 07 00 38 00 69     f36..33c63...8.i
     2cc:	00 0c 00 7f 30 0c 3b 00 06 18 3c 0c 00 00 00 06     ....0.;...<.....
     2dc:	37 0c 06 30 7f 30 33 0c 33 30 00 00 06 3f 18 0c     7..0.03.30...?..
     2ec:	7b 3f 66 03 66 16 16 73 33 0c 33 36 46 63 73 63     {?f.f..s3.36Fcsc
     2fc:	06 3b 1e 38 0c 33 33 7f 36 0c 46 06 30 18 00 00     .;.8.33.6.F.0...
     30c:	00 3e 66 03 33 3f 06 33 66 0c 18 1e 0c 6b 33 33     .>f.3?.3f....k33
     31c:	66 33 36 1e 0c 33 33 6b 1c 33 0c 0c 18 0c 00 0e     f36..33k.3......
     32c:	00 00 00 36 1f 66 33 00 0c 0c 66 0c 0e 00 0c 03     ...6.f3...f.....
     33c:	33 0c 33 33 30 33 33 06 33 18 0c 0e 0c 00 0c 00     3.33033.3.......
     34c:	03 33 66 66 36 46 06 66 33 0c 33 66 66 63 63 36     .3ff6F.f3.3ffcc6
     35c:	06 1e 36 33 0c 33 1e 77 63 0c 63 06 60 18 00 00     ..63.3.wc.c.`...
     36c:	00 33 66 33 33 03 06 3e 66 0c 18 36 0c 63 33 33     .3f33..>f..6.c33
     37c:	3e 3e 06 30 2c 33 1e 7f 36 3e 26 0c 18 0c 00 f3     >>.0,3..6>&.....
     38c:	00 0c 00 36 0c 63 6e 00 18 06 00 00 0c 00 0c 01     ...6.cn.........
     39c:	1e 3f 3f 1e 30 1e 1e 06 1e 0e 0c 0c 18 00 06 0c     .??.0...........
     3ac:	1e 33 3f 3c 3f 7f 0f 7c 33 1e 1e 67 7f 63 63 1c     .3?<?..|3..g.cc.
     3bc:	0f 38 67 1e 1e 3f 0c 63 63 1e 7f 1e 40 1e 00 00     .8g..?.cc...@...
     3cc:	00 6e 3d 1e 6e 1e 0f 30 67 1e 1b 67 1e 63 33 1e     .n=.n..0g..g.c3.
     3dc:	06 30 0f 1f 18 6e 0c 36 63 30 3f 38 18 07 00 46     .0...n.6c0?8...F
     3ec:	00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00     ................
     3fc:	00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00     ................
     40c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     41c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
     42c:	00 00 00 00 00 00 00 1f 00 00 0e 00 00 00 00 00     ................
     43c:	0f 78 00 00 00 00 00 00 00 1f 00 00 00 00 00 f4     .x..............

0000044c <__c.1822>:
     44c:	20 54 68 65 20 51 75 69 63 6b 20 42 72 6f 77 6e      The Quick Brown
     45c:	20 46 6f 78 20 4a 75 6d 70 65 64 20 4f 76 65 72      Fox Jumped Over
     46c:	20 54 68 65 20 4c 61 7a 79 20 44 6f 67 21 20 7f      The Lazy Dog! .
     47c:	00                                                  .

0000047d <__c.1838>:
     47d:	45 46 47 65 66 67 00                                EFGefg.

00000484 <__c.1832>:
     484:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf e5       	ldi	r28, 0x5F	; 95
     49a:	d2 e0       	ldi	r29, 0x02	; 2
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61

000004a0 <__do_copy_data>:
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	a0 e6       	ldi	r26, 0x60	; 96
     4a4:	b0 e0       	ldi	r27, 0x00	; 0
     4a6:	e8 e3       	ldi	r30, 0x38	; 56
     4a8:	f4 e1       	ldi	r31, 0x14	; 20
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__do_copy_data+0x10>
     4ac:	05 90       	lpm	r0, Z+
     4ae:	0d 92       	st	X+, r0
     4b0:	a0 36       	cpi	r26, 0x60	; 96
     4b2:	b1 07       	cpc	r27, r17
     4b4:	d9 f7       	brne	.-10     	; 0x4ac <__do_copy_data+0xc>

000004b6 <__do_clear_bss>:
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	a0 e6       	ldi	r26, 0x60	; 96
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <.do_clear_bss_start>

000004be <.do_clear_bss_loop>:
     4be:	1d 92       	st	X+, r1

000004c0 <.do_clear_bss_start>:
     4c0:	a4 3e       	cpi	r26, 0xE4	; 228
     4c2:	b1 07       	cpc	r27, r17
     4c4:	e1 f7       	brne	.-8      	; 0x4be <.do_clear_bss_loop>
     4c6:	75 d3       	rcall	.+1770   	; 0xbb2 <main>
     4c8:	b5 c7       	rjmp	.+3946   	; 0x1434 <_exit>

000004ca <__bad_interrupt>:
     4ca:	9a cd       	rjmp	.-1228   	; 0x0 <__vectors>

000004cc <adc_select>:
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     4cc:	97 b1       	in	r25, 0x07	; 7
     4ce:	8f 71       	andi	r24, 0x1F	; 31
     4d0:	90 7e       	andi	r25, 0xE0	; 224
     4d2:	89 2b       	or	r24, r25
     4d4:	87 b9       	out	0x07, r24	; 7
}
     4d6:	08 95       	ret

000004d8 <adc_startConversion>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     4d8:	86 b1       	in	r24, 0x06	; 6

//Return TRUE on error (if there was a previous conversion in progress...)
uint8_t adc_startConversion(void)
{
	//Check if a conversion is already in progress...
	if(adc_isBusy())
     4da:	80 74       	andi	r24, 0x40	; 64
     4dc:	11 f0       	breq	.+4      	; 0x4e2 <adc_startConversion+0xa>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	08 95       	ret
	// until a conversion is started. Once the conversion starts, the channel and 
	// reference selection is locked to ensure a sufficient sampling time for the ADC."
	
	//"In Single Conversion mode, write this bit to one to start each conversion."
	// BEWARE: calling this will CLEAR the conversion-complete indicator
	setbit(ADSC, ADCSRA);
     4e2:	36 9a       	sbi	0x06, 6	; 6
     4e4:	80 e0       	ldi	r24, 0x00	; 0
	return FALSE;
}
     4e6:	08 95       	ret

000004e8 <adc_init>:
	// (i.e. a 3.3V voltage regulator output)
	//Technically, these values are reset-defaults, but just make sure
	//!!!According to attiny861, these values set VCC as the voltage ref
	//   NOT an external reference. So the above note seems odd...
	// This IS what I want on the Tiny861 threePinIDer...
	clrbit(REFS0, ADMUX);
     4e8:	3e 98       	cbi	0x07, 6	; 7
	clrbit(REFS1, ADMUX);
     4ea:	3f 98       	cbi	0x07, 7	; 7
	
	//Use right-adjusted output
	// so values read from the 2-byte register are:
	//	8-bits in the Low reg, and 2 in the High reg
	clrbit(ADLAR, ADMUX);
     4ec:	3d 98       	cbi	0x07, 5	; 7

	//Enable the ADC
	// (see description for noise cancelling techniques)
	setbit(ADEN, ADCSRA);
     4ee:	37 9a       	sbi	0x06, 7	; 6
	
	//Don't use Auto Triggering
	// (@@@ could use a timer, etc.)
	clrbit(ADATE, ADCSRA);
     4f0:	35 98       	cbi	0x06, 5	; 6
	// "ADIF is cleared by writing a logical one to the flag."
	// " BEWARE that if doing a Read-Modify-Write on ADCSRA, a pending interrupt can be disabled. "
	//   because the flag may be 1 when read, and re-writing 1 clears it.
	//   ???could get around this by using a special set/clrbit instruction which would always write 0
	//   to this bit...
	setbit(ADIF, ADCSRA);
     4f2:	34 9a       	sbi	0x06, 4	; 6
	
	//make sure the interrupt is not enabled...
	clrbit(ADIE, ADCSRA);
     4f4:	33 98       	cbi	0x06, 3	; 6
}

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     4f6:	86 b1       	in	r24, 0x06	; 6
     4f8:	87 60       	ori	r24, 0x07	; 7
     4fa:	86 b9       	out	0x06, r24	; 6
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     4fc:	87 b1       	in	r24, 0x07	; 7
     4fe:	8f 61       	ori	r24, 0x1F	; 31
     500:	87 b9       	out	0x07, r24	; 7
	//Start a conversion so it will be initialized for the next...
	//"The first conversion after ADSC has been written 
	// after the ADC has been enabled ... 
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();
     502:	ea df       	rcall	.-44     	; 0x4d8 <adc_startConversion>
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     504:	86 b1       	in	r24, 0x06	; 6
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();

	//Wait for the initialization to complete for lockstepping...
	while(adc_isBusy())
     506:	80 74       	andi	r24, 0x40	; 64
     508:	e9 f7       	brne	.-6      	; 0x504 <adc_init+0x1c>
	{}
}
     50a:	08 95       	ret

0000050c <adc_getValue>:
//Return the last value read by the ADC
// check if adc_isBusy is true before reading, in lockstep...
// Since ADLAR is cleared, it will be the low ten bits 
uint16_t adc_getValue(void)
{
	return ADC;
     50c:	24 b1       	in	r18, 0x04	; 4
     50e:	35 b1       	in	r19, 0x05	; 5
	//reading both values takes longer and some other things mentioned in the manual
	// (i.e. it might be more efficient to only read one byte if acceptable)
	// unless only reading ADCH: "ADCL must be read first, then ADCH"
	//!!! Might want to verify this occurs properly in the assembly code
	
}
     510:	c9 01       	movw	r24, r18
     512:	08 95       	ret

00000514 <adc_isBusy>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     514:	86 b1       	in	r24, 0x06	; 6
     516:	82 95       	swap	r24
     518:	86 95       	lsr	r24
     51a:	86 95       	lsr	r24
}
     51c:	81 70       	andi	r24, 0x01	; 1
     51e:	08 95       	ret

00000520 <adc_setPrescaler>:

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     520:	96 b1       	in	r25, 0x06	; 6
     522:	87 70       	andi	r24, 0x07	; 7
     524:	98 7f       	andi	r25, 0xF8	; 248
     526:	89 2b       	or	r24, r25
     528:	86 b9       	out	0x06, r24	; 6
}
     52a:	08 95       	ret

0000052c <adc_takeInput>:
	uint8_t bitNum = inputNum;

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
     52c:	83 30       	cpi	r24, 0x03	; 3
     52e:	80 f0       	brcs	.+32     	; 0x550 <adc_takeInput+0x24>

	//Analog inputs 7-10 are selected in DIDR1 and shifted...
	// 7 is bit 4, 10 is bit 7...
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
     530:	87 30       	cpi	r24, 0x07	; 7
     532:	10 f4       	brcc	.+4      	; 0x538 <adc_takeInput+0xc>

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
		bitNum = inputNum + 1;
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	0c c0       	rjmp	.+24     	; 0x550 <adc_takeInput+0x24>
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
	{
		bitNum = inputNum - 3;
		setbit(bitNum, DIDR1);
     538:	92 b1       	in	r25, 0x02	; 2
     53a:	83 50       	subi	r24, 0x03	; 3
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <adc_takeInput+0x1a>
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	8a 95       	dec	r24
     548:	e2 f7       	brpl	.-8      	; 0x542 <adc_takeInput+0x16>
     54a:	92 2b       	or	r25, r18
     54c:	92 b9       	out	0x02, r25	; 2
		return;
     54e:	08 95       	ret
	}
#endif

	if(bitNum <= 7)
		setbit(bitNum, DIDR0);
     550:	91 b1       	in	r25, 0x01	; 1
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <adc_takeInput+0x30>
     558:	22 0f       	add	r18, r18
     55a:	33 1f       	adc	r19, r19
     55c:	8a 95       	dec	r24
     55e:	e2 f7       	brpl	.-8      	; 0x558 <adc_takeInput+0x2c>
     560:	92 2b       	or	r25, r18
     562:	91 b9       	out	0x01, r25	; 1
     564:	08 95       	ret

00000566 <timer_selectDivisor>:
	uint8_t csbits;
	
  #if defined(CSOBS)
	if(timerNum == 0 || timerNum == 1 || timerNum == 3)//IS_CSTYP(timerNum) || IS_CSOBS(timerNum))
  #else
	if(IS_CSTYP(timerNum))
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	28 f5       	brcc	.+74     	; 0x5b4 <timer_selectDivisor+0x4e>
  #endif
	{
		switch(clockDiv)
     56a:	66 30       	cpi	r22, 0x06	; 6
     56c:	81 f0       	breq	.+32     	; 0x58e <timer_selectDivisor+0x28>
     56e:	67 30       	cpi	r22, 0x07	; 7
     570:	28 f4       	brcc	.+10     	; 0x57c <timer_selectDivisor+0x16>
     572:	66 23       	and	r22, r22
     574:	51 f0       	breq	.+20     	; 0x58a <timer_selectDivisor+0x24>
     576:	63 30       	cpi	r22, 0x03	; 3
     578:	e9 f4       	brne	.+58     	; 0x5b4 <timer_selectDivisor+0x4e>
     57a:	05 c0       	rjmp	.+10     	; 0x586 <timer_selectDivisor+0x20>
     57c:	68 30       	cpi	r22, 0x08	; 8
     57e:	49 f0       	breq	.+18     	; 0x592 <timer_selectDivisor+0x2c>
     580:	6a 30       	cpi	r22, 0x0A	; 10
     582:	c1 f4       	brne	.+48     	; 0x5b4 <timer_selectDivisor+0x4e>
     584:	08 c0       	rjmp	.+16     	; 0x596 <timer_selectDivisor+0x30>
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	07 c0       	rjmp	.+14     	; 0x598 <timer_selectDivisor+0x32>
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	05 c0       	rjmp	.+10     	; 0x598 <timer_selectDivisor+0x32>
     58e:	93 e0       	ldi	r25, 0x03	; 3
			case CLKDIV8:
				csbits = CSTYP_DIV8;
				break;
			case CLKDIV64:
				csbits = CSTYP_DIV64;	
				break;
     590:	03 c0       	rjmp	.+6      	; 0x598 <timer_selectDivisor+0x32>
     592:	94 e0       	ldi	r25, 0x04	; 4
			case CLKDIV256:
				csbits = CSTYP_DIV256;	
				break;
     594:	01 c0       	rjmp	.+2      	; 0x598 <timer_selectDivisor+0x32>
     596:	95 e0       	ldi	r25, 0x05	; 5
     598:	97 70       	andi	r25, 0x07	; 7
	}
  #endif
	else 
		return 1;	

	switch(timerNum)
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	29 f0       	breq	.+10     	; 0x5a8 <timer_selectDivisor+0x42>
	{
		//Assume Timer0 and Timer1 exist (see setWGM)
		case 0:
			writeMasked(csbits, CSMASK, T0_CSReg);
     59e:	83 b7       	in	r24, 0x33	; 51
     5a0:	88 7f       	andi	r24, 0xF8	; 248
     5a2:	89 2b       	or	r24, r25
     5a4:	83 bf       	out	0x33, r24	; 51
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <timer_selectDivisor+0x4a>
			break;
		case 1:
			writeMasked(csbits, CSMASK, T1_CSReg);
     5a8:	8f b5       	in	r24, 0x2f	; 47
     5aa:	88 7f       	andi	r24, 0xF8	; 248
     5ac:	89 2b       	or	r24, r25
     5ae:	8f bd       	out	0x2f, r24	; 47
     5b0:	80 e0       	ldi	r24, 0x00	; 0
			break;
     5b2:	08 95       	ret
     5b4:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     5b6:	08 95       	ret

000005b8 <timer_setWGM>:
//	wgmLb *= 0xff;
//	wgmHb *= 0xff;

	//Make sure the chosen WGM will be written to the WGM bits properly, as implemented below...
	// Only modes 0-3 are implemented...
	if(wgm > 0x03)
     5b8:	64 30       	cpi	r22, 0x04	; 4
     5ba:	f0 f4       	brcc	.+60     	; 0x5f8 <timer_setWGM+0x40>
		return 1;
	
	switch(timerNum)
     5bc:	88 23       	and	r24, r24
     5be:	19 f0       	breq	.+6      	; 0x5c6 <timer_setWGM+0xe>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	d1 f4       	brne	.+52     	; 0x5f8 <timer_setWGM+0x40>
     5c4:	0a c0       	rjmp	.+20     	; 0x5da <timer_setWGM+0x22>
#ifdef _AVR_IOTNx61_H_
			//TinyX61s' Timer0 is an exception...
			// It only has WGM00, which serves the same functionality as
			// most others' WGM01 (when their WGM00 == 0)
			// (No PWM)
			if(wgmLb)
     5c6:	86 2f       	mov	r24, r22
     5c8:	81 70       	andi	r24, 0x01	; 1
     5ca:	b1 f4       	brne	.+44     	; 0x5f8 <timer_setWGM+0x40>
				return 1;

			//Whatever .stab is, this single change reduces it by 36Bytes
			writebit(WGM00, T0_WGMReg, wgmHb);
     5cc:	62 70       	andi	r22, 0x02	; 2
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <timer_setWGM+0x1c>
     5d0:	a8 9a       	sbi	0x15, 0	; 21
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <timer_setWGM+0x1e>
     5d4:	a8 98       	cbi	0x15, 0	; 21
     5d6:	85 b3       	in	r24, 0x15	; 21
     5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <timer_setWGM+0x3c>
     5da:	61 30       	cpi	r22, 0x01	; 1
     5dc:	19 f4       	brne	.+6      	; 0x5e4 <timer_setWGM+0x2c>
					wgmHb = 0;
					break;
			}

			//NOTE: TinyX61s' WGM bits are both in TCCR1D (very unusual)
			writebit(WGM10, TCCR1D, wgmLb);
     5de:	86 b5       	in	r24, 0x26	; 38
     5e0:	81 60       	ori	r24, 0x01	; 1
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <timer_setWGM+0x30>
     5e4:	86 b5       	in	r24, 0x26	; 38
     5e6:	8e 7f       	andi	r24, 0xFE	; 254
     5e8:	86 bd       	out	0x26, r24	; 38
     5ea:	86 b5       	in	r24, 0x26	; 38
			writebit(WGM11, TCCR1D, wgmHb);
     5ec:	86 b5       	in	r24, 0x26	; 38
     5ee:	8d 7f       	andi	r24, 0xFD	; 253
     5f0:	86 bd       	out	0x26, r24	; 38
     5f2:	86 b5       	in	r24, 0x26	; 38
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret
     5f8:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     5fa:	08 95       	ret

000005fc <timer_init>:

//Roughly equivalent to the ol' Init_timerX(clkDiv, wgm)
//Return 0 if no error...
#if (!defined(TIMER_INIT_UNUSED) || !TIMER_INIT_UNUSED)
uint8_t timer_init(uint8_t timerNum, uint8_t clockDiv, uint8_t wgm)
{
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	18 2f       	mov	r17, r24
     602:	06 2f       	mov	r16, r22
	//set the waveform mode
	ERR_HANDLE_NUM(1,				\
     604:	64 2f       	mov	r22, r20
     606:	d8 df       	rcall	.-80     	; 0x5b8 <timer_setWGM>
     608:	88 23       	and	r24, r24
     60a:	11 f0       	breq	.+4      	; 0x610 <timer_init+0x14>
     60c:	80 61       	ori	r24, 0x10	; 16
     60e:	05 c0       	rjmp	.+10     	; 0x61a <timer_init+0x1e>
		timer_setWGM(timerNum, wgm)	);

	//select the clock
	ERR_HANDLE_NUM(2,							\
     610:	81 2f       	mov	r24, r17
     612:	60 2f       	mov	r22, r16
     614:	a8 df       	rcall	.-176    	; 0x566 <timer_selectDivisor>
     616:	81 11       	cpse	r24, r1
     618:	80 62       	ori	r24, 0x20	; 32
		timer_selectDivisor(timerNum, clockDiv)	);
		
	return 0;
}
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	08 95       	ret

00000620 <timer_compareMatchIntSetup>:
uint8_t timer_compareMatchIntSetup(uint8_t timerNum, uint8_t outputChannel,\
	  												uint8_t enable)
{
	uint8_t channelNum;

	if(timerNum >= MAXTIMERS)
     620:	84 30       	cpi	r24, 0x04	; 4
     622:	10 f0       	brcs	.+4      	; 0x628 <timer_compareMatchIntSetup+0x8>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret
		return 1;

	if(outputChannel >= 2) //MAXCHANNELSPERTIMER)
     628:	62 30       	cpi	r22, 0x02	; 2
     62a:	10 f0       	brcs	.+4      	; 0x630 <timer_compareMatchIntSetup+0x10>
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	08 95       	ret
     630:	44 23       	and	r20, r20
     632:	11 f0       	breq	.+4      	; 0x638 <timer_compareMatchIntSetup+0x18>
     634:	41 e0       	ldi	r20, 0x01	; 1
	channelNum = (timerNum<<4) + outputChannel;

	//Don't clear interrupts before disabling this one, or that defeats the purpose!
	// But do clear so we don't get unexpected overflows on init
	if(enable)
		cli();
     636:	f8 94       	cli
	
	switch(channelNum)
     638:	82 95       	swap	r24
     63a:	80 7f       	andi	r24, 0xF0	; 240
     63c:	86 0f       	add	r24, r22
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	a1 f0       	breq	.+40     	; 0x66a <timer_compareMatchIntSetup+0x4a>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	30 f0       	brcs	.+12     	; 0x652 <timer_compareMatchIntSetup+0x32>
     646:	80 31       	cpi	r24, 0x10	; 16
     648:	e1 f0       	breq	.+56     	; 0x682 <timer_compareMatchIntSetup+0x62>
     64a:	81 31       	cpi	r24, 0x11	; 17
     64c:	31 f1       	breq	.+76     	; 0x69a <timer_compareMatchIntSetup+0x7a>
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	08 95       	ret
			break;
	   #endif
	   #if defined(OCIE0A)
		case 0x00:
//			setbit(OCIE0A, T0_TIMSK);
			writebit(OCIE0A, T0_TIMSK, enable);
     652:	44 23       	and	r20, r20
     654:	19 f0       	breq	.+6      	; 0x65c <timer_compareMatchIntSetup+0x3c>
     656:	89 b7       	in	r24, 0x39	; 57
     658:	80 61       	ori	r24, 0x10	; 16
     65a:	02 c0       	rjmp	.+4      	; 0x660 <timer_compareMatchIntSetup+0x40>
     65c:	89 b7       	in	r24, 0x39	; 57
     65e:	8f 7e       	andi	r24, 0xEF	; 239
     660:	89 bf       	out	0x39, r24	; 57
     662:	89 b7       	in	r24, 0x39	; 57
			// My OCD bit me in the ass, this was set to TIMSK by mistake(?)
			setbit(OCF0A, T0_TIFR);
     664:	88 b7       	in	r24, 0x38	; 56
     666:	80 61       	ori	r24, 0x10	; 16
     668:	23 c0       	rjmp	.+70     	; 0x6b0 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE0B)
		case 0x01:
//			setbit(OCIE0B, T0_TIMSK);
			writebit(OCIE0B, T0_TIMSK, enable);
     66a:	44 23       	and	r20, r20
     66c:	19 f0       	breq	.+6      	; 0x674 <timer_compareMatchIntSetup+0x54>
     66e:	89 b7       	in	r24, 0x39	; 57
     670:	88 60       	ori	r24, 0x08	; 8
     672:	02 c0       	rjmp	.+4      	; 0x678 <timer_compareMatchIntSetup+0x58>
     674:	89 b7       	in	r24, 0x39	; 57
     676:	87 7f       	andi	r24, 0xF7	; 247
     678:	89 bf       	out	0x39, r24	; 57
     67a:	89 b7       	in	r24, 0x39	; 57
			// As was this...
			setbit(OCF0B, T0_TIFR);
     67c:	88 b7       	in	r24, 0x38	; 56
     67e:	88 60       	ori	r24, 0x08	; 8
     680:	17 c0       	rjmp	.+46     	; 0x6b0 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1A)
		case 0x10:
//			setbit(OCIE1A, T1_TIMSK);
			writebit(OCIE1A, T1_TIMSK, enable);
     682:	44 23       	and	r20, r20
     684:	19 f0       	breq	.+6      	; 0x68c <timer_compareMatchIntSetup+0x6c>
     686:	89 b7       	in	r24, 0x39	; 57
     688:	80 64       	ori	r24, 0x40	; 64
     68a:	02 c0       	rjmp	.+4      	; 0x690 <timer_compareMatchIntSetup+0x70>
     68c:	89 b7       	in	r24, 0x39	; 57
     68e:	8f 7b       	andi	r24, 0xBF	; 191
     690:	89 bf       	out	0x39, r24	; 57
     692:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1A, T1_TIFR);
     694:	88 b7       	in	r24, 0x38	; 56
     696:	80 64       	ori	r24, 0x40	; 64
     698:	0b c0       	rjmp	.+22     	; 0x6b0 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1B)
		case 0x11:
//			setbit(OCIE1B, T1_TIMSK);
			writebit(OCIE1B, T1_TIMSK, enable);
     69a:	44 23       	and	r20, r20
     69c:	19 f0       	breq	.+6      	; 0x6a4 <timer_compareMatchIntSetup+0x84>
     69e:	89 b7       	in	r24, 0x39	; 57
     6a0:	80 62       	ori	r24, 0x20	; 32
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <timer_compareMatchIntSetup+0x88>
     6a4:	89 b7       	in	r24, 0x39	; 57
     6a6:	8f 7d       	andi	r24, 0xDF	; 223
     6a8:	89 bf       	out	0x39, r24	; 57
     6aa:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1B, T1_TIFR);
     6ac:	88 b7       	in	r24, 0x38	; 56
     6ae:	80 62       	ori	r24, 0x20	; 32
     6b0:	88 bf       	out	0x38, r24	; 56
			break;
	}
	
	//Don't reenable interrupts here if disabling... just leave them as they were....
	// but do enable for init...
	if(enable)
     6b2:	44 23       	and	r20, r20
     6b4:	11 f4       	brne	.+4      	; 0x6ba <timer_compareMatchIntSetup+0x9a>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	08 95       	ret
		sei();
     6ba:	78 94       	sei
     6bc:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     6be:	08 95       	ret

000006c0 <hfm_setup>:

//Mainly just for setting up the maxPower (divisor)
// [can] use hfm_setPower otherwise...
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
     6c0:	fc 01       	movw	r30, r24
	modulator->maxPower = maxPower;
     6c2:	44 83       	std	Z+4, r20	; 0x04
{
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     6c4:	84 81       	ldd	r24, Z+4	; 0x04
     6c6:	86 17       	cp	r24, r22
     6c8:	10 f0       	brcs	.+4      	; 0x6ce <hfm_setup+0xe>
		modulator->power = power;
     6ca:	65 83       	std	Z+5, r22	; 0x05
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <hfm_setup+0x12>
	else
		modulator->power = modulator->maxPower;
     6ce:	84 81       	ldd	r24, Z+4	; 0x04
     6d0:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     6d2:	11 82       	std	Z+1, r1	; 0x01
     6d4:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     6d6:	13 82       	std	Z+3, r1	; 0x03
     6d8:	12 82       	std	Z+2, r1	; 0x02
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
	modulator->maxPower = maxPower;
	hfm_setPower(modulator, power);
}
     6da:	08 95       	ret

000006dc <hfm_setPower>:
// This needs to be set, initially! 
//   either init it in the hfm variable declaration
//   or use hfm_setup (ideal)
// however, sometimes it needs to be variable, thus hfm_setup (above)
void hfm_setPower(hfm_t	*modulator, uint8_t power)
{
     6dc:	fc 01       	movw	r30, r24
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     6de:	84 81       	ldd	r24, Z+4	; 0x04
     6e0:	86 17       	cp	r24, r22
     6e2:	10 f0       	brcs	.+4      	; 0x6e8 <hfm_setPower+0xc>
		modulator->power = power;
     6e4:	65 83       	std	Z+5, r22	; 0x05
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <hfm_setPower+0x10>
	else
		modulator->power = modulator->maxPower;
     6e8:	84 81       	ldd	r24, Z+4	; 0x04
     6ea:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     6ec:	11 82       	std	Z+1, r1	; 0x01
     6ee:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     6f0:	13 82       	std	Z+3, r1	; 0x03
     6f2:	12 82       	std	Z+2, r1	; 0x02
}
     6f4:	08 95       	ret

000006f6 <hfm_nextOutput>:

//Returns 0 if the "output" should be "off" in this cycle
//		  1 if the "output" should be "on"  in this cycle
uint8_t hfm_nextOutput(hfm_t *modulator)
{
     6f6:	fc 01       	movw	r30, r24
	//Instead of dividing the average by the stepNumber (slow!),
	//just add the current to the avg and add desired to itself and compare the two
	
	
	//The first time, this will be == desired*1... (and runningSum will be zero)
	(modulator->desiredSum) += (modulator->power);
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	25 81       	ldd	r18, Z+5	; 0x05
     6fe:	82 0f       	add	r24, r18
     700:	91 1d       	adc	r25, r1
     702:	93 83       	std	Z+3, r25	; 0x03
     704:	82 83       	std	Z+2, r24	; 0x02
	
	// IF desired == 255, we want it never to clr...
	//		but running will be 0 the first time
	//		and we'll therefore if... set == good
	//		and later we'll runningSum == desiredSum (above) and reset and if again
	if(modulator->desiredSum > modulator->runningSum)
     706:	22 81       	ldd	r18, Z+2	; 0x02
     708:	33 81       	ldd	r19, Z+3	; 0x03
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	82 17       	cp	r24, r18
     710:	93 07       	cpc	r25, r19
     712:	10 f0       	brcs	.+4      	; 0x718 <hfm_nextOutput+0x22>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	08 c0       	rjmp	.+16     	; 0x728 <hfm_nextOutput+0x32>
	{
		(modulator->runningSum) += (modulator->maxPower); //0xff;
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	24 81       	ldd	r18, Z+4	; 0x04
     71e:	82 0f       	add	r24, r18
     720:	91 1d       	adc	r25, r1
     722:	91 83       	std	Z+1, r25	; 0x01
     724:	80 83       	st	Z, r24
     726:	81 e0       	ldi	r24, 0x01	; 1
	}
	
//	(modulator->stepNumber)++;
	
	//Restart the cycle if the output average = the desired
	if(modulator->runningSum == modulator->desiredSum)
     728:	40 81       	ld	r20, Z
     72a:	51 81       	ldd	r21, Z+1	; 0x01
     72c:	22 81       	ldd	r18, Z+2	; 0x02
     72e:	33 81       	ldd	r19, Z+3	; 0x03
     730:	42 17       	cp	r20, r18
     732:	53 07       	cpc	r21, r19
     734:	21 f4       	brne	.+8      	; 0x73e <hfm_nextOutput+0x48>
	{
		//Handled below...
//		modulator->stepNumber = 0;
		modulator->runningSum = 0;
     736:	11 82       	std	Z+1, r1	; 0x01
     738:	10 82       	st	Z, r1
		modulator->desiredSum = 0;
     73a:	13 82       	std	Z+3, r1	; 0x03
     73c:	12 82       	std	Z+2, r1	; 0x02
	}
	
	return toReturn;
}
     73e:	08 95       	ret

00000740 <sineRaw>:
//   rollover/wraparound should work fine... (e.g. Sine(coord_t))
//output is a value between -INT32_MAX and INT32_MAX (representing sin values -1 to 1)
sine_t sineRaw(theta_t theta)
{
//	theta %= 512;
	theta %= SINE_2PI;
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	72 e0       	ldi	r23, 0x02	; 2
     744:	7e d5       	rcall	.+2812   	; 0x1242 <__divmodhi4>

	if(theta < 0)
     746:	97 ff       	sbrs	r25, 7
     748:	02 c0       	rjmp	.+4      	; 0x74e <sineRaw+0xe>
		theta = SINE_2PI + theta;
     74a:	80 50       	subi	r24, 0x00	; 0
     74c:	9e 4f       	sbci	r25, 0xFE	; 254

//For more accurate realtimeishness, it might be worthwhile to reverse this order...
	
	//in the first quadrant, just take the sine value from the table
	if(theta < SINE_SIZE-1) //128)
     74e:	80 38       	cpi	r24, 0x80	; 128
     750:	91 05       	cpc	r25, r1
     752:	44 f4       	brge	.+16     	; 0x764 <sineRaw+0x24>
		return pgm_read_sine(sineTable[theta]);
     754:	fc 01       	movw	r30, r24
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	ea 5d       	subi	r30, 0xDA	; 218
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	25 91       	lpm	r18, Z+
     760:	34 91       	lpm	r19, Z
     762:	29 c0       	rjmp	.+82     	; 0x7b6 <sineRaw+0x76>
	//in the second quadrant, mirror theta and subtract the offset
	else if(theta < SINE_SIZE2) //256)
     764:	8f 3f       	cpi	r24, 0xFF	; 255
     766:	91 05       	cpc	r25, r1
     768:	09 f0       	breq	.+2      	; 0x76c <sineRaw+0x2c>
     76a:	5c f4       	brge	.+22     	; 0x782 <sineRaw+0x42>
		return pgm_read_sine(sineTable[SINE_SIZE2-theta]); //256-theta]);
     76c:	e0 e0       	ldi	r30, 0x00	; 0
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	e8 1b       	sub	r30, r24
     772:	f9 0b       	sbc	r31, r25
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	ea 5d       	subi	r30, 0xDA	; 218
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	25 91       	lpm	r18, Z+
     77e:	34 91       	lpm	r19, Z
     780:	1a c0       	rjmp	.+52     	; 0x7b6 <sineRaw+0x76>
	//in the third quadrant, mirror the value and subtract the offset
	else if(theta < SINE_SIZE3) //384)
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	80 38       	cpi	r24, 0x80	; 128
     786:	92 07       	cpc	r25, r18
     788:	44 f4       	brge	.+16     	; 0x79a <sineRaw+0x5a>
		return -(sine_t)pgm_read_sine(sineTable[theta-SINE_SIZE2]); //256]);
     78a:	fc 01       	movw	r30, r24
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	ea 5d       	subi	r30, 0xDA	; 218
     792:	f1 40       	sbci	r31, 0x01	; 1
     794:	85 91       	lpm	r24, Z+
     796:	94 91       	lpm	r25, Z
     798:	0a c0       	rjmp	.+20     	; 0x7ae <sineRaw+0x6e>
	//in the fourth quadrant, mirror both theta and the value and subtract the offset...
	else
		return -(sine_t)pgm_read_sine(sineTable[SINE_SIZE4-theta]); //512-theta]);
     79a:	e0 e0       	ldi	r30, 0x00	; 0
     79c:	f2 e0       	ldi	r31, 0x02	; 2
     79e:	e8 1b       	sub	r30, r24
     7a0:	f9 0b       	sbc	r31, r25
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	ea 5d       	subi	r30, 0xDA	; 218
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	85 91       	lpm	r24, Z+
     7ac:	94 91       	lpm	r25, Z
     7ae:	22 27       	eor	r18, r18
     7b0:	33 27       	eor	r19, r19
     7b2:	28 1b       	sub	r18, r24
     7b4:	39 0b       	sbc	r19, r25
}
     7b6:	c9 01       	movw	r24, r18
     7b8:	08 95       	ret

000007ba <sineRaw8>:


#if ( defined(SINE_RAW8) && SINE_RAW8 )
int8_t sineRaw8(theta_t theta)
{
	theta %= SINE_2PI;
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	72 e0       	ldi	r23, 0x02	; 2
     7be:	41 d5       	rcall	.+2690   	; 0x1242 <__divmodhi4>
     7c0:	9c 01       	movw	r18, r24

	if(theta < 0)
     7c2:	37 ff       	sbrs	r19, 7
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <sineRaw8+0x10>
		theta = SINE_2PI + theta;
     7c6:	20 50       	subi	r18, 0x00	; 0
     7c8:	3e 4f       	sbci	r19, 0xFE	; 254

	if(theta < SINE_SIZE-1)
     7ca:	20 38       	cpi	r18, 0x80	; 128
     7cc:	31 05       	cpc	r19, r1
     7ce:	3c f4       	brge	.+14     	; 0x7de <sineRaw8+0x24>
		return pgm_read_sine8(sineTable[theta]);
     7d0:	f9 01       	movw	r30, r18
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e9 5d       	subi	r30, 0xD9	; 217
     7d8:	ff 4f       	sbci	r31, 0xFF	; 255
     7da:	84 91       	lpm	r24, Z
     7dc:	08 95       	ret
   else if(theta < SINE_SIZE2) //256)
     7de:	2f 3f       	cpi	r18, 0xFF	; 255
     7e0:	31 05       	cpc	r19, r1
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <sineRaw8+0x2c>
     7e4:	54 f4       	brge	.+20     	; 0x7fa <sineRaw8+0x40>
		return pgm_read_sine8(sineTable[SINE_SIZE2-theta]); //256-theta]);
     7e6:	e0 e0       	ldi	r30, 0x00	; 0
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	e2 1b       	sub	r30, r18
     7ec:	f3 0b       	sbc	r31, r19
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e9 5d       	subi	r30, 0xD9	; 217
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	84 91       	lpm	r24, Z
     7f8:	08 95       	ret
	else if(theta < SINE_SIZE3) //384)
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	20 38       	cpi	r18, 0x80	; 128
     7fe:	38 07       	cpc	r19, r24
     800:	44 f4       	brge	.+16     	; 0x812 <sineRaw8+0x58>
		return -(int8_t)pgm_read_sine8(sineTable[theta-SINE_SIZE2]); //256]);
     802:	f9 01       	movw	r30, r18
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	e9 5d       	subi	r30, 0xD9	; 217
     80a:	f1 40       	sbci	r31, 0x01	; 1
     80c:	84 91       	lpm	r24, Z
     80e:	81 95       	neg	r24
     810:	08 95       	ret
	else
	   return -(int8_t)pgm_read_sine8(sineTable[SINE_SIZE4-theta]); 
     812:	e0 e0       	ldi	r30, 0x00	; 0
     814:	f2 e0       	ldi	r31, 0x02	; 2
     816:	e2 1b       	sub	r30, r18
     818:	f3 0b       	sbc	r31, r19
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	e9 5d       	subi	r30, 0xD9	; 217
     820:	ff 4f       	sbci	r31, 0xFF	; 255
     822:	84 91       	lpm	r24, Z
     824:	81 95       	neg	r24

}
     826:	08 95       	ret

00000828 <pll_enable>:
   // this is 64MHz/512=125kHz
   // The benefit of such high PWM frequency is the low RC values necessary
   //  for filtering to DC.
   // "To change Timer/Counter1 to the async mode follow this procedure"
   // 1: Enable the PLL
   setbit(PLLE, PLLCSR);
     828:	89 b5       	in	r24, 0x29	; 41
     82a:	82 60       	ori	r24, 0x02	; 2
     82c:	89 bd       	out	0x29, r24	; 41
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     82e:	88 ec       	ldi	r24, 0xC8	; 200
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <pll_enable+0xa>
     836:	01 c0       	rjmp	.+2      	; 0x83a <pll_enable+0x12>
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
   {
      asm("nop");
     838:	00 00       	nop
   // 2: Wait 100us for the PLL to stabilize
   // (can't use dmsWait since the timer updating the dmsCount hasn't yet been started!)
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
     83a:	09 b4       	in	r0, 0x29	; 41
     83c:	00 fe       	sbrs	r0, 0
     83e:	fc cf       	rjmp	.-8      	; 0x838 <pll_enable+0x10>
   {
      asm("nop");
   }
   // 4: Set the PCKE bit to enable async mode
   setbit(PCKE, PLLCSR);
     840:	89 b5       	in	r24, 0x29	; 41
     842:	84 60       	ori	r24, 0x04	; 4
     844:	89 bd       	out	0x29, r24	; 41

}
     846:	08 95       	ret

00000848 <lvds_timerInit>:
   //Timer1 is used for LVDS (in PLL clocking mode)
  
     //pll_enable();   
   
   //We want it to count 7 bits, 0-6 and reset at 7
   OCR1C = 6;
     848:	86 e0       	ldi	r24, 0x06	; 6
     84a:	8b bd       	out	0x2b, r24	; 43

   //We want the clock to go low at TCNT=0 and high at TCNT=4
   CLOCK_OCR = 3; //2; //3;
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	8c bd       	out	0x2c, r24	; 44
   //PLL is 4MHz*8 = 32MHz
   // then TimerClockDivisor=8 gives 4MHz
   pll_enable();
   #define SLOW_LVDS_TEST TRUE
#elif (defined(OSCCAL_VAL))
   OSCCAL = OSCCAL_VAL;
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	81 bf       	out	0x31, r24	; 49
   //  (horizontally... pre LVDS_PRESCALER affecting DOTS_TO_CYC)
   //  so accessing *all* pixels in a row would make it even slower...
   // Further, it didn't seem to be paying attention to the fact that
   // the same pixels are drawn on multiple rows...
   // WTF? (the image was scaled, proportionately! 1pix x 1pix)
   pll_enable();
     854:	e9 df       	rcall	.-46     	; 0x828 <pll_enable>
   pll_enable();
   //#warning "The PLL configuration code is not in here yet!"
#endif

   //Set the Timer1 clock prescaler...
   writeMasked(CSBITS, 
     856:	8f b5       	in	r24, 0x2f	; 47
     858:	80 7f       	andi	r24, 0xF0	; 240
     85a:	84 60       	ori	r24, 0x04	; 4
     85c:	8f bd       	out	0x2f, r24	; 47
               TCCR1B);

   //Set the DeadTime prescaler (no prescaling, same speed as TCNT1)...
   // Allegedly this is prescaled from the PCK (or CK)
   //    NOT from the Timer1 prescaler...
   writeMasked(DTPSBITS,
     85e:	8f b5       	in	r24, 0x2f	; 47
     860:	80 63       	ori	r24, 0x30	; 48
     862:	8f bd       	out	0x2f, r24	; 47
 
   //FastPWM
//Now Handled in lvds_xxxOnCompare():

   //These are also written below (excluding PWM1D)
   setbit(PWM1A, TCCR1A);  //Enable PWM on OC1A for DVH
     864:	80 b7       	in	r24, 0x30	; 48
     866:	82 60       	ori	r24, 0x02	; 2
     868:	80 bf       	out	0x30, r24	; 48
                           //Need to do the same for other channels
  
   setbit(PWM1B, TCCR1A);  //Enable PWM on OC1B for CLOCK 
     86a:	80 b7       	in	r24, 0x30	; 48
     86c:	81 60       	ori	r24, 0x01	; 1
     86e:	80 bf       	out	0x30, r24	; 48

   setbit(PWM1D, TCCR1C);
     870:	87 b5       	in	r24, 0x27	; 39
     872:	81 60       	ori	r24, 0x01	; 1
     874:	87 bd       	out	0x27, r24	; 39

   //PWM1D is not in TCCR1A...

   setoutPORT(PB1, PORTB);   //+OC1A, DVH/BLUE, MISO (usually heart)
     876:	b9 9a       	sbi	0x17, 1	; 23
//   setoutPORT(PB0, PORTB);   //-OC1A    MOSI unused
   setoutPORT(PB2, PORTB); //-OC1B, -GREEN    (INVERTED) SCK
     878:	ba 9a       	sbi	0x17, 2	; 23
   setoutPORT(PB3, PORTB); //+OC1B Clock (OC1B, not inverted)
     87a:	bb 9a       	sbi	0x17, 3	; 23
   setoutPORT(PB5, PORTB); //+OC1D, RED
     87c:	bd 9a       	sbi	0x17, 5	; 23


   writeMasked(((0<<WGM11) | (0<<WGM10)), //FastPWM (combined with above)
     87e:	86 b5       	in	r24, 0x26	; 38
     880:	8c 7f       	andi	r24, 0xFC	; 252
     882:	86 bd       	out	0x26, r24	; 38
//            | (0<<COM1B1) | (1<<COM1B0) 
//            | (1<<PWM1A) | (1<<PWM1B) )
//#define lvds_ComplementaryClrOnCompare() \ //
   //Do TCCR1C first, because it contains shadow-bits of TCCR1A that I
   // don't want to have to rewrite...
   TCCR1C = ( (1<<COM1D1) | (0<<COM1D0)
     884:	89 e0       	ldi	r24, 0x09	; 9
     886:	87 bd       	out	0x27, r24	; 39
            | (1<<PWM1D) );

   TCCR1A = ( (0<<COM1A1) | (1<<COM1A0) 
     888:	83 e6       	ldi	r24, 0x63	; 99
     88a:	80 bf       	out	0x30, r24	; 48
   // PWM inversion must be enabled:

   //inverted with PWM1X
//   setbit(PWM1X, TCCR1B);
 
    Nada_init();
     88c:	80 e3       	ldi	r24, 0x30	; 48
     88e:	84 bd       	out	0x24, r24	; 36
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	8d bd       	out	0x2d, r24	; 45
}
     894:	08 95       	ret

00000896 <lcd_Init>:
//   (the fewer changes, the less likely we'll glitch...?)


void lcd_Init(void)
{
 	Nada_init();
     896:	80 e3       	ldi	r24, 0x30	; 48
     898:	84 bd       	out	0x24, r24	; 36
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	8d bd       	out	0x2d, r24	; 45
}
     89e:	08 95       	ret

000008a0 <segClear>:
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     8a0:	10 92 64 00 	sts	0x0064, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     8a4:	86 e0       	ldi	r24, 0x06	; 6
     8a6:	80 93 6a 00 	sts	0x006A, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     8aa:	83 e6       	ldi	r24, 0x63	; 99
     8ac:	80 93 6b 00 	sts	0x006B, r24
}
     8b0:	08 95       	ret

000008b2 <segTerminate>:
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     8b2:	80 91 64 00 	lds	r24, 0x0064
     8b6:	8b 33       	cpi	r24, 0x3B	; 59
     8b8:	f8 f4       	brcc	.+62     	; 0x8f8 <segTerminate+0x46>
     8ba:	e8 2f       	mov	r30, r24
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	e6 59       	subi	r30, 0x96	; 150
     8c4:	ff 4f       	sbci	r31, 0xFF	; 255
     8c6:	90 81       	ld	r25, Z
     8c8:	98 7f       	andi	r25, 0xF8	; 248
     8ca:	f1 f0       	breq	.+60     	; 0x908 <segTerminate+0x56>
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	80 93 64 00 	sts	0x0064, r24

		rowSegBuffer[segPosition].red_length 
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
     8d2:	a8 2f       	mov	r26, r24
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
	if((segPosition < NUM_SEGMENTS-1) 
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;

		rowSegBuffer[segPosition].red_length 
     8d6:	fd 01       	movw	r30, r26
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	e6 59       	subi	r30, 0x96	; 150
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	aa 0f       	add	r26, r26
     8e2:	bb 1f       	adc	r27, r27
     8e4:	a8 59       	subi	r26, 0x98	; 152
     8e6:	bf 4f       	sbci	r27, 0xFF	; 255
     8e8:	8c 91       	ld	r24, X
     8ea:	87 70       	andi	r24, 0x07	; 7
     8ec:	80 83       	st	Z, r24
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
		rowSegBuffer[segPosition].green_blue
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	8c 91       	ld	r24, X
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	81 83       	std	Z+1, r24	; 0x01
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     8f6:	08 95       	ret
		rowSegBuffer[segPosition].green_blue
			= rowSegBuffer[segPosition-1].green_blue;
	}
	//We're already at the last segment, so we have to nullify it
	//This might terminate the last pixel early, but is necessary.
	else if(segPosition == NUM_SEGMENTS-1)
     8f8:	8b 33       	cpi	r24, 0x3B	; 59
     8fa:	31 f4       	brne	.+12     	; 0x908 <segTerminate+0x56>
	{
		//Apparently white doesn't cause sync problems... so load it white
		rowSegBuffer[segPosition].red_length = fbRed_to_seg(_W);
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	80 93 e0 00 	sts	0x00E0, r24
		rowSegBuffer[segPosition].green_blue = 
     902:	83 e7       	ldi	r24, 0x73	; 115
     904:	80 93 e1 00 	sts	0x00E1, r24
     908:	08 95       	ret

0000090a <newSeg>:
// Returns TRUE if it had to be truncated
//  (out of segment memory, past the display edge...)
// length is the real length, not shifted for storage...
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{
     90a:	20 91 64 00 	lds	r18, 0x0064
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     90e:	56 2f       	mov	r21, r22
     910:	58 6f       	ori	r21, 0xF8	; 248
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     912:	15 c0       	rjmp	.+42     	; 0x93e <newSeg+0x34>
	{
		// No more segments available...	
		// The last segment must have a length of 0
		if(segPosition == NUM_SEGMENTS-1)
     914:	2b 33       	cpi	r18, 0x3B	; 59
     916:	19 f4       	brne	.+6      	; 0x91e <newSeg+0x14>
     918:	20 93 64 00 	sts	0x0064, r18
     91c:	1b c0       	rjmp	.+54     	; 0x954 <newSeg+0x4a>
	
		//Check if the segment buffer is cleared...
		// then DON'T increment segPosition...
		//if(!((segPosition == 0) && 
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     91e:	22 23       	and	r18, r18
     920:	21 f4       	brne	.+8      	; 0x92a <newSeg+0x20>
     922:	30 91 6a 00 	lds	r19, 0x006A
     926:	38 7f       	andi	r19, 0xF8	; 248
     928:	09 f0       	breq	.+2      	; 0x92c <newSeg+0x22>
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;
     92a:	2f 5f       	subi	r18, 0xFF	; 255


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     92c:	e2 2f       	mov	r30, r18
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	e6 59       	subi	r30, 0x96	; 150
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	50 83       	st	Z, r21
			red | (SEG_MAXLENGTH<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     93a:	41 83       	std	Z+1, r20	; 0x01

		length -= SEG_MAXLENGTH;
     93c:	4f 97       	sbiw	r24, 0x1f	; 31
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     93e:	8f 31       	cpi	r24, 0x1F	; 31
     940:	91 05       	cpc	r25, r1
     942:	40 f7       	brcc	.-48     	; 0x914 <newSeg+0xa>
     944:	20 93 64 00 	sts	0x0064, r18

	}

	//We can fit whatever's left (or the whole thing) into a single segment
	// Unless, of course, there's nothing left...
	if(length > 0) //< SEG_MAXLENGTH)//Guaranteed now...
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	11 f4       	brne	.+4      	; 0x950 <newSeg+0x46>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	08 95       	ret
	{
		//Make sure there's another segment to write to!
		if(segPosition == NUM_SEGMENTS-1)
     950:	2b 33       	cpi	r18, 0x3B	; 59
     952:	19 f4       	brne	.+6      	; 0x95a <newSeg+0x50>
		{
			segTerminate();
     954:	ae df       	rcall	.-164    	; 0x8b2 <segTerminate>
     956:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
     958:	08 95       	ret
		}

		//if(!((segPosition == 0) &&
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     95a:	22 23       	and	r18, r18
     95c:	21 f4       	brne	.+8      	; 0x966 <newSeg+0x5c>
     95e:	30 91 6a 00 	lds	r19, 0x006A
     962:	38 7f       	andi	r19, 0xF8	; 248
     964:	19 f0       	breq	.+6      	; 0x96c <newSeg+0x62>
	     ((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
  				segPosition++;
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	20 93 64 00 	sts	0x0064, r18


		rowSegBuffer[segPosition].red_length = 
     96c:	e0 91 64 00 	lds	r30, 0x0064
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	e6 59       	subi	r30, 0x96	; 150
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	88 0f       	add	r24, r24
     97c:	88 0f       	add	r24, r24
     97e:	88 0f       	add	r24, r24
     980:	86 2b       	or	r24, r22
     982:	80 83       	st	Z, r24
			red | (length<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     984:	41 83       	std	Z+1, r20	; 0x01
     986:	80 e0       	ldi	r24, 0x00	; 0
	}

	return FALSE;

}
     988:	08 95       	ret

0000098a <stretchSeg>:
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     98a:	e0 91 64 00 	lds	r30, 0x0064
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	df 01       	movw	r26, r30
     992:	aa 0f       	add	r26, r26
     994:	bb 1f       	adc	r27, r27
     996:	a6 59       	subi	r26, 0x96	; 150
     998:	bf 4f       	sbci	r27, 0xFF	; 255
     99a:	2c 91       	ld	r18, X

		if(!additionalLength)
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	11 f1       	breq	.+68     	; 0x9e4 <stretchSeg+0x5a>
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     9a0:	42 2f       	mov	r20, r18
     9a2:	46 95       	lsr	r20
     9a4:	46 95       	lsr	r20
     9a6:	46 95       	lsr	r20

		if(!additionalLength)
			return FALSE;

		//We can stretch the current segment
		if(oldLength < SEG_MAXLENGTH)
     9a8:	4f 31       	cpi	r20, 0x1F	; 31
     9aa:	98 f4       	brcc	.+38     	; 0x9d2 <stretchSeg+0x48>
		{
			uint8_t maxStretch = SEG_MAXLENGTH - oldLength;

			// Will the entire addition fit in the previous segment?
			if(additionalLength <= maxStretch)
     9ac:	3f e1       	ldi	r19, 0x1F	; 31
     9ae:	34 1b       	sub	r19, r20
     9b0:	43 2f       	mov	r20, r19
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	48 17       	cp	r20, r24
     9b6:	59 07       	cpc	r21, r25
     9b8:	38 f0       	brcs	.+14     	; 0x9c8 <stretchSeg+0x3e>
			{
				rowSegBuffer[segPosition].red_length += 
     9ba:	88 0f       	add	r24, r24
     9bc:	88 0f       	add	r24, r24
     9be:	88 0f       	add	r24, r24
     9c0:	82 0f       	add	r24, r18
     9c2:	8c 93       	st	X, r24
     9c4:	80 e0       	ldi	r24, 0x00	; 0
					(additionalLength << SEG_LENGTH_SHIFT);

				//Then we're done.
			//	additionalLength = 0;
			//	break;
				return FALSE;
     9c6:	08 95       	ret
			else
			{
				uint8_t red = 
					rowSegBuffer[segPosition].red_length & RED_MASK;

				rowSegBuffer[segPosition].red_length =
     9c8:	28 6f       	ori	r18, 0xF8	; 248
     9ca:	2c 93       	st	X, r18
					red | (SEG_MAXLENGTH << SEG_LENGTH_SHIFT);

				additionalLength -= maxStretch;
     9cc:	84 1b       	sub	r24, r20
     9ce:	95 0b       	sbc	r25, r21

		// We shouldn't ever get here if additionalLength = 0...

		//But we should test to make sure there's still lenth after
		// the stretch...
		if(additionalLength)
     9d0:	49 f0       	breq	.+18     	; 0x9e4 <stretchSeg+0x5a>
				rowSegBuffer[segPosition].green_blue;

			uint8_t retVal;

			//Create new segment(s) with the remaining length
			retVal = newSeg(additionalLength, red, green_blue);
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	e6 59       	subi	r30, 0x96	; 150
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	60 81       	ld	r22, Z
     9dc:	67 70       	andi	r22, 0x07	; 7
     9de:	41 81       	ldd	r20, Z+1	; 0x01
     9e0:	94 df       	rcall	.-216    	; 0x90a <newSeg>

			//Then we're done...
			//additionalLength = 0;
			//break;

			return retVal;
     9e2:	08 95       	ret
     9e4:	80 e0       	ldi	r24, 0x00	; 0
		}	

		//We shouldn't ever get here...
		// Well, maybe... if additionalLength == maxStretch...?
		return FALSE;
}
     9e6:	08 95       	ret

000009e8 <addSeg>:
// the last segment...
uint8_t addSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Currently not smart enough to stretch the first segment...
	if(segPosition == 0)
     9e8:	e0 91 64 00 	lds	r30, 0x0064
     9ec:	ee 23       	and	r30, r30
     9ee:	11 f4       	brne	.+4      	; 0x9f4 <addSeg+0xc>
		return newSeg(length, red, green_blue);
     9f0:	8c df       	rcall	.-232    	; 0x90a <newSeg>
     9f2:	08 95       	ret

	//Can we stretch?
	if(((rowSegBuffer[segPosition].red_length & RED_MASK) == red)
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	e6 59       	subi	r30, 0x96	; 150
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	20 81       	ld	r18, Z
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	27 70       	andi	r18, 0x07	; 7
     a04:	30 70       	andi	r19, 0x00	; 0
     a06:	a6 2f       	mov	r26, r22
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	2a 17       	cp	r18, r26
     a0c:	3b 07       	cpc	r19, r27
     a0e:	29 f4       	brne	.+10     	; 0xa1a <addSeg+0x32>
     a10:	21 81       	ldd	r18, Z+1	; 0x01
     a12:	24 17       	cp	r18, r20
     a14:	11 f4       	brne	.+4      	; 0xa1a <addSeg+0x32>
		&& (rowSegBuffer[segPosition].green_blue == green_blue))
			return stretchSeg(length);
     a16:	b9 df       	rcall	.-142    	; 0x98a <stretchSeg>
     a18:	08 95       	ret
	else
		return newSeg(length, red, green_blue);
     a1a:	77 df       	rcall	.-274    	; 0x90a <newSeg>

}
     a1c:	08 95       	ret

00000a1e <rbpix_to_seg>:
//This is just an intermediate test, for now...
// for reloading the rowbuffer to a seg-buffer.
//This could easily be revised (and generalized) to be...
// addSegment or addPixel
void rbpix_to_seg(uint8_t rbValue, uint8_t col, uint8_t length)
{
     a1e:	1f 93       	push	r17
     a20:	18 2f       	mov	r17, r24
     a22:	84 2f       	mov	r24, r20
	static uint8_t last_rbValue = 0;
	//uint8_t length = 1;

	if(col == 0)
     a24:	66 23       	and	r22, r22
     a26:	59 f4       	brne	.+22     	; 0xa3e <rbpix_to_seg+0x20>
	{
		last_rbValue = 0;
     a28:	10 92 65 00 	sts	0x0065, r1
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     a2c:	10 92 64 00 	sts	0x0064, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     a30:	96 e0       	ldi	r25, 0x06	; 6
     a32:	90 93 6a 00 	sts	0x006A, r25
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     a36:	93 e6       	ldi	r25, 0x63	; 99
     a38:	90 93 6b 00 	sts	0x006B, r25
     a3c:	0b c0       	rjmp	.+22     	; 0xa54 <rbpix_to_seg+0x36>
	{
		last_rbValue = 0;
		segClear();
	}
	//Same color as last pixel...
	else if(segPosition && (rbValue == last_rbValue))
     a3e:	90 91 64 00 	lds	r25, 0x0064
     a42:	99 23       	and	r25, r25
     a44:	39 f0       	breq	.+14     	; 0xa54 <rbpix_to_seg+0x36>
     a46:	90 91 65 00 	lds	r25, 0x0065
     a4a:	19 17       	cp	r17, r25
     a4c:	19 f4       	brne	.+6      	; 0xa54 <rbpix_to_seg+0x36>
	{
		stretchSeg(length);
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	9c df       	rcall	.-200    	; 0x98a <stretchSeg>
		return;
     a52:	16 c0       	rjmp	.+44     	; 0xa80 <rbpix_to_seg+0x62>

	uint8_t green = rbValue & 0x03;
	uint8_t red = (rbValue & 0x1C) >> 2;
	uint8_t blue = rbValue >> 5;

	newSeg(length, red, (blue<<4) | green);
     a54:	61 2f       	mov	r22, r17
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	6c 71       	andi	r22, 0x1C	; 28
     a5a:	70 70       	andi	r23, 0x00	; 0
     a5c:	75 95       	asr	r23
     a5e:	67 95       	ror	r22
     a60:	75 95       	asr	r23
     a62:	67 95       	ror	r22
     a64:	21 2f       	mov	r18, r17
     a66:	22 95       	swap	r18
     a68:	26 95       	lsr	r18
     a6a:	27 70       	andi	r18, 0x07	; 7
     a6c:	22 95       	swap	r18
     a6e:	20 7f       	andi	r18, 0xF0	; 240
     a70:	91 2f       	mov	r25, r17
     a72:	93 70       	andi	r25, 0x03	; 3
     a74:	29 2b       	or	r18, r25
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	42 2f       	mov	r20, r18
     a7a:	47 df       	rcall	.-370    	; 0x90a <newSeg>

	last_rbValue = rbValue;
     a7c:	10 93 65 00 	sts	0x0065, r17
}
     a80:	1f 91       	pop	r17
     a82:	08 95       	ret

00000a84 <rsb_drawPix>:
void rsb_drawPix(uint8_t rowNum)
{
   //a/o v59-12ish: WTF, no comment about this?!
   // I believe this is to enable Green's output
   // which was disabled prior because...?
   TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
     a84:	83 e5       	ldi	r24, 0x53	; 83
     a86:	80 bf       	out	0x30, r24	; 48
		  "I"  (_SFR_IO_ADDR(DT1)),	//DT1: %6
		  "I"  (_SFR_IO_ADDR(OCR1A))	//OCR1A %7
	);
*/

__asm__ __volatile__
     a88:	ea e6       	ldi	r30, 0x6A	; 106
     a8a:	f0 e0       	ldi	r31, 0x00	; 0

00000a8c <LoadNext_429>:
     a8c:	41 91       	ld	r20, Z+
     a8e:	54 2f       	mov	r21, r20
     a90:	57 70       	andi	r21, 0x07	; 7
     a92:	61 91       	ld	r22, Z+
     a94:	76 2f       	mov	r23, r22
     a96:	6f 70       	andi	r22, 0x0F	; 15
     a98:	72 95       	swap	r23
     a9a:	7f 70       	andi	r23, 0x0F	; 15
     a9c:	5a bd       	out	0x2a, r21	; 42
     a9e:	64 bd       	out	0x24, r22	; 36
     aa0:	7d bd       	out	0x2d, r23	; 45
     aa2:	48 7f       	andi	r20, 0xF8	; 248
     aa4:	a9 f0       	breq	.+42     	; 0xad0 <Done_429>
     aa6:	00 00       	nop
     aa8:	00 00       	nop

00000aaa <Counter_429>:
     aaa:	48 50       	subi	r20, 0x08	; 8
     aac:	79 f3       	breq	.-34     	; 0xa8c <LoadNext_429>
     aae:	00 00       	nop
     ab0:	00 00       	nop
     ab2:	00 00       	nop
     ab4:	00 00       	nop
     ab6:	00 00       	nop
     ab8:	00 00       	nop
     aba:	00 00       	nop
     abc:	00 00       	nop
     abe:	00 00       	nop
     ac0:	00 00       	nop
     ac2:	00 00       	nop
     ac4:	00 00       	nop
     ac6:	00 00       	nop
     ac8:	00 00       	nop
     aca:	00 00       	nop
     acc:	00 00       	nop
     ace:	ed cf       	rjmp	.-38     	; 0xaaa <Counter_429>

00000ad0 <Done_429>:
     ad0:	80 e8       	ldi	r24, 0x80	; 128
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <Done_429+0x4>
      // Actually, it's quite handy, because it shows where drawSegs has
      // completed... (I thought it stretched to the end of DE, but nope)
      // The "bug" with PLL_SYSCLK's white bars now appears to be quite
      // apparently due to carry-over from a previous line
      // rather than an Hsync problem, as now it appears cyan.
      OCR1D = 0;
     ad8:	1a bc       	out	0x2a, r1	; 42
      // green seems to be floating between the last pixel and the
      // delay_cyc (!)
      //Disable complementary-output for Green 
      //  (on /OC1B, where CLK is OC1B)
      // Since Nada, V, and H DT's might be bad for clocking.
      TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
     ada:	83 e6       	ldi	r24, 0x63	; 99
     adc:	80 bf       	out	0x30, r24	; 48
         | (1<<COM1B1) | (0<<COM1B0)
         | (1<<PWM1A) | (1<<PWM1B) );

      fullBlue();
     ade:	14 bc       	out	0x24, r1	; 36
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	8d bd       	out	0x2d, r24	; 45
      Nada_fromDEonly();
     ae4:	80 e3       	ldi	r24, 0x30	; 48
     ae6:	84 bd       	out	0x24, r24	; 36
}
     ae8:	08 95       	ret

00000aea <updateLCD>:

	//Hsync and Actually draw the pixels... (when DE is active)
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);
     aea:	80 91 62 00 	lds	r24, 0x0062
     aee:	90 91 60 00 	lds	r25, 0x0060
// rowNum is only used when DE is active...
//  and should be 0 at *drawn row* 0
void loadData(uint16_t rowNum, uint8_t dataEnable)
{
	//H Active pulse...
   if(vSync)
     af2:	20 91 61 00 	lds	r18, 0x0061
     af6:	22 23       	and	r18, r18
     af8:	39 f0       	breq	.+14     	; 0xb08 <updateLCD+0x1e>
   {
		//Vsync_fromNada() is called at the end of the last interupt
      VplusH_fromVsync();
     afa:	1d bc       	out	0x2d, r1	; 45
     afc:	ef ea       	ldi	r30, 0xAF	; 175
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <updateLCD+0x16>
      Hlow_Delay();
      Vsync_fromVplusH();
     b04:	25 e0       	ldi	r18, 0x05	; 5
     b06:	07 c0       	rjmp	.+14     	; 0xb16 <updateLCD+0x2c>
      HD_Delay();
   }
   else
   {
      Hsync_fromNada();
     b08:	23 e0       	ldi	r18, 0x03	; 3
     b0a:	2d bd       	out	0x2d, r18	; 45
     b0c:	ef ea       	ldi	r30, 0xAF	; 175
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <updateLCD+0x26>
      Hlow_Delay();
      Nada_fromHsync();
     b14:	24 e0       	ldi	r18, 0x04	; 4
     b16:	2d bd       	out	0x2d, r18	; 45
     b18:	e8 e5       	ldi	r30, 0x58	; 88
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <updateLCD+0x32>
      HD_Delay();
   }

   if(dataEnable)
     b20:	99 23       	and	r25, r25
     b22:	11 f0       	breq	.+4      	; 0xb28 <updateLCD+0x3e>
#if (defined(ROW_SEG_BUFFER) && ROW_SEG_BUFFER)
void drawPix(uint8_t rowNum)
{
	//Note that rowNum isn't really used here...
	// and it's only a uint8_t!
	rsb_drawPix(rowNum);
     b24:	86 52       	subi	r24, 0x26	; 38
     b26:	ae df       	rcall	.-164    	; 0xa84 <rsb_drawPix>
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);

	hsyncCount++;
     b28:	80 91 62 00 	lds	r24, 0x0062
     b2c:	90 91 63 00 	lds	r25, 0x0063
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	90 93 63 00 	sts	0x0063, r25
     b36:	80 93 62 00 	sts	0x0062, r24

	switch(hsyncCount)
     b3a:	83 32       	cpi	r24, 0x23	; 35
     b3c:	91 05       	cpc	r25, r1
     b3e:	c1 f0       	breq	.+48     	; 0xb70 <updateLCD+0x86>
     b40:	84 32       	cpi	r24, 0x24	; 36
     b42:	91 05       	cpc	r25, r1
     b44:	20 f4       	brcc	.+8      	; 0xb4e <updateLCD+0x64>
     b46:	83 30       	cpi	r24, 0x03	; 3
     b48:	91 05       	cpc	r25, r1
     b4a:	e1 f4       	brne	.+56     	; 0xb84 <updateLCD+0x9a>
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <updateLCD+0x74>
     b4e:	86 32       	cpi	r24, 0x26	; 38
     b50:	91 05       	cpc	r25, r1
     b52:	a9 f0       	breq	.+42     	; 0xb7e <updateLCD+0x94>
     b54:	23 e0       	ldi	r18, 0x03	; 3
     b56:	86 32       	cpi	r24, 0x26	; 38
     b58:	92 07       	cpc	r25, r18
     b5a:	a1 f4       	brne	.+40     	; 0xb84 <updateLCD+0x9a>
     b5c:	15 c0       	rjmp	.+42     	; 0xb88 <updateLCD+0x9e>
	{
		//V Front Porch, begins with initLCD

		//Vsync H->L (Begin V-Sync)
		case T_DV:
			dataEnable = FALSE;
     b5e:	10 92 60 00 	sts	0x0060, r1
			//clrpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = TRUE;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 61 00 	sts	0x0061, r24
			Vsync_fromNada();
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	84 bd       	out	0x24, r24	; 36
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <updateLCD+0x90>
		//	if(hfm_nextOutput(&modulator))
		//		colorOverride = 0xff;
		//	else
		//		colorOverride = 7;
			//setpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = FALSE;
     b70:	10 92 61 00 	sts	0x0061, r1
			Nada_fromVsync();
     b74:	80 e3       	ldi	r24, 0x30	; 48
     b76:	84 bd       	out	0x24, r24	; 36
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	8d bd       	out	0x2d, r24	; 45
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <updateLCD+0x9a>
			break;
		//Start of frame (DE active)
		case T_VD +(T_Vlow + T_DV):
			dataEnable = TRUE;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 60 00 	sts	0x0060, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
			break;
     b86:	08 95       	ret
		// All rows have been displayed
		// Return to V Front Porch
		case V_COUNT +(T_VD + T_Vlow + T_DV):
			dataEnable = FALSE;
     b88:	10 92 60 00 	sts	0x0060, r1
		//	break;
		//Frame complete
		//case HSYNC_COUNT_FRAME_COMPLETE:
			//T_DV +(V_COUNT+T_VD+T_Vlow) + FRAME_UPDATE_DELAY:
			hsyncCount = 0;
     b8c:	10 92 63 00 	sts	0x0063, r1
     b90:	10 92 62 00 	sts	0x0062, r1
     b94:	81 e0       	ldi	r24, 0x01	; 1
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...

	return frameComplete;
}
     b96:	08 95       	ret

00000b98 <init_timer0Hsync>:
//Testing with values returned by timer0Calculator
//#define TIMER0_OCRVAL	65

void init_timer0Hsync(void)
{
   OCR0A = TIMER0_OCRVAL; //T_Hlow_CYC + T_HD_CYC + T_DE_CYC + T_DH_CYC;
     b98:	8c eb       	ldi	r24, 0xBC	; 188
     b9a:	83 bb       	out	0x13, r24	; 19
   timer_setWGM(0, WGM_CLR_ON_COMPARE);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	0b dd       	rcall	.-1514   	; 0x5b8 <timer_setWGM>
   timer_selectDivisor(0, TIMER0_CLKDIV); //CLKDIV1);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	68 e0       	ldi	r22, 0x08	; 8
     ba6:	df dc       	rcall	.-1602   	; 0x566 <timer_selectDivisor>
   timer_compareMatchIntEnable(0, OUT_CHANNELA);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	38 dd       	rcall	.-1424   	; 0x620 <timer_compareMatchIntSetup>
}
     bb0:	08 95       	ret

00000bb2 <main>:

#if(defined(SEG_RACER) && SEG_RACER)
	racer_init();
#endif

	init_timer0Hsync();
     bb2:	f2 df       	rcall	.-28     	; 0xb98 <init_timer0Hsync>
	//This starts pretty late... watch out for WDT
	init_heartBeat();

	setHeartRate(0);

	lvds_timerInit();
     bb4:	49 de       	rcall	.-878    	; 0x848 <lvds_timerInit>
     bb6:	ff cf       	rjmp	.-2      	; 0xbb6 <main+0x4>

00000bb8 <segSine_loadRow>:

void segSine_loadRow(uint16_t rowNum) 
{
     bb8:	9f 92       	push	r9
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	7c 01       	movw	r14, r24
   static uint16_t lastThetaOffset = 0;
   static uint8_t frameCount = 0;

   if(rowNum == 0)
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	71 f4       	brne	.+28     	; 0xbf6 <segSine_loadRow+0x3e>
   {
      lastThetaOffset+=16;
     bda:	80 91 67 00 	lds	r24, 0x0067
     bde:	90 91 68 00 	lds	r25, 0x0068
     be2:	40 96       	adiw	r24, 0x10	; 16
     be4:	90 93 68 00 	sts	0x0068, r25
     be8:	80 93 67 00 	sts	0x0067, r24
      frameCount++;
     bec:	80 91 66 00 	lds	r24, 0x0066
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	80 93 66 00 	sts	0x0066, r24
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     bf6:	10 92 64 00 	sts	0x0064, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     bfa:	86 e0       	ldi	r24, 0x06	; 6
     bfc:	80 93 6a 00 	sts	0x006A, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     c00:	83 e6       	ldi	r24, 0x63	; 99
     c02:	80 93 6b 00 	sts	0x006B, r24
// I think I've seen this before.
#if(defined(PLL_SYSCLK) && PLL_SYSCLK)
   //This doesn't seem to matter...
   addSegfb(12, _W);
#else
   addSegfb(3, _W);
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	67 e0       	ldi	r22, 0x07	; 7
     c0c:	43 e7       	ldi	r20, 0x73	; 115
     c0e:	ec de       	rcall	.-552    	; 0x9e8 <addSeg>
#endif

   uint8_t sineVal = (uint8_t)((int8_t)128 + 
     c10:	80 91 67 00 	lds	r24, 0x0067
     c14:	90 91 68 00 	lds	r25, 0x0068
     c18:	8e 0d       	add	r24, r14
     c1a:	9f 1d       	adc	r25, r15
     c1c:	ce dd       	rcall	.-1124   	; 0x7ba <sineRaw8>
         sineRaw8(rowNum+lastThetaOffset));
     c1e:	18 2f       	mov	r17, r24
     c20:	10 58       	subi	r17, 0x80	; 128

   uint8_t nextSineVal = (uint8_t)((int8_t)128 +
     c22:	80 91 67 00 	lds	r24, 0x0067
     c26:	90 91 68 00 	lds	r25, 0x0068
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	8e 0d       	add	r24, r14
     c2e:	9f 1d       	adc	r25, r15
     c30:	c4 dd       	rcall	.-1144   	; 0x7ba <sineRaw8>
         sineRaw8(rowNum+1+lastThetaOffset));
     c32:	08 2f       	mov	r16, r24
     c34:	00 58       	subi	r16, 0x80	; 128
   //uint8_t length; 
	uint8_t length = 1;

   //If the step-size is greater than one pixel, we'll see hashing
   // this should fix that.
   if(nextSineVal < sineVal)
     c36:	01 17       	cp	r16, r17
     c38:	28 f4       	brcc	.+10     	; 0xc44 <segSine_loadRow+0x8c>
   {
      length = (sineVal - nextSineVal);
     c3a:	21 2f       	mov	r18, r17
     c3c:	20 1b       	sub	r18, r16
     c3e:	02 2f       	mov	r16, r18
      //This assures that the additional length of the white-segment
      // goes in the proper direction...
      sineVal-=length;//*4;
     c40:	12 1b       	sub	r17, r18
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <segSine_loadRow+0x96>
   }
   else if(nextSineVal > sineVal)
     c44:	10 17       	cp	r17, r16
     c46:	10 f0       	brcs	.+4      	; 0xc4c <segSine_loadRow+0x94>
     c48:	01 e0       	ldi	r16, 0x01	; 1
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <segSine_loadRow+0x96>
      length = (nextSineVal - sineVal);
     c4c:	01 1b       	sub	r16, r17
   //if(length == 0)
   //  length = 1;

   uint8_t rgbVal=0;
   uint8_t J=0;
   uint8_t j = frameCount;
     c4e:	90 90 66 00 	lds	r9, 0x0066
     c52:	e0 e0       	ldi	r30, 0x00	; 0
{
	while(value > 0x2f)
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
     c54:	63 e0       	ldi	r22, 0x03	; 3
     c56:	d6 2e       	mov	r13, r22
      J++;
      j++; // = J+frameCount;
      
      rgbVal = rgbGradient(j);

      if((uint16_t)J*(uint16_t)WIDTH>=sineVal)
     c58:	a1 2e       	mov	r10, r17
     c5a:	bb 24       	eor	r11, r11
   uint8_t j = frameCount;

#define WIDTH 5//3//4
   while(1)
   {
      J++;
     c5c:	ce 2e       	mov	r12, r30
     c5e:	c3 94       	inc	r12
     c60:	6c 2d       	mov	r22, r12
     c62:	69 0d       	add	r22, r9
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <segSine_loadRow+0xb0>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
     c66:	60 53       	subi	r22, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
     c68:	60 33       	cpi	r22, 0x30	; 48
     c6a:	e8 f7       	brcc	.-6      	; 0xc66 <segSine_loadRow+0xae>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
     c6c:	46 2f       	mov	r20, r22
     c6e:	43 70       	andi	r20, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	62 ff       	sbrs	r22, 2
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <segSine_loadRow+0xc4>
     c76:	3d 2d       	mov	r19, r13
     c78:	34 1b       	sub	r19, r20
     c7a:	43 2f       	mov	r20, r19
	uint8_t G = ((value)&0x0C)>>2; 
     c7c:	9b 01       	movw	r18, r22
     c7e:	2c 70       	andi	r18, 0x0C	; 12
     c80:	30 70       	andi	r19, 0x00	; 0
     c82:	35 95       	asr	r19
     c84:	27 95       	ror	r18
     c86:	35 95       	asr	r19
     c88:	27 95       	ror	r18
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
     c8a:	64 ff       	sbrs	r22, 4
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <segSine_loadRow+0xdc>
     c8e:	8d 2d       	mov	r24, r13
     c90:	82 1b       	sub	r24, r18
     c92:	28 2f       	mov	r18, r24
	uint8_t B = ((value)&0x30) >> 4; 
     c94:	cb 01       	movw	r24, r22
     c96:	80 73       	andi	r24, 0x30	; 48
     c98:	90 70       	andi	r25, 0x00	; 0
     c9a:	34 e0       	ldi	r19, 0x04	; 4
     c9c:	95 95       	asr	r25
     c9e:	87 95       	ror	r24
     ca0:	3a 95       	dec	r19
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <segSine_loadRow+0xe4>
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
     ca4:	66 ff       	sbrs	r22, 6
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <segSine_loadRow+0xf6>
     ca8:	9d 2d       	mov	r25, r13
     caa:	98 1b       	sub	r25, r24
     cac:	89 2f       	mov	r24, r25

	return rgb(r,g,b);
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	23 70       	andi	r18, 0x03	; 3
     cb2:	30 70       	andi	r19, 0x00	; 0
     cb4:	22 0f       	add	r18, r18
     cb6:	33 1f       	adc	r19, r19
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	43 70       	andi	r20, 0x03	; 3
     cbe:	42 2b       	or	r20, r18
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	83 70       	andi	r24, 0x03	; 3
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	b4 e0       	ldi	r27, 0x04	; 4
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	ba 95       	dec	r27
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <segSine_loadRow+0x110>
     cd0:	48 2b       	or	r20, r24
      j++; // = J+frameCount;
      
      rgbVal = rgbGradient(j);

      if((uint16_t)J*(uint16_t)WIDTH>=sineVal)
     cd2:	8c 2d       	mov	r24, r12
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	65 e0       	ldi	r22, 0x05	; 5
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	8d d2       	rcall	.+1306   	; 0x11f6 <__mulhi3>
     cdc:	24 2f       	mov	r18, r20
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	f4 2f       	mov	r31, r20
     ce2:	f1 70       	andi	r31, 0x01	; 1
     ce4:	40 73       	andi	r20, 0x30	; 48
     ce6:	8a 15       	cp	r24, r10
     ce8:	9b 05       	cpc	r25, r11
     cea:	98 f4       	brcc	.+38     	; 0xd12 <segSine_loadRow+0x15a>
         break;

      addSegfb(WIDTH, rgbVal);
     cec:	b9 01       	movw	r22, r18
     cee:	63 70       	andi	r22, 0x03	; 3
     cf0:	70 70       	andi	r23, 0x00	; 0
     cf2:	66 0f       	add	r22, r22
     cf4:	77 1f       	adc	r23, r23
     cf6:	6f 2b       	or	r22, r31
     cf8:	40 64       	ori	r20, 0x40	; 64
     cfa:	2c 70       	andi	r18, 0x0C	; 12
     cfc:	30 70       	andi	r19, 0x00	; 0
     cfe:	35 95       	asr	r19
     d00:	27 95       	ror	r18
     d02:	35 95       	asr	r19
     d04:	27 95       	ror	r18
     d06:	42 2b       	or	r20, r18
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	6d de       	rcall	.-806    	; 0x9e8 <addSeg>
     d0e:	ec 2d       	mov	r30, r12
   }
     d10:	a5 cf       	rjmp	.-182    	; 0xc5c <segSine_loadRow+0xa4>

   J--;

   addSegfb(sineVal-(uint16_t)J*(uint16_t)WIDTH, rgbVal); 
     d12:	8e 2f       	mov	r24, r30
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	65 e0       	ldi	r22, 0x05	; 5
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	6d d2       	rcall	.+1242   	; 0x11f6 <__mulhi3>
     d1c:	b9 01       	movw	r22, r18
     d1e:	63 70       	andi	r22, 0x03	; 3
     d20:	70 70       	andi	r23, 0x00	; 0
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	6f 2b       	or	r22, r31
     d28:	40 64       	ori	r20, 0x40	; 64
     d2a:	2c 70       	andi	r18, 0x0C	; 12
     d2c:	30 70       	andi	r19, 0x00	; 0
     d2e:	35 95       	asr	r19
     d30:	27 95       	ror	r18
     d32:	35 95       	asr	r19
     d34:	27 95       	ror	r18
     d36:	42 2b       	or	r20, r18
     d38:	95 01       	movw	r18, r10
     d3a:	28 1b       	sub	r18, r24
     d3c:	39 0b       	sbc	r19, r25
     d3e:	c9 01       	movw	r24, r18
     d40:	53 de       	rcall	.-858    	; 0x9e8 <addSeg>

   addSegfb(length, _W); 
     d42:	80 2f       	mov	r24, r16
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	67 e0       	ldi	r22, 0x07	; 7
     d48:	43 e7       	ldi	r20, 0x73	; 115
     d4a:	4e de       	rcall	.-868    	; 0x9e8 <addSeg>
   addSegfb(257-sineVal-length, rgbGradient(rowNum/8)); //rowNum/8);
     d4c:	67 01       	movw	r12, r14
     d4e:	b3 e0       	ldi	r27, 0x03	; 3
     d50:	d6 94       	lsr	r13
     d52:	c7 94       	ror	r12
     d54:	ba 95       	dec	r27
     d56:	e1 f7       	brne	.-8      	; 0xd50 <segSine_loadRow+0x198>
     d58:	8c 2d       	mov	r24, r12
     d5a:	9c 2d       	mov	r25, r12
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <segSine_loadRow+0x1a8>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
     d5e:	90 53       	subi	r25, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
     d60:	90 33       	cpi	r25, 0x30	; 48
     d62:	e8 f7       	brcc	.-6      	; 0xd5e <segSine_loadRow+0x1a6>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
     d64:	69 2f       	mov	r22, r25
     d66:	63 70       	andi	r22, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
     d68:	92 ff       	sbrs	r25, 2
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <segSine_loadRow+0x1ba>
     d6c:	23 e0       	ldi	r18, 0x03	; 3
     d6e:	26 1b       	sub	r18, r22
     d70:	62 2f       	mov	r22, r18
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
     d72:	98 2f       	mov	r25, r24
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <segSine_loadRow+0x1c0>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
     d76:	90 53       	subi	r25, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
     d78:	90 33       	cpi	r25, 0x30	; 48
     d7a:	e8 f7       	brcc	.-6      	; 0xd76 <segSine_loadRow+0x1be>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
     d7c:	79 2f       	mov	r23, r25
     d7e:	73 70       	andi	r23, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
     d80:	92 ff       	sbrs	r25, 2
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <segSine_loadRow+0x1d2>
     d84:	23 e0       	ldi	r18, 0x03	; 3
     d86:	27 1b       	sub	r18, r23
     d88:	72 2f       	mov	r23, r18
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
     d8a:	28 2f       	mov	r18, r24
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <segSine_loadRow+0x1d8>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
     d8e:	20 53       	subi	r18, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
     d90:	20 33       	cpi	r18, 0x30	; 48
     d92:	e8 f7       	brcc	.-6      	; 0xd8e <segSine_loadRow+0x1d6>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
     d94:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
     d96:	a9 01       	movw	r20, r18
     d98:	40 73       	andi	r20, 0x30	; 48
     d9a:	50 70       	andi	r21, 0x00	; 0
     d9c:	a4 e0       	ldi	r26, 0x04	; 4
     d9e:	55 95       	asr	r21
     da0:	47 95       	ror	r20
     da2:	aa 95       	dec	r26
     da4:	e1 f7       	brne	.-8      	; 0xd9e <segSine_loadRow+0x1e6>
     da6:	54 2f       	mov	r21, r20
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
     da8:	26 ff       	sbrs	r18, 6
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <segSine_loadRow+0x1fe>
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	94 1b       	sub	r25, r20
     db0:	59 2f       	mov	r21, r25
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <segSine_loadRow+0x1fe>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
     db4:	80 53       	subi	r24, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
     db6:	80 33       	cpi	r24, 0x30	; 48
     db8:	e8 f7       	brcc	.-6      	; 0xdb4 <segSine_loadRow+0x1fc>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
     dba:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t G = ((value)&0x0C)>>2; 
     dbc:	9c 01       	movw	r18, r24
     dbe:	2c 70       	andi	r18, 0x0C	; 12
     dc0:	30 70       	andi	r19, 0x00	; 0
     dc2:	35 95       	asr	r19
     dc4:	27 95       	ror	r18
     dc6:	35 95       	asr	r19
     dc8:	27 95       	ror	r18
     dca:	42 2f       	mov	r20, r18
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
     dcc:	84 ff       	sbrs	r24, 4
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <segSine_loadRow+0x21e>
     dd0:	23 e0       	ldi	r18, 0x03	; 3
     dd2:	24 1b       	sub	r18, r20
     dd4:	42 2f       	mov	r20, r18
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	31 e0       	ldi	r19, 0x01	; 1
     dda:	21 1b       	sub	r18, r17
     ddc:	31 09       	sbc	r19, r1
     dde:	71 70       	andi	r23, 0x01	; 1
     de0:	63 70       	andi	r22, 0x03	; 3
     de2:	66 0f       	add	r22, r22
     de4:	67 2b       	or	r22, r23
     de6:	95 2f       	mov	r25, r21
     de8:	92 95       	swap	r25
     dea:	90 73       	andi	r25, 0x30	; 48
     dec:	90 64       	ori	r25, 0x40	; 64
     dee:	43 70       	andi	r20, 0x03	; 3
     df0:	49 2b       	or	r20, r25
     df2:	c9 01       	movw	r24, r18
     df4:	80 1b       	sub	r24, r16
     df6:	91 09       	sbc	r25, r1
     df8:	f7 dd       	rcall	.-1042   	; 0x9e8 <addSeg>

   addSegfb(3, _W);
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	67 e0       	ldi	r22, 0x07	; 7
     e00:	43 e7       	ldi	r20, 0x73	; 115
     e02:	f2 dd       	rcall	.-1052   	; 0x9e8 <addSeg>

   //Draw a sideways character...
   {
      addSegfb(3, _R);
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	67 e0       	ldi	r22, 0x07	; 7
     e0a:	40 e4       	ldi	r20, 0x40	; 64
     e0c:	ed dd       	rcall	.-1062   	; 0x9e8 <addSeg>
      // starting with the lower-case letters which are shifted down a row
      // and some garbage in the top row...
      // now I get that I'm reading weird memory locations, but this
      // doesn't seem right. I should be accessing outside the array 
      // altogether, no?    
      char thisChar = (rowNum/8)%('~'-' '+1) + ' '; //pgm_read_byte(&(string[rowNum/8])); 
     e0e:	c6 01       	movw	r24, r12
     e10:	6f e5       	ldi	r22, 0x5F	; 95
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	02 d2       	rcall	.+1028   	; 0x121a <__udivmodhi4>
     e16:	80 5e       	subi	r24, 0xE0	; 224
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	c7 01       	movw	r24, r14
     e1c:	87 70       	andi	r24, 0x07	; 7
     e1e:	90 70       	andi	r25, 0x00	; 0
     e20:	01 e0       	ldi	r16, 0x01	; 1
     e22:	10 e0       	ldi	r17, 0x00	; 0
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <segSine_loadRow+0x272>
     e26:	00 0f       	add	r16, r16
     e28:	11 1f       	adc	r17, r17
     e2a:	8a 95       	dec	r24
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <segSine_loadRow+0x26e>
     e2e:	e0 e8       	ldi	r30, 0x80	; 128
     e30:	ae 2e       	mov	r10, r30
     e32:	e2 e0       	ldi	r30, 0x02	; 2
     e34:	be 2e       	mov	r11, r30

      //Ironically, there are exactly the number of characters to be
      // displayed in 768 lines (plus one on the right, to center)
      for(i=8; i>0; i--)
      {
         if(getbit(rowNum%8, getCharRow(thisChar,i-1)))
     e36:	e9 81       	ldd	r30, Y+1	; 0x01
     e38:	c5 01       	movw	r24, r10
     e3a:	8e 0f       	add	r24, r30
     e3c:	91 1d       	adc	r25, r1
     e3e:	fc 01       	movw	r30, r24
     e40:	e4 5b       	subi	r30, 0xB4	; 180
     e42:	fe 4f       	sbci	r31, 0xFE	; 254
     e44:	84 91       	lpm	r24, Z
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	80 23       	and	r24, r16
     e4a:	91 23       	and	r25, r17
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	29 f0       	breq	.+10     	; 0xe5a <segSine_loadRow+0x2a2>
            addSegfb(1, _Y); //0x06, (4<<4) | 3);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	67 e0       	ldi	r22, 0x07	; 7
     e56:	43 e4       	ldi	r20, 0x43	; 67
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <segSine_loadRow+0x2aa>
         else
            addSegfb(1, _R); //0x06, (4<<4) | 0);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	67 e0       	ldi	r22, 0x07	; 7
     e60:	40 e4       	ldi	r20, 0x40	; 64
     e62:	c2 dd       	rcall	.-1148   	; 0x9e8 <addSeg>
     e64:	20 ea       	ldi	r18, 0xA0	; 160
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	a2 0e       	add	r10, r18
     e6a:	b3 1e       	adc	r11, r19
      char thisChar = (rowNum/8)%('~'-' '+1) + ' '; //pgm_read_byte(&(string[rowNum/8])); 
      //'A'; //string[rowNum/8];

      //Ironically, there are exactly the number of characters to be
      // displayed in 768 lines (plus one on the right, to center)
      for(i=8; i>0; i--)
     e6c:	30 e8       	ldi	r19, 0x80	; 128
     e6e:	a3 16       	cp	r10, r19
     e70:	3f ef       	ldi	r19, 0xFF	; 255
     e72:	b3 06       	cpc	r11, r19
     e74:	01 f7       	brne	.-64     	; 0xe36 <segSine_loadRow+0x27e>
            addSegfb(1, _Y); //0x06, (4<<4) | 3);
         else
            addSegfb(1, _R); //0x06, (4<<4) | 0);
      }

      addSegfb(3, _R); //0x06, (4<<4) | 0);
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	67 e0       	ldi	r22, 0x07	; 7
     e7c:	40 e4       	ldi	r20, 0x40	; 64
     e7e:	b4 dd       	rcall	.-1176   	; 0x9e8 <addSeg>

      addSegfb(1, _W); //0x04, (6<<4) | 3);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	67 e0       	ldi	r22, 0x07	; 7
     e86:	43 e7       	ldi	r20, 0x73	; 115
     e88:	af dd       	rcall	.-1186   	; 0x9e8 <addSeg>

      //PGM_P charPtr = strchrnul_P(
      PGM_P tqbf = PSTR(" The Quick Brown Fox Jumped Over The Lazy Dog! \177"); 
      //, rowNum/8);

      strncpy_P(&thisChar, tqbf+(rowNum/8), 1);
     e8a:	b6 01       	movw	r22, r12
     e8c:	64 5b       	subi	r22, 0xB4	; 180
     e8e:	7b 4f       	sbci	r23, 0xFB	; 251
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	32 d2       	rcall	.+1124   	; 0x12fe <strncpy_P>

      addSegfb(3, rgb(0,0,1));//_B); //0, (6<<4) | 0);
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	40 e5       	ldi	r20, 0x50	; 80
     ea2:	a2 dd       	rcall	.-1212   	; 0x9e8 <addSeg>

      if(rowNum/8 < strlen_P(tqbf))
     ea4:	8c e4       	ldi	r24, 0x4C	; 76
     ea6:	94 e0       	ldi	r25, 0x04	; 4
     ea8:	21 d2       	rcall	.+1090   	; 0x12ec <strlen_P>
     eaa:	c8 16       	cp	r12, r24
     eac:	d9 06       	cpc	r13, r25
     eae:	20 f5       	brcc	.+72     	; 0xef8 <segSine_loadRow+0x340>
     eb0:	70 e8       	ldi	r23, 0x80	; 128
     eb2:	c7 2e       	mov	r12, r23
     eb4:	72 e0       	ldi	r23, 0x02	; 2
     eb6:	d7 2e       	mov	r13, r23
      {
         for(i=8; i>0; i--)
         {
            if(getbit(rowNum%8, getCharRow(thisChar,i-1)))
     eb8:	e9 81       	ldd	r30, Y+1	; 0x01
     eba:	c6 01       	movw	r24, r12
     ebc:	8e 0f       	add	r24, r30
     ebe:	91 1d       	adc	r25, r1
     ec0:	fc 01       	movw	r30, r24
     ec2:	e4 5b       	subi	r30, 0xB4	; 180
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	84 91       	lpm	r24, Z
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	80 23       	and	r24, r16
     ecc:	91 23       	and	r25, r17
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	21 f0       	breq	.+8      	; 0xeda <segSine_loadRow+0x322>
               addSegfb(1, rgb(3,0,1));//_C); //0, (6<<4) | 3);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	67 e0       	ldi	r22, 0x07	; 7
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <segSine_loadRow+0x328>
            else
               addSegfb(1, rgb(0,0,1));//_B); //0, (6<<4) | 0);
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	40 e5       	ldi	r20, 0x50	; 80
     ee2:	82 dd       	rcall	.-1276   	; 0x9e8 <addSeg>
     ee4:	20 ea       	ldi	r18, 0xA0	; 160
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	c2 0e       	add	r12, r18
     eea:	d3 1e       	adc	r13, r19

      addSegfb(3, rgb(0,0,1));//_B); //0, (6<<4) | 0);

      if(rowNum/8 < strlen_P(tqbf))
      {
         for(i=8; i>0; i--)
     eec:	30 e8       	ldi	r19, 0x80	; 128
     eee:	c3 16       	cp	r12, r19
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	d3 06       	cpc	r13, r19
     ef4:	09 f7       	brne	.-62     	; 0xeb8 <segSine_loadRow+0x300>
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <segSine_loadRow+0x34a>
            else
               addSegfb(1, rgb(0,0,1));//_B); //0, (6<<4) | 0);
         }
      }
      else
         addSegfb(8, rgb(0,0,1));//_B); //0,(6<<4) | 0);
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	40 e5       	ldi	r20, 0x50	; 80
     f00:	73 dd       	rcall	.-1306   	; 0x9e8 <addSeg>

      addSegfb(3, rgb(0,0,1));//_B); //0,(6<<4)|0);
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	40 e5       	ldi	r20, 0x50	; 80
     f0a:	6e dd       	rcall	.-1316   	; 0x9e8 <addSeg>

   //newSeg(3,0x06,(4<<4) | 0);

   uint8_t i;
   for(i=0; i<64; i++)
      addSegfb(1, (i+rowNum/4)&0x3f);
     f0c:	f6 94       	lsr	r15
     f0e:	e7 94       	ror	r14
     f10:	f6 94       	lsr	r15
     f12:	e7 94       	ror	r14
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	4e 2d       	mov	r20, r14
     f18:	6e 2d       	mov	r22, r14
     f1a:	63 70       	andi	r22, 0x03	; 3
     f1c:	66 0f       	add	r22, r22
     f1e:	8e 2d       	mov	r24, r14
     f20:	81 70       	andi	r24, 0x01	; 1
     f22:	68 2b       	or	r22, r24
     f24:	40 73       	andi	r20, 0x30	; 48
     f26:	40 64       	ori	r20, 0x40	; 64
     f28:	c7 01       	movw	r24, r14
     f2a:	8c 70       	andi	r24, 0x0C	; 12
     f2c:	90 70       	andi	r25, 0x00	; 0
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	96 95       	lsr	r25
     f34:	87 95       	ror	r24
     f36:	48 2b       	or	r20, r24
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	55 dd       	rcall	.-1366   	; 0x9e8 <addSeg>
   }

   //newSeg(3,0x06,(4<<4) | 0);

   uint8_t i;
   for(i=0; i<64; i++)
     f3e:	1f 5f       	subi	r17, 0xFF	; 255
     f40:	08 94       	sec
     f42:	e1 1c       	adc	r14, r1
     f44:	f1 1c       	adc	r15, r1
     f46:	10 34       	cpi	r17, 0x40	; 64
     f48:	31 f7       	brne	.-52     	; 0xf16 <segSine_loadRow+0x35e>
      addSegfb(1, (i+rowNum/4)&0x3f);

   addSegfb(3, _W); //0x06, (6<<4) | 3);
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	67 e0       	ldi	r22, 0x07	; 7
     f50:	43 e7       	ldi	r20, 0x73	; 115
     f52:	4a dd       	rcall	.-1388   	; 0x9e8 <addSeg>

   segTerminate();
     f54:	ae dc       	rcall	.-1700   	; 0x8b2 <segTerminate>
}
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	bf 90       	pop	r11
     f6a:	af 90       	pop	r10
     f6c:	9f 90       	pop	r9
     f6e:	08 95       	ret

00000f70 <__vector_14>:
//Nearly everything display-related happens in this interrupt
// It even calls the functions that load (and calculate!) the data for the
// next row.
// So basically, the entire project is running via timer-interrupt.
SIGNAL(TIMER0_COMPA_vect)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	// (otherwise there's not much guarantee that register-assignments
	//  later will align with the LVDS frame... though ALIGN should help)
	// see scopeHsync.c


	if(updateLCD())
     f92:	ab dd       	rcall	.-1194   	; 0xaea <updateLCD>
     f94:	88 23       	and	r24, r24
     f96:	29 f0       	breq	.+10     	; 0xfa2 <__vector_14+0x32>
	{
		frameCount++;
     f98:	80 91 69 00 	lds	r24, 0x0069
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	80 93 69 00 	sts	0x0069, r24
	//Load the next row into the row(seg)buffer
	//data is enabled after T_VD+T_Vlow...
	//a/o v60: Rereading this is confusing...
	// Basically, there's no reason to call loadRow for display-lines
	// which don't display data (e.g. V-Sync)
	if((hsyncCount >= T_VD+T_Vlow) && (hsyncCount < T_VD+T_Vlow+V_COUNT))
     fa2:	80 91 62 00 	lds	r24, 0x0062
     fa6:	90 91 63 00 	lds	r25, 0x0063
     faa:	83 97       	sbiw	r24, 0x23	; 35
     fac:	23 e0       	ldi	r18, 0x03	; 3
     fae:	80 30       	cpi	r24, 0x00	; 0
     fb0:	92 07       	cpc	r25, r18
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <__vector_14+0x46>
 #elif (defined(SEG_HFM) && SEG_HFM)
 	segHFM_loadRow(rowNum);
 #elif (defined(SEG_QUESTION) && SEG_QUESTION)
 	segQuestion_loadRow(rowNum);
 #elif (defined(SEG_SINE) && SEG_SINE)
 	segSine_loadRow(rowNum);
     fb4:	01 de       	rcall	.-1022   	; 0xbb8 <segSine_loadRow>
	// to load a row to a row-buffer (as opposed to a frame-buffer)
	// thus, DE could gain more pixels because there would be fewer
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...
}
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <vfprintf>:
     fd8:	ab e0       	ldi	r26, 0x0B	; 11
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e1 ef       	ldi	r30, 0xF1	; 241
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	47 c1       	rjmp	.+654    	; 0x1270 <__prologue_saves__+0x8>
     fe2:	6c 01       	movw	r12, r24
     fe4:	4b 01       	movw	r8, r22
     fe6:	7a 01       	movw	r14, r20
     fe8:	fc 01       	movw	r30, r24
     fea:	17 82       	std	Z+7, r1	; 0x07
     fec:	16 82       	std	Z+6, r1	; 0x06
     fee:	83 81       	ldd	r24, Z+3	; 0x03
     ff0:	81 fd       	sbrc	r24, 1
     ff2:	08 c0       	rjmp	.+16     	; 0x1004 <vfprintf+0x2c>
     ff4:	2f ef       	ldi	r18, 0xFF	; 255
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	fa c0       	rjmp	.+500    	; 0x11ee <vfprintf+0x216>
     ffa:	22 e0       	ldi	r18, 0x02	; 2
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	e2 0e       	add	r14, r18
    1000:	f3 1e       	adc	r15, r19
    1002:	04 c0       	rjmp	.+8      	; 0x100c <vfprintf+0x34>
    1004:	5e 01       	movw	r10, r28
    1006:	08 94       	sec
    1008:	a1 1c       	adc	r10, r1
    100a:	b1 1c       	adc	r11, r1
    100c:	f6 01       	movw	r30, r12
    100e:	73 80       	ldd	r7, Z+3	; 0x03
    1010:	f4 01       	movw	r30, r8
    1012:	73 fc       	sbrc	r7, 3
    1014:	85 91       	lpm	r24, Z+
    1016:	73 fe       	sbrs	r7, 3
    1018:	81 91       	ld	r24, Z+
    101a:	4f 01       	movw	r8, r30
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <vfprintf+0x4a>
    1020:	e3 c0       	rjmp	.+454    	; 0x11e8 <vfprintf+0x210>
    1022:	85 32       	cpi	r24, 0x25	; 37
    1024:	51 f4       	brne	.+20     	; 0x103a <vfprintf+0x62>
    1026:	73 fc       	sbrc	r7, 3
    1028:	05 91       	lpm	r16, Z+
    102a:	73 fe       	sbrs	r7, 3
    102c:	01 91       	ld	r16, Z+
    102e:	4f 01       	movw	r8, r30
    1030:	05 32       	cpi	r16, 0x25	; 37
    1032:	11 f0       	breq	.+4      	; 0x1038 <vfprintf+0x60>
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	1a c0       	rjmp	.+52     	; 0x106c <vfprintf+0x94>
    1038:	85 e2       	ldi	r24, 0x25	; 37
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	29 c0       	rjmp	.+82     	; 0x1090 <vfprintf+0xb8>
    103e:	00 23       	and	r16, r16
    1040:	09 f4       	brne	.+2      	; 0x1044 <vfprintf+0x6c>
    1042:	d2 c0       	rjmp	.+420    	; 0x11e8 <vfprintf+0x210>
    1044:	84 e8       	ldi	r24, 0x84	; 132
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	60 2f       	mov	r22, r16
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	44 d1       	rcall	.+648    	; 0x12d6 <strchr_P>
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	39 f4       	brne	.+14     	; 0x1060 <vfprintf+0x88>
    1052:	03 32       	cpi	r16, 0x23	; 35
    1054:	11 f4       	brne	.+4      	; 0x105a <vfprintf+0x82>
    1056:	10 61       	ori	r17, 0x10	; 16
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x88>
    105a:	0c 36       	cpi	r16, 0x6C	; 108
    105c:	61 f4       	brne	.+24     	; 0x1076 <vfprintf+0x9e>
    105e:	10 68       	ori	r17, 0x80	; 128
    1060:	f4 01       	movw	r30, r8
    1062:	73 fc       	sbrc	r7, 3
    1064:	05 91       	lpm	r16, Z+
    1066:	73 fe       	sbrs	r7, 3
    1068:	01 91       	ld	r16, Z+
    106a:	4f 01       	movw	r8, r30
    106c:	17 ff       	sbrs	r17, 7
    106e:	e7 cf       	rjmp	.-50     	; 0x103e <vfprintf+0x66>
    1070:	00 23       	and	r16, r16
    1072:	09 f4       	brne	.+2      	; 0x1076 <vfprintf+0x9e>
    1074:	b9 c0       	rjmp	.+370    	; 0x11e8 <vfprintf+0x210>
    1076:	8d e7       	ldi	r24, 0x7D	; 125
    1078:	94 e0       	ldi	r25, 0x04	; 4
    107a:	60 2f       	mov	r22, r16
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	2b d1       	rcall	.+598    	; 0x12d6 <strchr_P>
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	49 f0       	breq	.+18     	; 0x1096 <vfprintf+0xbe>
    1084:	24 e0       	ldi	r18, 0x04	; 4
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	e2 0e       	add	r14, r18
    108a:	f3 1e       	adc	r15, r19
    108c:	8f e3       	ldi	r24, 0x3F	; 63
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	b6 01       	movw	r22, r12
    1092:	44 d1       	rcall	.+648    	; 0x131c <fputc>
    1094:	bb cf       	rjmp	.-138    	; 0x100c <vfprintf+0x34>
    1096:	03 36       	cpi	r16, 0x63	; 99
    1098:	29 f0       	breq	.+10     	; 0x10a4 <vfprintf+0xcc>
    109a:	03 37       	cpi	r16, 0x73	; 115
    109c:	71 f0       	breq	.+28     	; 0x10ba <vfprintf+0xe2>
    109e:	03 35       	cpi	r16, 0x53	; 83
    10a0:	e1 f4       	brne	.+56     	; 0x10da <vfprintf+0x102>
    10a2:	0a c0       	rjmp	.+20     	; 0x10b8 <vfprintf+0xe0>
    10a4:	87 01       	movw	r16, r14
    10a6:	0e 5f       	subi	r16, 0xFE	; 254
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	f7 01       	movw	r30, r14
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	b6 01       	movw	r22, r12
    10b2:	34 d1       	rcall	.+616    	; 0x131c <fputc>
    10b4:	78 01       	movw	r14, r16
    10b6:	aa cf       	rjmp	.-172    	; 0x100c <vfprintf+0x34>
    10b8:	11 60       	ori	r17, 0x01	; 1
    10ba:	f7 01       	movw	r30, r14
    10bc:	60 80       	ld	r6, Z
    10be:	71 80       	ldd	r7, Z+1	; 0x01
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <vfprintf+0xf0>
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	b6 01       	movw	r22, r12
    10c6:	2a d1       	rcall	.+596    	; 0x131c <fputc>
    10c8:	f3 01       	movw	r30, r6
    10ca:	10 fd       	sbrc	r17, 0
    10cc:	85 91       	lpm	r24, Z+
    10ce:	10 ff       	sbrs	r17, 0
    10d0:	81 91       	ld	r24, Z+
    10d2:	3f 01       	movw	r6, r30
    10d4:	88 23       	and	r24, r24
    10d6:	a9 f7       	brne	.-22     	; 0x10c2 <vfprintf+0xea>
    10d8:	90 cf       	rjmp	.-224    	; 0xffa <vfprintf+0x22>
    10da:	04 36       	cpi	r16, 0x64	; 100
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <vfprintf+0x10a>
    10de:	09 36       	cpi	r16, 0x69	; 105
    10e0:	29 f5       	brne	.+74     	; 0x112c <vfprintf+0x154>
    10e2:	17 ff       	sbrs	r17, 7
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <vfprintf+0x11e>
    10e6:	f7 01       	movw	r30, r14
    10e8:	60 81       	ld	r22, Z
    10ea:	71 81       	ldd	r23, Z+1	; 0x01
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	93 81       	ldd	r25, Z+3	; 0x03
    10f0:	24 e0       	ldi	r18, 0x04	; 4
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	0a c0       	rjmp	.+20     	; 0x110a <vfprintf+0x132>
    10f6:	f7 01       	movw	r30, r14
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	b9 01       	movw	r22, r18
    10fe:	88 27       	eor	r24, r24
    1100:	77 fd       	sbrc	r23, 7
    1102:	80 95       	com	r24
    1104:	98 2f       	mov	r25, r24
    1106:	22 e0       	ldi	r18, 0x02	; 2
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	e2 0e       	add	r14, r18
    110c:	f3 1e       	adc	r15, r19
    110e:	1f 7e       	andi	r17, 0xEF	; 239
    1110:	97 ff       	sbrs	r25, 7
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <vfprintf+0x14c>
    1114:	90 95       	com	r25
    1116:	80 95       	com	r24
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	10 64       	ori	r17, 0x40	; 64
    1124:	a5 01       	movw	r20, r10
    1126:	2a e0       	ldi	r18, 0x0A	; 10
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	33 c0       	rjmp	.+102    	; 0x1192 <vfprintf+0x1ba>
    112c:	00 37       	cpi	r16, 0x70	; 112
    112e:	a9 f0       	breq	.+42     	; 0x115a <vfprintf+0x182>
    1130:	01 37       	cpi	r16, 0x71	; 113
    1132:	30 f4       	brcc	.+12     	; 0x1140 <vfprintf+0x168>
    1134:	08 35       	cpi	r16, 0x58	; 88
    1136:	b1 f0       	breq	.+44     	; 0x1164 <vfprintf+0x18c>
    1138:	0f 36       	cpi	r16, 0x6F	; 111
    113a:	09 f0       	breq	.+2      	; 0x113e <vfprintf+0x166>
    113c:	55 c0       	rjmp	.+170    	; 0x11e8 <vfprintf+0x210>
    113e:	06 c0       	rjmp	.+12     	; 0x114c <vfprintf+0x174>
    1140:	05 37       	cpi	r16, 0x75	; 117
    1142:	39 f0       	breq	.+14     	; 0x1152 <vfprintf+0x17a>
    1144:	08 37       	cpi	r16, 0x78	; 120
    1146:	09 f0       	breq	.+2      	; 0x114a <vfprintf+0x172>
    1148:	4f c0       	rjmp	.+158    	; 0x11e8 <vfprintf+0x210>
    114a:	08 c0       	rjmp	.+16     	; 0x115c <vfprintf+0x184>
    114c:	28 e0       	ldi	r18, 0x08	; 8
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	0c c0       	rjmp	.+24     	; 0x116a <vfprintf+0x192>
    1152:	1f 7e       	andi	r17, 0xEF	; 239
    1154:	2a e0       	ldi	r18, 0x0A	; 10
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	08 c0       	rjmp	.+16     	; 0x116a <vfprintf+0x192>
    115a:	10 61       	ori	r17, 0x10	; 16
    115c:	14 62       	ori	r17, 0x24	; 36
    115e:	20 e1       	ldi	r18, 0x10	; 16
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	03 c0       	rjmp	.+6      	; 0x116a <vfprintf+0x192>
    1164:	14 60       	ori	r17, 0x04	; 4
    1166:	20 e1       	ldi	r18, 0x10	; 16
    1168:	32 e0       	ldi	r19, 0x02	; 2
    116a:	17 ff       	sbrs	r17, 7
    116c:	08 c0       	rjmp	.+16     	; 0x117e <vfprintf+0x1a6>
    116e:	f7 01       	movw	r30, r14
    1170:	60 81       	ld	r22, Z
    1172:	71 81       	ldd	r23, Z+1	; 0x01
    1174:	82 81       	ldd	r24, Z+2	; 0x02
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	44 e0       	ldi	r20, 0x04	; 4
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	07 c0       	rjmp	.+14     	; 0x118c <vfprintf+0x1b4>
    117e:	f7 01       	movw	r30, r14
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	42 e0       	ldi	r20, 0x02	; 2
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	e4 0e       	add	r14, r20
    118e:	f5 1e       	adc	r15, r21
    1190:	a5 01       	movw	r20, r10
    1192:	f0 d0       	rcall	.+480    	; 0x1374 <__ultoa_invert>
    1194:	08 2f       	mov	r16, r24
    1196:	0a 19       	sub	r16, r10
    1198:	61 2e       	mov	r6, r17
    119a:	77 24       	eor	r7, r7
    119c:	16 ff       	sbrs	r17, 6
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <vfprintf+0x1d0>
    11a0:	8d e2       	ldi	r24, 0x2D	; 45
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	b6 01       	movw	r22, r12
    11a6:	ba d0       	rcall	.+372    	; 0x131c <fputc>
    11a8:	64 fe       	sbrs	r6, 4
    11aa:	13 c0       	rjmp	.+38     	; 0x11d2 <vfprintf+0x1fa>
    11ac:	fe 01       	movw	r30, r28
    11ae:	e0 0f       	add	r30, r16
    11b0:	f1 1d       	adc	r31, r1
    11b2:	80 81       	ld	r24, Z
    11b4:	80 33       	cpi	r24, 0x30	; 48
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <vfprintf+0x1fa>
    11b8:	80 e3       	ldi	r24, 0x30	; 48
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	b6 01       	movw	r22, r12
    11be:	ae d0       	rcall	.+348    	; 0x131c <fputc>
    11c0:	62 fe       	sbrs	r6, 2
    11c2:	07 c0       	rjmp	.+14     	; 0x11d2 <vfprintf+0x1fa>
    11c4:	c3 01       	movw	r24, r6
    11c6:	80 72       	andi	r24, 0x20	; 32
    11c8:	90 70       	andi	r25, 0x00	; 0
    11ca:	88 5a       	subi	r24, 0xA8	; 168
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	b6 01       	movw	r22, r12
    11d0:	a5 d0       	rcall	.+330    	; 0x131c <fputc>
    11d2:	01 50       	subi	r16, 0x01	; 1
    11d4:	f5 01       	movw	r30, r10
    11d6:	e0 0f       	add	r30, r16
    11d8:	f1 1d       	adc	r31, r1
    11da:	80 81       	ld	r24, Z
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	b6 01       	movw	r22, r12
    11e0:	9d d0       	rcall	.+314    	; 0x131c <fputc>
    11e2:	00 23       	and	r16, r16
    11e4:	b1 f7       	brne	.-20     	; 0x11d2 <vfprintf+0x1fa>
    11e6:	12 cf       	rjmp	.-476    	; 0x100c <vfprintf+0x34>
    11e8:	f6 01       	movw	r30, r12
    11ea:	26 81       	ldd	r18, Z+6	; 0x06
    11ec:	37 81       	ldd	r19, Z+7	; 0x07
    11ee:	c9 01       	movw	r24, r18
    11f0:	2b 96       	adiw	r28, 0x0b	; 11
    11f2:	ee e0       	ldi	r30, 0x0E	; 14
    11f4:	59 c0       	rjmp	.+178    	; 0x12a8 <__epilogue_restores__+0x8>

000011f6 <__mulhi3>:
    11f6:	55 27       	eor	r21, r21
    11f8:	00 24       	eor	r0, r0

000011fa <__mulhi3_loop>:
    11fa:	80 ff       	sbrs	r24, 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <__mulhi3_skip1>
    11fe:	06 0e       	add	r0, r22
    1200:	57 1f       	adc	r21, r23

00001202 <__mulhi3_skip1>:
    1202:	66 0f       	add	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	61 15       	cp	r22, r1
    1208:	71 05       	cpc	r23, r1
    120a:	21 f0       	breq	.+8      	; 0x1214 <__mulhi3_exit>
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	99 f7       	brne	.-26     	; 0x11fa <__mulhi3_loop>

00001214 <__mulhi3_exit>:
    1214:	95 2f       	mov	r25, r21
    1216:	80 2d       	mov	r24, r0
    1218:	08 95       	ret

0000121a <__udivmodhi4>:
    121a:	aa 1b       	sub	r26, r26
    121c:	bb 1b       	sub	r27, r27
    121e:	51 e1       	ldi	r21, 0x11	; 17
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <__udivmodhi4_ep>

00001222 <__udivmodhi4_loop>:
    1222:	aa 1f       	adc	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	a6 17       	cp	r26, r22
    1228:	b7 07       	cpc	r27, r23
    122a:	10 f0       	brcs	.+4      	; 0x1230 <__udivmodhi4_ep>
    122c:	a6 1b       	sub	r26, r22
    122e:	b7 0b       	sbc	r27, r23

00001230 <__udivmodhi4_ep>:
    1230:	88 1f       	adc	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	5a 95       	dec	r21
    1236:	a9 f7       	brne	.-22     	; 0x1222 <__udivmodhi4_loop>
    1238:	80 95       	com	r24
    123a:	90 95       	com	r25
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	08 95       	ret

00001242 <__divmodhi4>:
    1242:	97 fb       	bst	r25, 7
    1244:	09 2e       	mov	r0, r25
    1246:	07 26       	eor	r0, r23
    1248:	0a d0       	rcall	.+20     	; 0x125e <__divmodhi4_neg1>
    124a:	77 fd       	sbrc	r23, 7
    124c:	04 d0       	rcall	.+8      	; 0x1256 <__divmodhi4_neg2>
    124e:	e5 df       	rcall	.-54     	; 0x121a <__udivmodhi4>
    1250:	06 d0       	rcall	.+12     	; 0x125e <__divmodhi4_neg1>
    1252:	00 20       	and	r0, r0
    1254:	1a f4       	brpl	.+6      	; 0x125c <__divmodhi4_exit>

00001256 <__divmodhi4_neg2>:
    1256:	70 95       	com	r23
    1258:	61 95       	neg	r22
    125a:	7f 4f       	sbci	r23, 0xFF	; 255

0000125c <__divmodhi4_exit>:
    125c:	08 95       	ret

0000125e <__divmodhi4_neg1>:
    125e:	f6 f7       	brtc	.-4      	; 0x125c <__divmodhi4_exit>
    1260:	90 95       	com	r25
    1262:	81 95       	neg	r24
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	08 95       	ret

00001268 <__prologue_saves__>:
    1268:	2f 92       	push	r2
    126a:	3f 92       	push	r3
    126c:	4f 92       	push	r4
    126e:	5f 92       	push	r5
    1270:	6f 92       	push	r6
    1272:	7f 92       	push	r7
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	ca 1b       	sub	r28, r26
    1292:	db 0b       	sbc	r29, r27
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	09 94       	ijmp

000012a0 <__epilogue_restores__>:
    12a0:	2a 88       	ldd	r2, Y+18	; 0x12
    12a2:	39 88       	ldd	r3, Y+17	; 0x11
    12a4:	48 88       	ldd	r4, Y+16	; 0x10
    12a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    12a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    12aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    12b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    12b2:	b9 84       	ldd	r11, Y+9	; 0x09
    12b4:	c8 84       	ldd	r12, Y+8	; 0x08
    12b6:	df 80       	ldd	r13, Y+7	; 0x07
    12b8:	ee 80       	ldd	r14, Y+6	; 0x06
    12ba:	fd 80       	ldd	r15, Y+5	; 0x05
    12bc:	0c 81       	ldd	r16, Y+4	; 0x04
    12be:	1b 81       	ldd	r17, Y+3	; 0x03
    12c0:	aa 81       	ldd	r26, Y+2	; 0x02
    12c2:	b9 81       	ldd	r27, Y+1	; 0x01
    12c4:	ce 0f       	add	r28, r30
    12c6:	d1 1d       	adc	r29, r1
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	ed 01       	movw	r28, r26
    12d4:	08 95       	ret

000012d6 <strchr_P>:
    12d6:	fc 01       	movw	r30, r24
    12d8:	05 90       	lpm	r0, Z+
    12da:	06 16       	cp	r0, r22
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <strchr_P+0x10>
    12de:	00 20       	and	r0, r0
    12e0:	d9 f7       	brne	.-10     	; 0x12d8 <strchr_P+0x2>
    12e2:	c0 01       	movw	r24, r0
    12e4:	08 95       	ret
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	cf 01       	movw	r24, r30
    12ea:	08 95       	ret

000012ec <strlen_P>:
    12ec:	fc 01       	movw	r30, r24
    12ee:	05 90       	lpm	r0, Z+
    12f0:	00 20       	and	r0, r0
    12f2:	e9 f7       	brne	.-6      	; 0x12ee <strlen_P+0x2>
    12f4:	80 95       	com	r24
    12f6:	90 95       	com	r25
    12f8:	8e 0f       	add	r24, r30
    12fa:	9f 1f       	adc	r25, r31
    12fc:	08 95       	ret

000012fe <strncpy_P>:
    12fe:	fb 01       	movw	r30, r22
    1300:	dc 01       	movw	r26, r24
    1302:	41 50       	subi	r20, 0x01	; 1
    1304:	50 40       	sbci	r21, 0x00	; 0
    1306:	48 f0       	brcs	.+18     	; 0x131a <strncpy_P+0x1c>
    1308:	05 90       	lpm	r0, Z+
    130a:	0d 92       	st	X+, r0
    130c:	00 20       	and	r0, r0
    130e:	c9 f7       	brne	.-14     	; 0x1302 <strncpy_P+0x4>
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <strncpy_P+0x16>
    1312:	1d 92       	st	X+, r1
    1314:	41 50       	subi	r20, 0x01	; 1
    1316:	50 40       	sbci	r21, 0x00	; 0
    1318:	e0 f7       	brcc	.-8      	; 0x1312 <strncpy_P+0x14>
    131a:	08 95       	ret

0000131c <fputc>:
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	8c 01       	movw	r16, r24
    1326:	eb 01       	movw	r28, r22
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	81 ff       	sbrs	r24, 1
    132c:	1b c0       	rjmp	.+54     	; 0x1364 <fputc+0x48>
    132e:	82 ff       	sbrs	r24, 2
    1330:	0d c0       	rjmp	.+26     	; 0x134c <fputc+0x30>
    1332:	2e 81       	ldd	r18, Y+6	; 0x06
    1334:	3f 81       	ldd	r19, Y+7	; 0x07
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	28 17       	cp	r18, r24
    133c:	39 07       	cpc	r19, r25
    133e:	64 f4       	brge	.+24     	; 0x1358 <fputc+0x3c>
    1340:	e8 81       	ld	r30, Y
    1342:	f9 81       	ldd	r31, Y+1	; 0x01
    1344:	01 93       	st	Z+, r16
    1346:	f9 83       	std	Y+1, r31	; 0x01
    1348:	e8 83       	st	Y, r30
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <fputc+0x3c>
    134c:	e8 85       	ldd	r30, Y+8	; 0x08
    134e:	f9 85       	ldd	r31, Y+9	; 0x09
    1350:	80 2f       	mov	r24, r16
    1352:	09 95       	icall
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	31 f4       	brne	.+12     	; 0x1364 <fputc+0x48>
    1358:	8e 81       	ldd	r24, Y+6	; 0x06
    135a:	9f 81       	ldd	r25, Y+7	; 0x07
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	9f 83       	std	Y+7, r25	; 0x07
    1360:	8e 83       	std	Y+6, r24	; 0x06
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <fputc+0x4c>
    1364:	0f ef       	ldi	r16, 0xFF	; 255
    1366:	1f ef       	ldi	r17, 0xFF	; 255
    1368:	c8 01       	movw	r24, r16
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	08 95       	ret

00001374 <__ultoa_invert>:
    1374:	fa 01       	movw	r30, r20
    1376:	aa 27       	eor	r26, r26
    1378:	28 30       	cpi	r18, 0x08	; 8
    137a:	61 f1       	breq	.+88     	; 0x13d4 <__ultoa_invert+0x60>
    137c:	20 31       	cpi	r18, 0x10	; 16
    137e:	91 f1       	breq	.+100    	; 0x13e4 <__ultoa_invert+0x70>
    1380:	e8 94       	clt
    1382:	6f 93       	push	r22
    1384:	6e 7f       	andi	r22, 0xFE	; 254
    1386:	6e 5f       	subi	r22, 0xFE	; 254
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	af 4f       	sbci	r26, 0xFF	; 255
    1390:	b1 e0       	ldi	r27, 0x01	; 1
    1392:	40 d0       	rcall	.+128    	; 0x1414 <__ultoa_invert+0xa0>
    1394:	b4 e0       	ldi	r27, 0x04	; 4
    1396:	3e d0       	rcall	.+124    	; 0x1414 <__ultoa_invert+0xa0>
    1398:	67 0f       	add	r22, r23
    139a:	78 1f       	adc	r23, r24
    139c:	89 1f       	adc	r24, r25
    139e:	9a 1f       	adc	r25, r26
    13a0:	a1 1d       	adc	r26, r1
    13a2:	68 0f       	add	r22, r24
    13a4:	79 1f       	adc	r23, r25
    13a6:	8a 1f       	adc	r24, r26
    13a8:	91 1d       	adc	r25, r1
    13aa:	a1 1d       	adc	r26, r1
    13ac:	6a 0f       	add	r22, r26
    13ae:	71 1d       	adc	r23, r1
    13b0:	81 1d       	adc	r24, r1
    13b2:	91 1d       	adc	r25, r1
    13b4:	a1 1d       	adc	r26, r1
    13b6:	22 d0       	rcall	.+68     	; 0x13fc <__ultoa_invert+0x88>
    13b8:	09 f4       	brne	.+2      	; 0x13bc <__ultoa_invert+0x48>
    13ba:	68 94       	set
    13bc:	3f 91       	pop	r19
    13be:	06 2e       	mov	r0, r22
    13c0:	00 0c       	add	r0, r0
    13c2:	30 19       	sub	r19, r0
    13c4:	00 0c       	add	r0, r0
    13c6:	00 0c       	add	r0, r0
    13c8:	30 19       	sub	r19, r0
    13ca:	30 5d       	subi	r19, 0xD0	; 208
    13cc:	31 93       	st	Z+, r19
    13ce:	ce f6       	brtc	.-78     	; 0x1382 <__ultoa_invert+0xe>
    13d0:	cf 01       	movw	r24, r30
    13d2:	08 95       	ret
    13d4:	46 2f       	mov	r20, r22
    13d6:	47 70       	andi	r20, 0x07	; 7
    13d8:	40 5d       	subi	r20, 0xD0	; 208
    13da:	41 93       	st	Z+, r20
    13dc:	b3 e0       	ldi	r27, 0x03	; 3
    13de:	0f d0       	rcall	.+30     	; 0x13fe <__ultoa_invert+0x8a>
    13e0:	c9 f7       	brne	.-14     	; 0x13d4 <__ultoa_invert+0x60>
    13e2:	f6 cf       	rjmp	.-20     	; 0x13d0 <__ultoa_invert+0x5c>
    13e4:	46 2f       	mov	r20, r22
    13e6:	4f 70       	andi	r20, 0x0F	; 15
    13e8:	40 5d       	subi	r20, 0xD0	; 208
    13ea:	4a 33       	cpi	r20, 0x3A	; 58
    13ec:	18 f0       	brcs	.+6      	; 0x13f4 <__ultoa_invert+0x80>
    13ee:	49 5d       	subi	r20, 0xD9	; 217
    13f0:	31 fd       	sbrc	r19, 1
    13f2:	40 52       	subi	r20, 0x20	; 32
    13f4:	41 93       	st	Z+, r20
    13f6:	02 d0       	rcall	.+4      	; 0x13fc <__ultoa_invert+0x88>
    13f8:	a9 f7       	brne	.-22     	; 0x13e4 <__ultoa_invert+0x70>
    13fa:	ea cf       	rjmp	.-44     	; 0x13d0 <__ultoa_invert+0x5c>
    13fc:	b4 e0       	ldi	r27, 0x04	; 4
    13fe:	a6 95       	lsr	r26
    1400:	97 95       	ror	r25
    1402:	87 95       	ror	r24
    1404:	77 95       	ror	r23
    1406:	67 95       	ror	r22
    1408:	ba 95       	dec	r27
    140a:	c9 f7       	brne	.-14     	; 0x13fe <__ultoa_invert+0x8a>
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	61 05       	cpc	r22, r1
    1410:	71 05       	cpc	r23, r1
    1412:	08 95       	ret
    1414:	9b 01       	movw	r18, r22
    1416:	ac 01       	movw	r20, r24
    1418:	0a 2e       	mov	r0, r26
    141a:	06 94       	lsr	r0
    141c:	57 95       	ror	r21
    141e:	47 95       	ror	r20
    1420:	37 95       	ror	r19
    1422:	27 95       	ror	r18
    1424:	ba 95       	dec	r27
    1426:	c9 f7       	brne	.-14     	; 0x141a <__ultoa_invert+0xa6>
    1428:	62 0f       	add	r22, r18
    142a:	73 1f       	adc	r23, r19
    142c:	84 1f       	adc	r24, r20
    142e:	95 1f       	adc	r25, r21
    1430:	a0 1d       	adc	r26, r0
    1432:	08 95       	ret

00001434 <_exit>:
    1434:	f8 94       	cli

00001436 <__stop_program>:
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <__stop_program>
