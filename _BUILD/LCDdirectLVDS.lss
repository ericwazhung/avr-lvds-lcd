
_BUILD/LCDdirectLVDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001c16  00001caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000125  00800152  00800152  00001cfc  2**0
                  ALLOC
  3 .stab         000054d8  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021e1  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000093b5  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000064e  00000000  00000000  000093c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f7  00000000  00000000  00009a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0000a00b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023d  00000000  00000000  0000a028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 df 03 	jmp	0x7be	; 0x7be <__ctors_end>
       4:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
       8:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
       c:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      10:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      14:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      18:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      1c:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      20:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      24:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      28:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      2c:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_11>
      30:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      34:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      38:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      3c:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      40:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      44:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      48:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      4c:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__bad_interrupt>
      50:	b3 0a       	sbc	r11, r19
      52:	b3 0a       	sbc	r11, r19
      54:	b3 0a       	sbc	r11, r19
      56:	b3 0a       	sbc	r11, r19
      58:	b5 0a       	sbc	r11, r21
      5a:	b5 0a       	sbc	r11, r21
      5c:	b5 0a       	sbc	r11, r21
      5e:	a4 0a       	sbc	r10, r20
      60:	a4 0a       	sbc	r10, r20
      62:	a4 0a       	sbc	r10, r20
      64:	a6 0a       	sbc	r10, r22
      66:	a6 0a       	sbc	r10, r22
      68:	a6 0a       	sbc	r10, r22
      6a:	a8 0a       	sbc	r10, r24
      6c:	a8 0a       	sbc	r10, r24
      6e:	a8 0a       	sbc	r10, r24
      70:	ca 0a       	sbc	r12, r26
      72:	ca 0a       	sbc	r12, r26
      74:	ca 0a       	sbc	r12, r26
      76:	ce 0a       	sbc	r12, r30
      78:	ce 0a       	sbc	r12, r30
      7a:	cc 0a       	sbc	r12, r28
      7c:	cc 0a       	sbc	r12, r28
      7e:	ce 0a       	sbc	r12, r30
      80:	ce 0a       	sbc	r12, r30
      82:	ca 0a       	sbc	r12, r26
      84:	ca 0a       	sbc	r12, r26
      86:	ca 0a       	sbc	r12, r26

00000088 <__trampolines_end>:
      88:	00 00       	nop
      8a:	92 01       	movw	r18, r4
      8c:	24 03       	mulsu	r18, r20
      8e:	b6 04       	cpc	r11, r6
      90:	48 06       	cpc	r4, r24
      92:	d9 07       	cpc	r29, r25
      94:	6a 09       	sbc	r22, r10
      96:	fb 0a       	sbc	r15, r27
      98:	8c 0c       	add	r8, r12
      9a:	1c 0e       	add	r1, r28
      9c:	ab 0f       	add	r26, r27
      9e:	3a 11       	cpse	r19, r10
      a0:	c8 12       	cpse	r12, r24
      a2:	55 14       	cp	r5, r5
      a4:	e2 15       	cp	r30, r2
      a6:	6e 17       	cp	r22, r30
      a8:	f9 18       	sub	r15, r9
      aa:	82 1a       	sub	r8, r18
      ac:	0b 1c       	adc	r0, r11
      ae:	93 1d       	adc	r25, r3
      b0:	1a 1f       	adc	r17, r26
      b2:	9f 20       	and	r9, r15
      b4:	23 22       	and	r2, r19
      b6:	a6 23       	and	r26, r22
      b8:	28 25       	eor	r18, r8
      ba:	a8 26       	eor	r10, r24
      bc:	26 28       	or	r2, r6
      be:	a3 29       	or	r26, r3
      c0:	1f 2b       	or	r17, r31
      c2:	99 2c       	mov	r9, r9
      c4:	11 2e       	mov	r1, r17
      c6:	87 2f       	mov	r24, r23
      c8:	fb 30       	cpi	r31, 0x0B	; 11
      ca:	6e 32       	cpi	r22, 0x2E	; 46
      cc:	df 33       	cpi	r29, 0x3F	; 63
      ce:	4d 35       	cpi	r20, 0x5D	; 93
      d0:	ba 36       	cpi	r27, 0x6A	; 106
      d2:	24 38       	cpi	r18, 0x84	; 132
      d4:	8c 39       	cpi	r24, 0x9C	; 156
      d6:	f2 3a       	cpi	r31, 0xA2	; 162
      d8:	56 3c       	cpi	r21, 0xC6	; 198
      da:	b8 3d       	cpi	r27, 0xD8	; 216
      dc:	17 3f       	cpi	r17, 0xF7	; 247
      de:	73 40       	sbci	r23, 0x03	; 3
      e0:	ce 41       	sbci	r28, 0x1E	; 30
      e2:	25 43       	sbci	r18, 0x35	; 53
      e4:	7a 44       	sbci	r23, 0x4A	; 74
      e6:	cd 45       	sbci	r28, 0x5D	; 93
      e8:	1c 47       	sbci	r17, 0x7C	; 124
      ea:	69 48       	sbci	r22, 0x89	; 137
      ec:	b4 49       	sbci	r27, 0x94	; 148
      ee:	fb 4a       	sbci	r31, 0xAB	; 171
      f0:	3f 4c       	sbci	r19, 0xCF	; 207
      f2:	81 4d       	sbci	r24, 0xD1	; 209
      f4:	bf 4e       	sbci	r27, 0xEF	; 239
      f6:	fb 4f       	sbci	r31, 0xFB	; 251
      f8:	33 51       	subi	r19, 0x13	; 19
      fa:	68 52       	subi	r22, 0x28	; 40
      fc:	9b 53       	subi	r25, 0x3B	; 59
      fe:	c9 54       	subi	r28, 0x49	; 73
     100:	f5 55       	subi	r31, 0x55	; 85
     102:	1d 57       	subi	r17, 0x7D	; 125
     104:	42 58       	subi	r20, 0x82	; 130
     106:	64 59       	subi	r22, 0x94	; 148
     108:	82 5a       	subi	r24, 0xA2	; 162
     10a:	9c 5b       	subi	r25, 0xBC	; 188
     10c:	b3 5c       	subi	r27, 0xC3	; 195
     10e:	c7 5d       	subi	r28, 0xD7	; 215
     110:	d7 5e       	subi	r29, 0xE7	; 231
     112:	e3 5f       	subi	r30, 0xF3	; 243
     114:	eb 60       	ori	r30, 0x0B	; 11
     116:	f0 61       	ori	r31, 0x10	; 16
     118:	f1 62       	ori	r31, 0x21	; 33
     11a:	ee 63       	ori	r30, 0x3E	; 62
     11c:	e8 64       	ori	r30, 0x48	; 72
     11e:	dd 65       	ori	r29, 0x5D	; 93
     120:	cf 66       	ori	r28, 0x6F	; 111
     122:	bc 67       	ori	r27, 0x7C	; 124
     124:	a6 68       	ori	r26, 0x86	; 134
     126:	8b 69       	ori	r24, 0x9B	; 155
     128:	6d 6a       	ori	r22, 0xAD	; 173
     12a:	4a 6b       	ori	r20, 0xBA	; 186
     12c:	23 6c       	ori	r18, 0xC3	; 195
     12e:	f8 6c       	ori	r31, 0xC8	; 200
     130:	c9 6d       	ori	r28, 0xD9	; 217
     132:	96 6e       	ori	r25, 0xE6	; 230
     134:	5e 6f       	ori	r21, 0xFE	; 254
     136:	22 70       	andi	r18, 0x02	; 2
     138:	e2 70       	andi	r30, 0x02	; 2
     13a:	9d 71       	andi	r25, 0x1D	; 29
     13c:	54 72       	andi	r21, 0x24	; 36
     13e:	07 73       	andi	r16, 0x37	; 55
     140:	b5 73       	andi	r27, 0x35	; 53
     142:	5f 74       	andi	r21, 0x4F	; 79
     144:	04 75       	andi	r16, 0x54	; 84
     146:	a5 75       	andi	r26, 0x55	; 85
     148:	41 76       	andi	r20, 0x61	; 97
     14a:	d8 76       	andi	r29, 0x68	; 104
     14c:	6b 77       	andi	r22, 0x7B	; 123
     14e:	fa 77       	andi	r31, 0x7A	; 122
     150:	84 78       	andi	r24, 0x84	; 132
     152:	09 79       	andi	r16, 0x99	; 153
     154:	89 79       	andi	r24, 0x99	; 153
     156:	05 7a       	andi	r16, 0xA5	; 165
     158:	7c 7a       	andi	r23, 0xAC	; 172
     15a:	ee 7a       	andi	r30, 0xAE	; 174
     15c:	5c 7b       	andi	r21, 0xBC	; 188
     15e:	c5 7b       	andi	r28, 0xB5	; 181
     160:	29 7c       	andi	r18, 0xC9	; 201
     162:	88 7c       	andi	r24, 0xC8	; 200
     164:	e3 7c       	andi	r30, 0xC3	; 195
     166:	39 7d       	andi	r19, 0xD9	; 217
     168:	89 7d       	andi	r24, 0xD9	; 217
     16a:	d5 7d       	andi	r29, 0xD5	; 213
     16c:	1d 7e       	andi	r17, 0xED	; 237
     16e:	5f 7e       	andi	r21, 0xEF	; 239
     170:	9c 7e       	andi	r25, 0xEC	; 236
     172:	d5 7e       	andi	r29, 0xE5	; 229
     174:	09 7f       	andi	r16, 0xF9	; 249
     176:	37 7f       	andi	r19, 0xF7	; 247
     178:	61 7f       	andi	r22, 0xF1	; 241
     17a:	86 7f       	andi	r24, 0xF6	; 246
     17c:	a6 7f       	andi	r26, 0xF6	; 246
     17e:	c1 7f       	andi	r28, 0xF1	; 241
     180:	d8 7f       	andi	r29, 0xF8	; 248
     182:	e9 7f       	andi	r30, 0xF9	; 249
     184:	f5 7f       	andi	r31, 0xF5	; 245
     186:	fd 7f       	andi	r31, 0xFD	; 253
     188:	ff 7f       	andi	r31, 0xFF	; 255

0000018a <pgm_paletteCOIN>:
     18a:	25 02 07 2f                                         %../

0000018e <pgm_imageCOIN3>:
     18e:	00 00 00 00 00 c0 01 00 00 c0 01 00 00 f0 07 00     ................
     19e:	00 f0 07 00 00 f0 07 00 00 f0 07 00 00 f0 07 00     ................
     1ae:	00 f0 07 00 00 f0 07 00 00 f0 07 00 00 f0 07 00     ................
     1be:	00 f0 07 00 00 c0 01 00 00 c0 01 00 00 00 00 00     ................

000001ce <pgm_imageCOIN2>:
     1ce:	00 00 00 00 00 80 00 00 00 80 00 00 00 80 00 00     ................
     1de:	00 80 00 00 00 80 00 00 00 80 00 00 00 c0 00 00     ................
     1ee:	00 c0 00 00 00 80 00 00 00 80 00 00 00 80 00 00     ................
     1fe:	00 80 00 00 00 80 00 00 00 80 00 00 00 00 00 00     ................

0000020e <pgm_imageCOIN1>:
     20e:	00 00 00 00 00 80 01 00 00 80 01 00 00 60 05 00     .............`..
     21e:	00 60 05 00 00 60 05 00 00 60 05 00 00 70 05 00     .`...`...`...p..
     22e:	00 70 05 00 00 60 05 00 00 60 05 00 00 60 05 00     .p...`...`...`..
     23e:	00 60 05 00 00 80 01 00 00 80 01 00 00 00 00 00     .`..............

0000024e <pgm_imageCOIN>:
     24e:	00 00 00 00 00 80 02 00 00 a0 0a 00 00 a8 2a 00     ..............*.
     25e:	00 e8 29 00 00 ba a6 00 00 ba a6 00 00 ba a6 00     ..).............
     26e:	00 ba a6 00 00 ba a6 00 00 ba a6 00 00 e8 29 00     ..............).
     27e:	00 a8 2a 00 00 a0 0a 00 00 80 02 00 00 00 00 00     ..*.............

0000028e <pgm_paletteGOOMBA>:
     28e:	04 02 27 00 04 02 27 00 05 02 27 00 07 02 27 00     ..'...'...'...'.
     29e:	03 01 26 00 00 20 01 20                             ..&.. . 

000002a6 <pgm_imageGOOMBA>:
     2a6:	00 50 05 00 00 54 15 00 00 55 55 00 40 55 55 01     .P...T...UU.@UU.
     2b6:	d0 57 d5 07 54 5e b5 15 54 fe bf 15 55 6e b9 55     .W..T^..T...Un.U
     2c6:	55 6a a9 55 55 55 55 55 54 a9 6a 15 00 aa aa 00     Uj.UUUUUT.j.....
     2d6:	00 aa aa 0f c0 ab fa 3f c0 af fe 3f 00 bf ff 0f     .......?...?....

000002e6 <pgm_paletteFLOWER>:
     2e6:	25 04 00 00 25 2f 07 04 25 17 02 00 25 07 05 02     %...%/..%...%...

000002f6 <pgm_imageFLOWER>:
     2f6:	00 55 55 00 50 55 55 05 54 aa aa 15 a5 fe bf 5a     .UU.PUU.T......Z
     306:	a5 fe bf 5a 54 aa aa 15 50 55 55 05 00 55 55 00     ...ZT...PUU..UU.
     316:	00 40 01 00 15 40 01 54 54 40 01 15 54 41 41 15     .@...@.TT@..TAA.
     326:	50 45 51 05 50 45 51 05 40 55 55 01 00 50 05 00     PEQ.PEQ.@UU..P..

00000336 <pgm_paletteSTAR>:
     336:	25 07 02 00 25 02 00 00                             %...%...

0000033e <pgm_imageSTAR>:
     33e:	00 40 01 00 00 40 01 00 00 50 05 00 00 50 05 00     .@...@...P...P..
     34e:	00 54 15 00 54 55 55 15 54 65 59 15 50 65 59 05     .T..TUU.TeY.PeY.
     35e:	40 65 59 01 00 55 55 00 00 55 55 00 40 55 55 01     @eY..UU..UU.@UU.
     36e:	40 55 55 01 40 15 54 01 50 01 40 05 50 00 00 05     @UU.@.T.P.@.P...

0000037e <pgm_paletteBIG>:
     37e:	25 07 02 2f                                         %../

00000382 <pgm_palette1UP>:
     382:	25 07 04 2f                                         %../

00000386 <pgm_imageSHROOM>:
     386:	00 50 05 00 00 54 29 00 00 55 aa 00 40 55 aa 02     .P...T)..U..@U..
     396:	50 55 a9 05 94 5a 55 15 a4 6a 55 15 a5 6a 55 5a     PU...ZU..jU..jUZ
     3a6:	a5 6a 55 6a 95 5a 55 69 55 55 55 55 a4 fe bf 1a     .jUj.ZUiUUUU....
     3b6:	00 ff ff 00 00 ff df 00 00 ff df 00 00 fc 37 00     ..............7.

000003c6 <pgm_paletteDEADGOOMBA>:
     3c6:	25 02 27 00                                         %.'.

000003ca <pgm_imageDEADGOOMBA>:
     3ca:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3da:	00 00 00 00 00 00 00 00 00 00 00 00 00 50 05 00     .............P..
     3ea:	40 55 55 01 d4 5f f5 17 a5 fa af 5a 55 55 55 55     @UU.._.....ZUUUU
     3fa:	80 aa aa 02 80 aa aa 02 f0 0f f0 3f 00 00 00 00     ...........?....

0000040a <pgm_paletteSOLID>:
     40a:	25 02 00 00                                         %...

0000040e <pgm_imageSOLID>:
     40e:	fc ff ff 3f 57 55 55 d5 77 55 55 dd 57 55 55 d5     ...?WUU.wUU.WUU.
     41e:	57 55 55 d5 57 55 55 d5 57 55 55 d5 57 55 55 d5     WUU.WUU.WUU.WUU.
     42e:	57 55 55 d5 57 55 55 d5 57 55 55 d5 57 55 55 d5     WUU.WUU.WUU.WUU.
     43e:	57 55 55 d5 77 55 55 dd 57 55 55 d5 fc ff ff 3f     WUU.wUU.WUU....?

0000044e <pgm_paletteQ>:
     44e:	25 02 07 00 25 02 02 00 25 02 01 00                 %...%...%...

0000045a <pgm_imageQ>:
     45a:	54 55 55 15 a9 aa aa ea b9 aa aa ee a9 56 a5 ea     TUU..........V..
     46a:	a9 f5 97 ea a9 b5 d6 ea a9 b5 d6 ea a9 be d5 ea     ................
     47a:	a9 6a fd ea a9 6a ad ea a9 aa af ea a9 6a a9 ea     .j...j.......j..
     48a:	a9 6a ad ea b9 aa af ee a9 aa aa ea ff ff ff ff     .j..............

0000049a <characters>:
     49a:	00 0c 36 36 0c 00 1c 06 18 06 00 00 00 00 00 60     ..66...........`
     4aa:	1e 0c 1e 1e 38 3f 1c 3f 1e 1e 00 00 18 00 06 1e     ....8?.?........
     4ba:	3e 0c 3f 3c 3f 7f 7f 3c 33 1e 78 67 0f 63 63 1c     >.?<?..<3.xg.cc.
     4ca:	3f 1e 3f 1e 3f 33 33 63 63 33 7f 1e 03 1e 08 00     ?.?.?33cc3......
     4da:	0c 00 07 00 38 00 1c 00 07 0c 18 07 0e 00 00 00     ....8...........
     4ea:	00 00 00 00 08 00 00 00 00 00 00 38 18 07 6e 0e     ...........8..n.
     4fa:	00 1e 36 36 3e 63 36 06 0c 0c 66 0c 00 00 00 30     ..66>c6...f....0
     50a:	33 0f 33 33 3c 03 06 33 33 33 00 00 0c 00 0c 33     3.33<..333.....3
     51a:	63 1e 66 66 36 46 46 66 33 0c 30 66 06 77 67 36     c.ff6FFf3.0f.wg6
     52a:	66 33 66 33 2d 33 33 63 63 33 33 06 06 18 1c 00     f3f3-33cc33.....
     53a:	0c 00 06 00 30 00 36 00 06 00 00 06 0c 00 00 00     ....0.6.........
     54a:	00 00 00 00 0c 00 00 00 00 00 00 0c 18 0c 3b 13     ..............;.
     55a:	00 1e 36 7f 03 33 1c 03 06 18 3c 0c 00 00 00 18     ..6..3....<.....
     56a:	3b 0c 30 30 36 1f 03 30 33 33 0c 0c 06 3f 18 30     ;.006..033...?.0
     57a:	7b 33 66 03 66 16 16 03 33 0c 30 36 06 7f 6f 63     {3f.f...3.06..oc
     58a:	66 33 66 07 0c 33 33 63 36 33 19 06 0c 18 36 00     f3f..33c63....6.
     59a:	18 1e 3e 1e 30 1e 06 6e 36 0e 1e 66 0c 37 1f 1e     ..>.0..n6..f.7..
     5aa:	3b 6e 1b 3e 3e 33 33 63 63 33 3f 0c 18 0c 00 39     ;n.>>33cc3?....9
     5ba:	00 0c 00 36 1e 18 6e 00 06 18 ff 3f 00 3f 00 0c     ...6..n....?.?..
     5ca:	3f 0c 1c 1c 33 30 1f 18 1e 3e 0c 0c 03 00 30 18     ?...30...>....0.
     5da:	7b 33 3e 03 66 1e 1e 03 3f 0c 30 1e 06 6b 7b 63     {3>.f...?.0..k{c
     5ea:	3e 33 3e 1c 0c 33 33 6b 1c 1e 0c 06 18 18 63 00     >3>..33k......c.
     5fa:	00 30 66 33 3e 33 0f 33 6e 0c 18 36 0c 7f 33 33     .0f3>3.3n..6..33
     60a:	66 33 36 03 0c 33 33 63 36 33 19 07 00 38 00 69     f36..33c63...8.i
     61a:	00 0c 00 7f 30 0c 3b 00 06 18 3c 0c 00 00 00 06     ....0.;...<.....
     62a:	37 0c 06 30 7f 30 33 0c 33 30 00 00 06 3f 18 0c     7..0.03.30...?..
     63a:	7b 3f 66 03 66 16 16 73 33 0c 33 36 46 63 73 63     {?f.f..s3.36Fcsc
     64a:	06 3b 1e 38 0c 33 33 7f 36 0c 46 06 30 18 00 00     .;.8.33.6.F.0...
     65a:	00 3e 66 03 33 3f 06 33 66 0c 18 1e 0c 6b 33 33     .>f.3?.3f....k33
     66a:	66 33 36 1e 0c 33 33 6b 1c 33 0c 0c 18 0c 00 0e     f36..33k.3......
     67a:	00 00 00 36 1f 66 33 00 0c 0c 66 0c 0e 00 0c 03     ...6.f3...f.....
     68a:	33 0c 33 33 30 33 33 06 33 18 0c 0e 0c 00 0c 00     3.33033.3.......
     69a:	03 33 66 66 36 46 06 66 33 0c 33 66 66 63 63 36     .3ff6F.f3.3ffcc6
     6aa:	06 1e 36 33 0c 33 1e 77 63 0c 63 06 60 18 00 00     ..63.3.wc.c.`...
     6ba:	00 33 66 33 33 03 06 3e 66 0c 18 36 0c 63 33 33     .3f33..>f..6.c33
     6ca:	3e 3e 06 30 2c 33 1e 7f 36 3e 26 0c 18 0c 00 f3     >>.0,3..6>&.....
     6da:	00 0c 00 36 0c 63 6e 00 18 06 00 00 0c 00 0c 01     ...6.cn.........
     6ea:	1e 3f 3f 1e 30 1e 1e 06 1e 0e 0c 0c 18 00 06 0c     .??.0...........
     6fa:	1e 33 3f 3c 3f 7f 0f 7c 33 1e 1e 67 7f 63 63 1c     .3?<?..|3..g.cc.
     70a:	0f 38 67 1e 1e 3f 0c 63 63 1e 7f 1e 40 1e 00 00     .8g..?.cc...@...
     71a:	00 6e 3d 1e 6e 1e 0f 30 67 1e 1b 67 1e 63 33 1e     .n=.n..0g..g.c3.
     72a:	06 30 0f 1f 18 6e 0c 36 63 30 3f 38 18 07 00 46     .0...n.6c0?8...F
     73a:	00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00     ................
     74a:	00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00     ................
     75a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     76a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
     77a:	00 00 00 00 00 00 00 1f 00 00 0e 00 00 00 00 00     ................
     78a:	0f 78 00 00 00 00 00 00 00 1f 00 00 00 00 00 f4     .x..............

0000079a <header>:
     79a:	4c 43 44 64 69 72 65 63 74 4c 56 44 53 36 37 20     LCDdirectLVDS67 
     7aa:	32 30 31 34 2d 30 34 2d 32 38 20 30 30 3a 35 37     2014-04-28 00:57
     7ba:	3a 30 37 00                                         :07.

000007be <__ctors_end>:
     7be:	11 24       	eor	r1, r1
     7c0:	1f be       	out	0x3f, r1	; 63
     7c2:	cf ef       	ldi	r28, 0xFF	; 255
     7c4:	d4 e0       	ldi	r29, 0x04	; 4
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	cd bf       	out	0x3d, r28	; 61

000007ca <__do_copy_data>:
     7ca:	11 e0       	ldi	r17, 0x01	; 1
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b1 e0       	ldi	r27, 0x01	; 1
     7d0:	e6 e1       	ldi	r30, 0x16	; 22
     7d2:	fc e1       	ldi	r31, 0x1C	; 28
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <__do_copy_data+0x10>
     7d6:	05 90       	lpm	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	a2 35       	cpi	r26, 0x52	; 82
     7dc:	b1 07       	cpc	r27, r17
     7de:	d9 f7       	brne	.-10     	; 0x7d6 <__do_copy_data+0xc>

000007e0 <__do_clear_bss>:
     7e0:	12 e0       	ldi	r17, 0x02	; 2
     7e2:	a2 e5       	ldi	r26, 0x52	; 82
     7e4:	b1 e0       	ldi	r27, 0x01	; 1
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <.do_clear_bss_start>

000007e8 <.do_clear_bss_loop>:
     7e8:	1d 92       	st	X+, r1

000007ea <.do_clear_bss_start>:
     7ea:	a7 37       	cpi	r26, 0x77	; 119
     7ec:	b1 07       	cpc	r27, r17
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <.do_clear_bss_loop>
     7f0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <main>
     7f4:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <_exit>

000007f8 <__bad_interrupt>:
     7f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007fc <hfm_setPower>:
// This needs to be set, initially! 
//   either init it in the hfm variable declaration
//   or use hfm_setup (ideal)
// however, sometimes it needs to be variable, thus hfm_setup (above)
void hfm_setPower(hfm_t	*modulator, uint8_t power)
{
     7fc:	fc 01       	movw	r30, r24
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     7fe:	82 81       	ldd	r24, Z+2	; 0x02
     800:	86 17       	cp	r24, r22
     802:	10 f0       	brcs	.+4      	; 0x808 <hfm_setPower+0xc>
		modulator->power = power;
     804:	63 83       	std	Z+3, r22	; 0x03
     806:	08 95       	ret
	else
		modulator->power = modulator->maxPower;
     808:	82 81       	ldd	r24, Z+2	; 0x02
     80a:	83 83       	std	Z+3, r24	; 0x03
     80c:	08 95       	ret

0000080e <hfm_setup>:
//Mainly just for setting up the maxPower (divisor)
// [can] use hfm_setPower otherwise...
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
	modulator->desiredSum = 0;
     80e:	fc 01       	movw	r30, r24
     810:	11 82       	std	Z+1, r1	; 0x01
     812:	10 82       	st	Z, r1
	modulator->maxPower = maxPower;
     814:	42 83       	std	Z+2, r20	; 0x02
	hfm_setPower(modulator, power);
     816:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <hfm_setPower>

0000081a <hfm_nextOutput>:
}

//Returns 0 if the "output" should be "off" in this cycle
//		  1 if the "output" should be "on"  in this cycle
uint8_t hfm_nextOutput(hfm_t *modulator)
{
     81a:	fc 01       	movw	r30, r24
	// IF desired == 255, we want it never to clr...
	//		but running will be 0 the first time
	//		and we'll therefore if... set == good
	//		and later we'll runningSum == desiredSum (above) 
	//    and reset and if again
	if(modulator->desiredSum > 0)
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	18 16       	cp	r1, r24
     822:	19 06       	cpc	r1, r25
     824:	4c f4       	brge	.+18     	; 0x838 <hfm_nextOutput+0x1e>
	{
		(modulator->desiredSum) -= (modulator->maxPower); //0xff;
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	22 81       	ldd	r18, Z+2	; 0x02
     82c:	82 1b       	sub	r24, r18
     82e:	91 09       	sbc	r25, r1
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
		toReturn = TRUE;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	01 c0       	rjmp	.+2      	; 0x83a <hfm_nextOutput+0x20>
	}
	else	//avg == desired is handled at the start... (except 0-case which works here too)
	{
		//Don't modify runningSum, wait until desiredSum catches up...
		toReturn = FALSE;
     838:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	(modulator->desiredSum) += (modulator->power);
     83a:	20 81       	ld	r18, Z
     83c:	31 81       	ldd	r19, Z+1	; 0x01
     83e:	93 81       	ldd	r25, Z+3	; 0x03
     840:	29 0f       	add	r18, r25
     842:	31 1d       	adc	r19, r1
     844:	31 83       	std	Z+1, r19	; 0x01
     846:	20 83       	st	Z, r18
		modulator->runningSum = 0;
		modulator->desiredSum = 0;
	}
*/	
	return toReturn;
}
     848:	08 95       	ret

0000084a <adc_select>:
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     84a:	98 b1       	in	r25, 0x08	; 8
     84c:	8f 71       	andi	r24, 0x1F	; 31
     84e:	90 7e       	andi	r25, 0xE0	; 224
     850:	89 2b       	or	r24, r25
     852:	88 b9       	out	0x08, r24	; 8
     854:	08 95       	ret

00000856 <adc_getValue>:
//Return the last value read by the ADC
// check if adc_isBusy is true before reading, in lockstep...
// Since ADLAR is cleared, it will be the low ten bits 
uint16_t adc_getValue(void)
{
	return ADC;
     856:	8c b5       	in	r24, 0x2c	; 44
     858:	9d b5       	in	r25, 0x2d	; 45
	//reading both values takes longer and some other things mentioned in the manual
	// (i.e. it might be more efficient to only read one byte if acceptable)
	// unless only reading ADCH: "ADCL must be read first, then ADCH"
	//!!! Might want to verify this occurs properly in the assembly code
	
}
     85a:	08 95       	ret

0000085c <adc_isBusy>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     85c:	86 b1       	in	r24, 0x06	; 6
}
     85e:	86 fb       	bst	r24, 6
     860:	88 27       	eor	r24, r24
     862:	80 f9       	bld	r24, 0
     864:	08 95       	ret

00000866 <adc_startConversion>:

//Return TRUE on error (if there was a previous conversion in progress...)
uint8_t adc_startConversion(void)
{
	//Check if a conversion is already in progress...
	if(adc_isBusy())
     866:	0e 94 2e 04 	call	0x85c	; 0x85c <adc_isBusy>
     86a:	81 11       	cpse	r24, r1
     86c:	02 c0       	rjmp	.+4      	; 0x872 <adc_startConversion+0xc>
	// until a conversion is started. Once the conversion starts, the channel and 
	// reference selection is locked to ensure a sufficient sampling time for the ADC."
	
	//"In Single Conversion mode, write this bit to one to start each conversion."
	// BEWARE: calling this will CLEAR the conversion-complete indicator
	setbit(ADSC, ADCSRA);
     86e:	36 9a       	sbi	0x06, 6	; 6
	return FALSE;
     870:	08 95       	ret
//Return TRUE on error (if there was a previous conversion in progress...)
uint8_t adc_startConversion(void)
{
	//Check if a conversion is already in progress...
	if(adc_isBusy())
		return TRUE;
     872:	81 e0       	ldi	r24, 0x01	; 1
	
	//"In Single Conversion mode, write this bit to one to start each conversion."
	// BEWARE: calling this will CLEAR the conversion-complete indicator
	setbit(ADSC, ADCSRA);
	return FALSE;
}
     874:	08 95       	ret

00000876 <adc_setPrescaler>:
}

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     876:	96 b1       	in	r25, 0x06	; 6
     878:	87 70       	andi	r24, 0x07	; 7
     87a:	98 7f       	andi	r25, 0xF8	; 248
     87c:	89 2b       	or	r24, r25
     87e:	86 b9       	out	0x06, r24	; 6
     880:	08 95       	ret

00000882 <adc_init>:
	// (i.e. a 3.3V voltage regulator output)
	//Technically, these values are reset-defaults, but just make sure
	//!!!According to attiny861, these values set VCC as the voltage ref
	//   NOT an external reference. So the above note seems odd...
	// This IS what I want on the Tiny861 threePinIDer...
	clrbit(REFS0, ADMUX);
     882:	46 98       	cbi	0x08, 6	; 8
	clrbit(REFS1, ADMUX);
     884:	47 98       	cbi	0x08, 7	; 8
	
	//Use right-adjusted output
	// so values read from the 2-byte register are:
	//	8-bits in the Low reg, and 2 in the High reg
	clrbit(ADLAR, ADMUX);
     886:	45 98       	cbi	0x08, 5	; 8

	//Enable the ADC
	// (see description for noise cancelling techniques)
	setbit(ADEN, ADCSRA);
     888:	37 9a       	sbi	0x06, 7	; 6
	
	//Don't use Auto Triggering
	// (@@@ could use a timer, etc.)
	clrbit(ADATE, ADCSRA);
     88a:	35 98       	cbi	0x06, 5	; 6
	// "ADIF is cleared by writing a logical one to the flag."
	// " BEWARE that if doing a Read-Modify-Write on ADCSRA, a pending interrupt can be disabled. "
	//   because the flag may be 1 when read, and re-writing 1 clears it.
	//   ???could get around this by using a special set/clrbit instruction which would always write 0
	//   to this bit...
	setbit(ADIF, ADCSRA);
     88c:	34 9a       	sbi	0x06, 4	; 6
	
	//make sure the interrupt is not enabled...
	clrbit(ADIE, ADCSRA);
     88e:	33 98       	cbi	0x06, 3	; 6
	//  If a lower resolution than 10 bits is needed, the input clock frequency 
	//  to the ADC can be higher than 200 kHz to get a higher sample rate."
	// For now, let's go for higher-precision... 
	// 16MHz / 200kHz = 80
	// our best-bet for precision is 128
	adc_setPrescaler(ADPS_128);
     890:	87 e0       	ldi	r24, 0x07	; 7
     892:	0e 94 3b 04 	call	0x876	; 0x876 <adc_setPrescaler>
		
	//Select GND as the first ADC source...
	adc_select(ADC_SELECT_GND);
     896:	8f e1       	ldi	r24, 0x1F	; 31
     898:	0e 94 25 04 	call	0x84a	; 0x84a <adc_select>
	//Start a conversion so it will be initialized for the next...
	//"The first conversion after ADSC has been written 
	// after the ADC has been enabled ... 
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();
     89c:	0e 94 33 04 	call	0x866	; 0x866 <adc_startConversion>

	//Wait for the initialization to complete for lockstepping...
	while(adc_isBusy())
     8a0:	0e 94 2e 04 	call	0x85c	; 0x85c <adc_isBusy>
     8a4:	81 11       	cpse	r24, r1
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <adc_init+0x1e>
	{}
}
     8a8:	08 95       	ret

000008aa <adc_takeInput>:
		setbit(bitNum, DIDR1);
		return;
	}
#endif

	if(bitNum <= 7)
     8aa:	88 30       	cpi	r24, 0x08	; 8
     8ac:	60 f4       	brcc	.+24     	; 0x8c6 <adc_takeInput+0x1c>
		setbit(bitNum, DIDR0);
     8ae:	90 91 77 00 	lds	r25, 0x0077
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	08 2e       	mov	r0, r24
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <adc_takeInput+0x12>
     8ba:	22 0f       	add	r18, r18
     8bc:	0a 94       	dec	r0
     8be:	ea f7       	brpl	.-6      	; 0x8ba <adc_takeInput+0x10>
     8c0:	92 2b       	or	r25, r18
     8c2:	90 93 77 00 	sts	0x0077, r25
     8c6:	08 95       	ret

000008c8 <timer_selectDivisor>:
#if (!defined(TIMER_SELECTDIVISOR_UNUSED) || !TIMER_SELECTDIVISOR_UNUSED)
uint8_t timer_selectDivisor(uint8_t timerNum, uint8_t clockDiv)
{

 #if(defined(__AVR_AT90PWM161__))
	if((timerNum != 1) || (clockDiv != CLKDIV1))
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	51 f4       	brne	.+20     	; 0x8e0 <timer_selectDivisor+0x18>
     8cc:	61 11       	cpse	r22, r1
     8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <timer_selectDivisor+0x18>
		return 1;

	writeMasked(CSTYP_DIV1, CSMASK, T1_CSReg);
     8d0:	80 91 8a 00 	lds	r24, 0x008A
     8d4:	88 7f       	andi	r24, 0xF8	; 248
     8d6:	81 60       	ori	r24, 0x01	; 1
     8d8:	80 93 8a 00 	sts	0x008A, r24
	return 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret
uint8_t timer_selectDivisor(uint8_t timerNum, uint8_t clockDiv)
{

 #if(defined(__AVR_AT90PWM161__))
	if((timerNum != 1) || (clockDiv != CLKDIV1))
		return 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	
	return 0;
 #endif
}
     8e2:	08 95       	ret

000008e4 <timer_setWGM>:
//	wgmLb *= 0xff;
//	wgmHb *= 0xff;

	//Make sure the chosen WGM will be written to the WGM bits properly, as implemented below...
	// Only modes 0-3 are implemented...
	if(wgm > 0x03)
     8e4:	64 30       	cpi	r22, 0x04	; 4
     8e6:	88 f4       	brcc	.+34     	; 0x90a <timer_setWGM+0x26>
		return 1;
	
	switch(timerNum)
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	79 f4       	brne	.+30     	; 0x90a <timer_setWGM+0x26>
			break;
#endif //!__AVR_AT90PWM161__
		//Also Timer1, since all devices I've explored have both T0 and T1...
		case 1:
#if(defined(__AVR_AT90PWM161__))
			if(wgm == WGM_NORMAL)
     8ec:	61 11       	cpse	r22, r1
     8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <timer_setWGM+0x14>
			{
				clrbit(WGM13, TCCR1B);
     8f0:	80 91 8a 00 	lds	r24, 0x008A
     8f4:	8f 7e       	andi	r24, 0xEF	; 239
     8f6:	05 c0       	rjmp	.+10     	; 0x902 <timer_setWGM+0x1e>
				return 0;
			}
			else if(wgm == WGM_CLR_ON_COMPARE)
     8f8:	62 30       	cpi	r22, 0x02	; 2
     8fa:	39 f4       	brne	.+14     	; 0x90a <timer_setWGM+0x26>
			{
				setbit(WGM13, TCCR1B);
     8fc:	80 91 8a 00 	lds	r24, 0x008A
     900:	80 61       	ori	r24, 0x10	; 16
     902:	80 93 8a 00 	sts	0x008A, r24
				return 0;
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	08 95       	ret
//	wgmHb *= 0xff;

	//Make sure the chosen WGM will be written to the WGM bits properly, as implemented below...
	// Only modes 0-3 are implemented...
	if(wgm > 0x03)
		return 1;
     90a:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     90c:	08 95       	ret

0000090e <timer_init>:

//Roughly equivalent to the ol' Init_timerX(clkDiv, wgm)
//Return 0 if no error...
#if (!defined(TIMER_INIT_UNUSED) || !TIMER_INIT_UNUSED)
uint8_t timer_init(uint8_t timerNum, uint8_t clockDiv, uint8_t wgm)
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	c8 2f       	mov	r28, r24
     914:	d6 2f       	mov	r29, r22
	//set the waveform mode
	ERR_HANDLE_NUM(1,				\
     916:	64 2f       	mov	r22, r20
     918:	0e 94 72 04 	call	0x8e4	; 0x8e4 <timer_setWGM>
     91c:	88 23       	and	r24, r24
     91e:	11 f0       	breq	.+4      	; 0x924 <timer_init+0x16>
     920:	80 61       	ori	r24, 0x10	; 16
     922:	09 c0       	rjmp	.+18     	; 0x936 <timer_init+0x28>
		timer_setWGM(timerNum, wgm)	);

	//select the clock
	ERR_HANDLE_NUM(2,							\
     924:	6d 2f       	mov	r22, r29
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 64 04 	call	0x8c8	; 0x8c8 <timer_selectDivisor>
     92c:	88 23       	and	r24, r24
     92e:	11 f0       	breq	.+4      	; 0x934 <timer_init+0x26>
     930:	80 62       	ori	r24, 0x20	; 32
     932:	01 c0       	rjmp	.+2      	; 0x936 <timer_init+0x28>
		timer_selectDivisor(timerNum, clockDiv)	);
		
	return 0;
     934:	80 e0       	ldi	r24, 0x00	; 0
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <timer_compareMatchIntSetup>:

#if(defined(__AVR_AT90PWM161__))
uint8_t timer_compareMatchIntSetup(uint8_t timerNum, uint8_t outputChannel,
	  												uint8_t enable)
{
	if(timerNum != 1)
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	51 f4       	brne	.+20     	; 0x954 <timer_compareMatchIntSetup+0x18>
		return 1;
	//outputChannel is ignored...
	if(enable)
     940:	44 23       	and	r20, r20
     942:	61 f0       	breq	.+24     	; 0x95c <timer_compareMatchIntSetup+0x20>
	{
		cli();
     944:	f8 94       	cli
		enable = 1;
	}

	writebit(ICIE1, TIMSK1, enable);
     946:	0d 9a       	sbi	0x01, 5	; 1
		return 1;
	//outputChannel is ignored...
	if(enable)
	{
		cli();
		enable = 1;
     948:	41 e0       	ldi	r20, 0x01	; 1
	}

	writebit(ICIE1, TIMSK1, enable);
	//Clear the overflow flag...
	setbit(ICF1, TIFR1);
     94a:	15 9a       	sbi	0x02, 5	; 2

	if(enable)
     94c:	44 23       	and	r20, r20
     94e:	21 f0       	breq	.+8      	; 0x958 <timer_compareMatchIntSetup+0x1c>
		sei();
     950:	78 94       	sei
     952:	02 c0       	rjmp	.+4      	; 0x958 <timer_compareMatchIntSetup+0x1c>
#if(defined(__AVR_AT90PWM161__))
uint8_t timer_compareMatchIntSetup(uint8_t timerNum, uint8_t outputChannel,
	  												uint8_t enable)
{
	if(timerNum != 1)
		return 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	08 95       	ret
	setbit(ICF1, TIFR1);

	if(enable)
		sei();

	return 0;
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret
	{
		cli();
		enable = 1;
	}

	writebit(ICIE1, TIMSK1, enable);
     95c:	0d 98       	cbi	0x01, 5	; 1
     95e:	f5 cf       	rjmp	.-22     	; 0x94a <timer_compareMatchIntSetup+0xe>

00000960 <setHeartRate>:

void setHeartRate(uint8_t rate)
{
//	heartRate = rate;
	
	if(rate == 0)
     960:	81 11       	cpse	r24, r1
     962:	01 c0       	rjmp	.+2      	; 0x966 <setHeartRate+0x6>
		rate = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
	#if (_HEART_DMS_)

#warning "Relevant Everywhere: dms6sec_t used in heartbeat, yet a full cycle is 8 seconds, and nevermind blinks! This might need changing!"
    heartStepTime = (HEARTSTEPTIME/rate);
	#else
	 heartStepTime = (HEART_ITERATIONCOUNT/rate);
     966:	68 2f       	mov	r22, r24
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	80 e9       	ldi	r24, 0x90	; 144
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__divmodhi4>
     972:	70 93 02 01 	sts	0x0102, r23
     976:	60 93 01 01 	sts	0x0101, r22
     97a:	08 95       	ret

0000097c <getHeartRate>:
uint8_t getHeartRate(void)
{
	#if (_HEART_DMS_)
	 return HEARTSTEPTIME/heartStepTime;
	#else
	 return HEART_ITERATIONCOUNT/heartStepTime;
     97c:	60 91 01 01 	lds	r22, 0x0101
     980:	70 91 02 01 	lds	r23, 0x0102
     984:	80 e9       	ldi	r24, 0x90	; 144
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__udivmodhi4>
     98c:	86 2f       	mov	r24, r22
	#endif
}
     98e:	08 95       	ret

00000990 <heartClear>:
}
#endif

void heartClear(void)
{
	hfm_setPower(&heartModulator, 0);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	83 e7       	ldi	r24, 0x73	; 115
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <hfm_setPower>

0000099a <init_heartBeat>:
	//DDR = H,out
	setoutVar(heartBeatPin, heartPIN);
#else
void init_heartBeat(void)
{
	clrpinPORT(HEART_PINNUM, HEART_PINPORT);
     99a:	2e 98       	cbi	0x05, 6	; 5
	setoutPORT(HEART_PINNUM, HEART_PINPORT);
     99c:	26 9a       	sbi	0x04, 6	; 4
#endif



//	hfm_setPower(&heartModulator, 0);
	hfm_setup(&heartModulator, 0, HEART_MAXBRIGHT);
     99e:	4f ef       	ldi	r20, 0xFF	; 255
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	83 e7       	ldi	r24, 0x73	; 115
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 07 04 	call	0x80e	; 0x80e <hfm_setup>
	#if (_HEART_DMS_)

#warning "Relevant Everywhere: dms6sec_t used in heartbeat, yet a full cycle is 8 seconds, and nevermind blinks! This might need changing!"
    heartStepTime = (HEARTSTEPTIME/rate);
	#else
	 heartStepTime = (HEART_ITERATIONCOUNT/rate);
     9aa:	80 e9       	ldi	r24, 0x90	; 144
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	90 93 02 01 	sts	0x0102, r25
     9b2:	80 93 01 01 	sts	0x0101, r24
     9b6:	08 95       	ret

000009b8 <set_heartBlink>:
uint8_t heartBlink = 0;
//#define TOGGLETIME	(250*DMS_MS)

void set_heartBlink(uint8_t count)
{
	heartBlink = count;
     9b8:	80 93 52 01 	sts	0x0152, r24
     9bc:	08 95       	ret

000009be <blinkHeart>:
	static dms6sec_t lastToggleTime = 0;
#else
#define TOGGLETIME   (2500)
	
uint8_t blinkHeart(uint32_t currentTime)
{
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
	// This is True or False depending on 
	//  whether thisNibble is the high nibble
	static uint8_t highNibble = 0;
	

	uint8_t thisNibble = heartBlink;
     9ca:	30 91 52 01 	lds	r19, 0x0152

	//If both nibbles are filled, process them as specified
	if((heartBlink & 0xf0) && (heartBlink & 0x0f))
     9ce:	43 2f       	mov	r20, r19
     9d0:	40 7f       	andi	r20, 0xF0	; 240
     9d2:	23 2f       	mov	r18, r19
     9d4:	2f 70       	andi	r18, 0x0F	; 15
     9d6:	44 23       	and	r20, r20
     9d8:	31 f0       	breq	.+12     	; 0x9e6 <blinkHeart+0x28>
     9da:	21 11       	cpse	r18, r1
     9dc:	07 c0       	rjmp	.+14     	; 0x9ec <blinkHeart+0x2e>
	// to avoid long delays and hopefully make it easier to determine which
	// nibble is filled...
	else if(heartBlink & 0x0f)
		highNibble = 0;
	else if(heartBlink & 0xf0)
		highNibble = 1;
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	40 93 60 01 	sts	0x0160, r20
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <blinkHeart+0x2e>
	{	//Fall through and toggle...
	}
	//Otherwise just process the one that's filled
	// to avoid long delays and hopefully make it easier to determine which
	// nibble is filled...
	else if(heartBlink & 0x0f)
     9e6:	21 11       	cpse	r18, r1
		highNibble = 0;
     9e8:	10 92 60 01 	sts	0x0160, r1
	else if(heartBlink & 0xf0)
		highNibble = 1;

	//Fill the appropriate nibble for blinking...
	if(highNibble)
     9ec:	40 91 60 01 	lds	r20, 0x0160
     9f0:	44 23       	and	r20, r20
     9f2:	21 f0       	breq	.+8      	; 0x9fc <blinkHeart+0x3e>
		thisNibble = (thisNibble & 0xf0) >> 4;
     9f4:	e3 2f       	mov	r30, r19
     9f6:	e2 95       	swap	r30
     9f8:	ef 70       	andi	r30, 0x0F	; 15
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <blinkHeart+0x40>
	else
		thisNibble = (thisNibble & 0x0f);
     9fc:	e2 2f       	mov	r30, r18

	//Blink the proper number of times
	if((toggleCount>>1) < thisNibble)
     9fe:	50 91 5f 01 	lds	r21, 0x015F
     a02:	f5 2f       	mov	r31, r21
     a04:	f6 95       	lsr	r31
     a06:	00 91 5b 01 	lds	r16, 0x015B
     a0a:	10 91 5c 01 	lds	r17, 0x015C
     a0e:	20 91 5d 01 	lds	r18, 0x015D
     a12:	30 91 5e 01 	lds	r19, 0x015E
	{
		if(currentTime - lastToggleTime > TOGGLETIME)
     a16:	6b 01       	movw	r12, r22
     a18:	7c 01       	movw	r14, r24
     a1a:	c0 1a       	sub	r12, r16
     a1c:	d1 0a       	sbc	r13, r17
     a1e:	e2 0a       	sbc	r14, r18
     a20:	f3 0a       	sbc	r15, r19
		thisNibble = (thisNibble & 0xf0) >> 4;
	else
		thisNibble = (thisNibble & 0x0f);

	//Blink the proper number of times
	if((toggleCount>>1) < thisNibble)
     a22:	fe 17       	cp	r31, r30
     a24:	98 f4       	brcc	.+38     	; 0xa4c <blinkHeart+0x8e>
	{
		if(currentTime - lastToggleTime > TOGGLETIME)
     a26:	45 ec       	ldi	r20, 0xC5	; 197
     a28:	c4 16       	cp	r12, r20
     a2a:	49 e0       	ldi	r20, 0x09	; 9
     a2c:	d4 06       	cpc	r13, r20
     a2e:	e1 04       	cpc	r14, r1
     a30:	f1 04       	cpc	r15, r1
     a32:	60 f1       	brcs	.+88     	; 0xa8c <blinkHeart+0xce>
		{
			lastToggleTime = currentTime;
     a34:	60 93 5b 01 	sts	0x015B, r22
     a38:	70 93 5c 01 	sts	0x015C, r23
     a3c:	80 93 5d 01 	sts	0x015D, r24
     a40:	90 93 5e 01 	sts	0x015E, r25
			toggleCount++;
     a44:	5f 5f       	subi	r21, 0xFF	; 255
     a46:	50 93 5f 01 	sts	0x015F, r21
     a4a:	20 c0       	rjmp	.+64     	; 0xa8c <blinkHeart+0xce>
		}
	}
	//Wait for a while
#warning "There may be some integer promotion issues here..."
	else if(currentTime - lastToggleTime > 
						(((uint32_t)(TOGGLETIME * 8))<<(highNibble)))
     a4c:	00 e2       	ldi	r16, 0x20	; 32
     a4e:	1e e4       	ldi	r17, 0x4E	; 78
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	04 2e       	mov	r0, r20
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <blinkHeart+0xa2>
     a58:	00 0f       	add	r16, r16
     a5a:	11 1f       	adc	r17, r17
     a5c:	22 1f       	adc	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	0a 94       	dec	r0
     a62:	d2 f7       	brpl	.-12     	; 0xa58 <blinkHeart+0x9a>
			toggleCount++;
		}
	}
	//Wait for a while
#warning "There may be some integer promotion issues here..."
	else if(currentTime - lastToggleTime > 
     a64:	0c 15       	cp	r16, r12
     a66:	1d 05       	cpc	r17, r13
     a68:	2e 05       	cpc	r18, r14
     a6a:	3f 05       	cpc	r19, r15
     a6c:	78 f4       	brcc	.+30     	; 0xa8c <blinkHeart+0xce>
						(((uint32_t)(TOGGLETIME * 8))<<(highNibble)))
	{
		toggleCount = 0;
     a6e:	10 92 5f 01 	sts	0x015F, r1
		lastToggleTime = currentTime;
     a72:	60 93 5b 01 	sts	0x015B, r22
     a76:	70 93 5c 01 	sts	0x015C, r23
     a7a:	80 93 5d 01 	sts	0x015D, r24
     a7e:	90 93 5e 01 	sts	0x015E, r25
		//Only valid if both nibbles are filled (see above)
		highNibble = !highNibble;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	41 11       	cpse	r20, r1
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	80 93 60 01 	sts	0x0160, r24
	}

	//(actually, the new value, at this point... but will be the last soon)
	return !getbit(0, toggleCount);
     a8c:	80 91 5f 01 	lds	r24, 0x015F
     a90:	80 95       	com	r24
}
     a92:	81 70       	andi	r24, 0x01	; 1
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	08 95       	ret

00000aa2 <heartUpdate>:
#endif

//This function takes about 186 bytes
// Really?! Or is hfm not compiled if it's not used?
uint8_t heartUpdate(void)
{	
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
//	{
#else
	static uint32_t lastTime = 0;
	
	static uint32_t currentTime = 0;
	currentTime++;
     aa6:	80 91 57 01 	lds	r24, 0x0157
     aaa:	90 91 58 01 	lds	r25, 0x0158
     aae:	a0 91 59 01 	lds	r26, 0x0159
     ab2:	b0 91 5a 01 	lds	r27, 0x015A
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	a1 1d       	adc	r26, r1
     aba:	b1 1d       	adc	r27, r1
     abc:	80 93 57 01 	sts	0x0157, r24
     ac0:	90 93 58 01 	sts	0x0158, r25
     ac4:	a0 93 59 01 	sts	0x0159, r26
     ac8:	b0 93 5a 01 	sts	0x015A, r27
//	if(currentTime - lastTime > (HEART_ITERATIONCOUNT>>heartRate))
	//heartStepTime is number of updates, no corelation with actual seconds..
//#warning "heartStepTime without dms is untested"
#endif

	if((currentTime - lastTime) > heartStepTime)
     acc:	40 91 53 01 	lds	r20, 0x0153
     ad0:	50 91 54 01 	lds	r21, 0x0154
     ad4:	60 91 55 01 	lds	r22, 0x0155
     ad8:	70 91 56 01 	lds	r23, 0x0156
     adc:	8c 01       	movw	r16, r24
     ade:	9d 01       	movw	r18, r26
     ae0:	04 1b       	sub	r16, r20
     ae2:	15 0b       	sbc	r17, r21
     ae4:	26 0b       	sbc	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	40 91 01 01 	lds	r20, 0x0101
     aec:	50 91 02 01 	lds	r21, 0x0102
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	40 17       	cp	r20, r16
     af6:	51 07       	cpc	r21, r17
     af8:	62 07       	cpc	r22, r18
     afa:	73 07       	cpc	r23, r19
     afc:	30 f5       	brcc	.+76     	; 0xb4a <heartUpdate+0xa8>
	{
		lastTime = currentTime;
     afe:	80 93 53 01 	sts	0x0153, r24
     b02:	90 93 54 01 	sts	0x0154, r25
     b06:	a0 93 55 01 	sts	0x0155, r26
     b0a:	b0 93 56 01 	sts	0x0156, r27
#if (!defined(_WDT_DISABLE_) || !_WDT_DISABLE_)
	//Woot! Saved two bytes!
	wdt_reset();
#endif

	desired = (uint8_t)(heartModulator.power);
     b0e:	80 91 76 01 	lds	r24, 0x0176

	desired += direction;
     b12:	60 91 00 01 	lds	r22, 0x0100
     b16:	77 27       	eor	r23, r23
     b18:	67 fd       	sbrc	r22, 7
     b1a:	70 95       	com	r23
     b1c:	68 0f       	add	r22, r24
     b1e:	71 1d       	adc	r23, r1
	
	//Slightly slower not to have these internal to above, but also safer...
	
	if(desired >= HEART_MAXBRIGHT)
     b20:	6f 3f       	cpi	r22, 0xFF	; 255
     b22:	71 05       	cpc	r23, r1
     b24:	34 f0       	brlt	.+12     	; 0xb32 <heartUpdate+0x90>
	{
		desired = HEART_MAXBRIGHT;
		direction = -1;
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	80 93 00 01 	sts	0x0100, r24
	
	//Slightly slower not to have these internal to above, but also safer...
	
	if(desired >= HEART_MAXBRIGHT)
	{
		desired = HEART_MAXBRIGHT;
     b2c:	6f ef       	ldi	r22, 0xFF	; 255
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	08 c0       	rjmp	.+16     	; 0xb42 <heartUpdate+0xa0>
		direction = -1;
	}	

	if(desired <= 0)
     b32:	16 16       	cp	r1, r22
     b34:	17 06       	cpc	r1, r23
     b36:	2c f0       	brlt	.+10     	; 0xb42 <heartUpdate+0xa0>
	{
		desired = 0;
		direction = +1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 00 01 	sts	0x0100, r24
		direction = -1;
	}	

	if(desired <= 0)
	{
		desired = 0;
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0

	if((currentTime - lastTime) > heartStepTime)
	{
		lastTime = currentTime;

		hfm_setPower(&heartModulator, getNextDesired());
     b42:	83 e7       	ldi	r24, 0x73	; 115
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 fe 03 	call	0x7fc	; 0x7fc <hfm_setPower>
	//determine whether the LED should be on or off based on the HFM
	// return TRUE if the pin is available as an input
	uint8_t ledVal;

#if (!defined(HEART_BLINK_UNUSED) || !HEART_BLINK_UNUSED)
	if(heartBlink)
     b4a:	80 91 52 01 	lds	r24, 0x0152
     b4e:	88 23       	and	r24, r24
     b50:	59 f0       	breq	.+22     	; 0xb68 <heartUpdate+0xc6>
		ledVal = blinkHeart(currentTime);
     b52:	60 91 57 01 	lds	r22, 0x0157
     b56:	70 91 58 01 	lds	r23, 0x0158
     b5a:	80 91 59 01 	lds	r24, 0x0159
     b5e:	90 91 5a 01 	lds	r25, 0x015A
     b62:	0e 94 df 04 	call	0x9be	; 0x9be <blinkHeart>
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <heartUpdate+0xce>
		//ledVal = blinkHeart((dms6sec_t)currentTime);
	else
#endif
		ledVal = hfm_nextOutput(&heartModulator);
     b68:	83 e7       	ldi	r24, 0x73	; 115
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 0d 04 	call	0x81a	; 0x81a <hfm_nextOutput>

	if(ledVal)
     b70:	88 23       	and	r24, r24
     b72:	21 f0       	breq	.+8      	; 0xb7c <heartUpdate+0xda>
			setoutVar(heartBeatPin, heartPIN);
			setpinVar(heartBeatPin, heartPIN);
		}
#else
 #if (HEART_LEDCONNECTION == LED_DIRECT_HIGH)
		setinPORT(HEART_PINNUM, HEART_PINPORT);
     b74:	26 98       	cbi	0x04, 6	; 4
		setpuPORT(HEART_PINNUM, HEART_PINPORT);
     b76:	2e 9a       	sbi	0x05, 6	; 5
		setpinPORT(HEART_PINNUM, HEART_PINPORT);
 #else
	#error "Not Handled..."
 #endif
#endif
		return TRUE;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <heartUpdate+0xe0>
		//PORT = L
		clrpinVar(heartBeatPin, heartPIN);
		//DDR = H,out
		setoutVar(heartBeatPin, heartPIN);
#else
		clrpinPORT(HEART_PINNUM, HEART_PINPORT);
     b7c:	2e 98       	cbi	0x05, 6	; 5
		setoutPORT(HEART_PINNUM, HEART_PINPORT);
     b7e:	26 9a       	sbi	0x04, 6	; 4
#endif
		return FALSE;
     b80:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <heartupdate>:

#if (!defined(DMS_WAITFN_UNUSED) || !DMS_WAITFN_UNUSED)
// This only saves 4 bytes...
void heartupdate(void)
{
	heartUpdate();
     b88:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <heartUpdate>

00000b8c <heartPinInputPoll>:
	   asm("nop;");
	}

	pinState = getpinVar(heartBeatPin, heartPIN);
#else
	setinPORT(HEART_PINNUM, HEART_PINPORT);
     b8c:	26 98       	cbi	0x04, 6	; 4
	setpuPORT(HEART_PINNUM, HEART_PINPORT);
     b8e:	2e 9a       	sbi	0x05, 6	; 5
     b90:	8f ef       	ldi	r24, 0xFF	; 255
	//Insert a delay to allow the pull-up to rise...
	uint8_t delay;
	for(delay = 0; delay < HEART_PULLUP_DELAY; delay++)
	{
		//Necessary or this'll be optimised-out
		asm("nop;");
     b92:	00 00       	nop
     b94:	81 50       	subi	r24, 0x01	; 1
	setinPORT(HEART_PINNUM, HEART_PINPORT);
	setpuPORT(HEART_PINNUM, HEART_PINPORT);

	//Insert a delay to allow the pull-up to rise...
	uint8_t delay;
	for(delay = 0; delay < HEART_PULLUP_DELAY; delay++)
     b96:	e9 f7       	brne	.-6      	; 0xb92 <heartPinInputPoll+0x6>
	{
		//Necessary or this'll be optimised-out
		asm("nop;");
	}

	pinState = getpinPORT(HEART_PINNUM, HEART_PINPORT);
     b98:	83 b1       	in	r24, 0x03	; 3
	// to assure valid/safe values of PORT and DDR...
	//Return the pin to the heartbeat
//	setoutVar(heartBeatPin, heartPIN);

	return pinState;
}
     b9a:	86 fb       	bst	r24, 6
     b9c:	88 27       	eor	r24, r24
     b9e:	80 f9       	bld	r24, 0
     ba0:	08 95       	ret

00000ba2 <quadrantizeTheta>:
// negative values returned here are to be absoluted, first
// but they indicate that the resulting sine value is to be negated
theta_t quadrantizeTheta(theta_t theta)
{

	theta %= SINE_2PI;
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	72 e0       	ldi	r23, 0x02	; 2
     ba6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__divmodhi4>

	if(theta < 0)
     baa:	97 fd       	sbrc	r25, 7
		theta = SINE_2PI + theta;
     bac:	9e 5f       	subi	r25, 0xFE	; 254

//For more accurate realtimeishness, it might be worthwhile to reverse this order...
	
	//in the first quadrant, just take the sine value from the table
	if(theta < SINE_SIZE-1) //128)
     bae:	80 38       	cpi	r24, 0x80	; 128
     bb0:	91 05       	cpc	r25, r1
     bb2:	84 f0       	brlt	.+32     	; 0xbd4 <quadrantizeTheta+0x32>
	{
		//theta=theta;
	}	
	//in the second quadrant, mirror theta and subtract the offset
	else if(theta < SINE_SIZE2) //256)
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	91 05       	cpc	r25, r1
     bb8:	29 f0       	breq	.+10     	; 0xbc4 <quadrantizeTheta+0x22>
     bba:	24 f0       	brlt	.+8      	; 0xbc4 <quadrantizeTheta+0x22>
	{
		theta=SINE_SIZE2-theta;
		//return pgm_read_sine(sineTable[SINE_SIZE2-theta]); //256-theta]);
	}
	//in the third quadrant, mirror the value and subtract the offset
	else if(theta < SINE_SIZE3) //384)
     bbc:	80 38       	cpi	r24, 0x80	; 128
     bbe:	51 e0       	ldi	r21, 0x01	; 1
     bc0:	95 07       	cpc	r25, r21
     bc2:	3c f4       	brge	.+14     	; 0xbd2 <quadrantizeTheta+0x30>
	{
		theta=-(theta-SINE_SIZE2);
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	31 e0       	ldi	r19, 0x01	; 1
     bc8:	a9 01       	movw	r20, r18
     bca:	48 1b       	sub	r20, r24
     bcc:	59 0b       	sbc	r21, r25
     bce:	ca 01       	movw	r24, r20
     bd0:	08 95       	ret
		//return -(sine_t)pgm_read_sine(sineTable[theta-SINE_SIZE2]); //256]);
	}
	//in the fourth quadrant, mirror both theta and the value and subtract the offset...
	else
	{
		theta=-(SINE_SIZE4-theta);
     bd2:	92 50       	subi	r25, 0x02	; 2
		//negative=TRUE;
		//return -(sine_t)pgm_read_sine(sineTable[SINE_SIZE4-theta]); //512-theta]);
	}

	return theta;
}
     bd4:	08 95       	ret

00000bd6 <sineRaw>:
//output is a value between -INT32_MAX and INT32_MAX (representing sin values -1 to 1)
sine_t sineRaw(theta_t theta)
{
	uint8_t negative=FALSE;

	theta = quadrantizeTheta(theta);
     bd6:	0e 94 d1 05 	call	0xba2	; 0xba2 <quadrantizeTheta>

	//This reduced code-size from 3860 to 3838
*/
	//adding quadrantizeTheta increased it to 3844
	// but should be dramatic in combination with sineRaw8
	if(theta < 0)
     bda:	97 ff       	sbrs	r25, 7
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <sineRaw+0x12>
	{
		theta = -theta;
     bde:	91 95       	neg	r25
     be0:	81 95       	neg	r24
     be2:	91 09       	sbc	r25, r1
		negative=TRUE;
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	01 c0       	rjmp	.+2      	; 0xbea <sineRaw+0x14>
//theta is a value between 0 and 511 (representing an angle of 0-359.som'n deg)
//   rollover/wraparound should work fine... (e.g. Sine(coord_t))
//output is a value between -INT32_MAX and INT32_MAX (representing sin values -1 to 1)
sine_t sineRaw(theta_t theta)
{
	uint8_t negative=FALSE;
     be8:	20 e0       	ldi	r18, 0x00	; 0
	{
		theta = -theta;
		negative=TRUE;
	}

	sine_t sine=pgm_read_sine(sineTable[theta]);
     bea:	fc 01       	movw	r30, r24
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e8 57       	subi	r30, 0x78	; 120
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	85 91       	lpm	r24, Z+
     bf6:	94 91       	lpm	r25, Z
	
	if(negative)
     bf8:	22 23       	and	r18, r18
     bfa:	19 f0       	breq	.+6      	; 0xc02 <sineRaw+0x2c>
		sine = -sine;
     bfc:	91 95       	neg	r25
     bfe:	81 95       	neg	r24
     c00:	91 09       	sbc	r25, r1
	return sine;
}
     c02:	08 95       	ret

00000c04 <sineRaw8>:
	   return -(int8_t)pgm_read_sine8(sineTable[SINE_SIZE4-theta]); 
	*/

	//And doing this here, reduced from 3844 to 3770
	uint8_t negative = FALSE;
	theta=quadrantizeTheta(theta);
     c04:	0e 94 d1 05 	call	0xba2	; 0xba2 <quadrantizeTheta>

	if(theta < 0)
     c08:	97 ff       	sbrs	r25, 7
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <sineRaw8+0x12>
	{
		theta = -theta;
     c0c:	91 95       	neg	r25
     c0e:	81 95       	neg	r24
     c10:	91 09       	sbc	r25, r1
		negative = TRUE;
     c12:	21 e0       	ldi	r18, 0x01	; 1
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <sineRaw8+0x14>
	else
	   return -(int8_t)pgm_read_sine8(sineTable[SINE_SIZE4-theta]); 
	*/

	//And doing this here, reduced from 3844 to 3770
	uint8_t negative = FALSE;
     c16:	20 e0       	ldi	r18, 0x00	; 0
	{
		theta = -theta;
		negative = TRUE;
	}

	int8_t sine=pgm_read_sine8(sineTable[theta]);
     c18:	fc 01       	movw	r30, r24
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	e7 57       	subi	r30, 0x77	; 119
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	84 91       	lpm	r24, Z

	if(negative)
     c24:	21 11       	cpse	r18, r1
		sine = -sine;
     c26:	81 95       	neg	r24
	return sine;
}
     c28:	08 95       	ret

00000c2a <pll_enable>:


void pll_enable(void)
{
#if(defined(__AVR_AT90PWM161__))
	pll_setMult(PLL_MULT_FACTOR);
     c2a:	80 91 87 00 	lds	r24, 0x0087
     c2e:	83 7e       	andi	r24, 0xE3	; 227
     c30:	88 61       	ori	r24, 0x18	; 24
     c32:	80 93 87 00 	sts	0x0087, r24
   // The benefit of such high PWM frequency is the low RC values necessary
   //  for filtering to DC.
	// From the ATtiny861 manual:
	// "To change Timer/Counter1 to the async mode follow this procedure"
   // 1: Enable the PLL
   setbit(PLLE, PLLCSR);
     c36:	80 91 87 00 	lds	r24, 0x0087
     c3a:	82 60       	ori	r24, 0x02	; 2
     c3c:	80 93 87 00 	sts	0x0087, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c40:	8f e8       	ldi	r24, 0x8F	; 143
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <pll_enable+0x1a>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <pll_enable+0x20>
     c4a:	00 00       	nop
   // 2: Wait 100us for the PLL to stabilize
   // (can't use dmsWait since the timer updating the dmsCount hasn't yet been started!)
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
     c4c:	80 91 87 00 	lds	r24, 0x0087
     c50:	80 fd       	sbrc	r24, 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <pll_enable+0x2e>
   {
      asm("nop");
     c54:	00 00       	nop
     c56:	fa cf       	rjmp	.-12     	; 0xc4c <pll_enable+0x22>
#if(!defined(__AVR_AT90PWM161__))
   // 4: Set the PCKE bit to enable async mode
   setbit(PCKE, PLLCSR);
#endif

}
     c58:	08 95       	ret

00000c5a <lvds_timerInit>:
#endif



void lvds_timerInit(void)
{
     c5a:	0f 93       	push	r16
  #if(defined(LVDS_MAXIMIZE_OSCCAL) && LVDS_MAXIMIZE_OSCCAL)
	OSCCAL = OSCCAL_VAL;
  #endif

  #if(defined(LVDS_USE_PLL) && LVDS_USE_PLL)
	pll_enable();
     c5c:	0e 94 15 06 	call	0xc2a	; 0xc2a <pll_enable>
  #endif

	PSOC2 = (0<<POS23)	//PSCOUT23 outputs Waveform A if 1 or B if 0
     c60:	a5 e0       	ldi	r26, 0x05	; 5
     c62:	a0 93 6e 00 	sts	0x006E, r26
	//OCR2SB, OCR2RB	-> LVDS Clock
	// For one-ramp mode, OCR2RB determines the number of cycles (right?)
	// In order to make this work, the LVDS-CLK signal should be on this
	// channel...

	OCR2RB = 6;	//Count to 6, from 0, then reset the count
     c66:	46 e0       	ldi	r20, 0x06	; 6
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	59 bd       	out	0x29, r21	; 41
     c6c:	48 bd       	out	0x28, r20	; 40
	OCR2SB = 3;	// Toggle the lvds-clock high at edge 3 (0->3 = 4 bits off)
     c6e:	23 e0       	ldi	r18, 0x03	; 3
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	37 bd       	out	0x27, r19	; 39
     c74:	26 bd       	out	0x26, r18	; 38
	// The outputs of the LVDS driver chips need to be swapped
	// (RXclk-/+)

	//OCR2SA/RA are used for DVH/Blue, and should be handled by this:
#if(!defined(PWM_TESTING) || !PWM_TESTING)
	Nada_init();
     c76:	ad 9a       	sbi	0x15, 5	; 21
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	90 93 65 00 	sts	0x0065, r25
     c80:	80 93 64 00 	sts	0x0064, r24
     c84:	64 e0       	ldi	r22, 0x04	; 4
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	7f bd       	out	0x2f, r23	; 47
     c8a:	6e bd       	out	0x2e, r22	; 46
     c8c:	ad 98       	cbi	0x15, 5	; 21
	// 0   5   bits 6 and 0 are low
#endif

	//Also, forgot about FlankWidthModulation (?)

	PCNF2 = (0<<PFIFTY2)	//"Fifty-percent waveforms" unused
     c8e:	66 e0       	ldi	r22, 0x06	; 6
     c90:	65 bb       	out	0x15, r22	; 21
			| (1<<PRUN2)  // START THE PSC
			;
#endif
	//A bunch of input configuration registers and capture registers

	POM2 = 0;	//PSC2 Output Matrix (unused)
     c92:	10 92 6f 00 	sts	0x006F, r1

	//NOTE: PSC2/PSCR I/O can be set to defaults on reset, via fuses


//These are for PSCR and closely match PSC2:
	PSOC0 = (0<<PISEL0A1)	//PSC Input A Select (along with PISEL0A0)
     c96:	a0 93 6a 00 	sts	0x006A, r26
	// But for now, I'll leave it with the written assumptions.
	//
	// OCR0RB determines the reset value of the counter, in one-ramp mode...
	// So its value should not change (regardless of whether it's Green or
	// Red)
	OCR0RB = 6; // count from 0->6, then reset
     c9a:	55 bd       	out	0x25, r21	; 37
     c9c:	44 bd       	out	0x24, r20	; 36

	//See notes re: Red OUTPUT INVERTED, green-matched, above.
	// Using R=5, we should be able to get away with simple math
	// see also setRed4()
	OCR0RA = 5;
     c9e:	45 e0       	ldi	r20, 0x05	; 5
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	5b bd       	out	0x2b, r21	; 43
     ca4:	4a bd       	out	0x2a, r20	; 42

	//These should handle configuring reasonable values for OCR0SA/RA/SB
#if(!defined(PWM_TESTING) || !PWM_TESTING)
	noGreen();
     ca6:	8d 9a       	sbi	0x11, 5	; 17
     ca8:	33 bd       	out	0x23, r19	; 35
     caa:	22 bd       	out	0x22, r18	; 34
     cac:	8d 98       	cbi	0x11, 5	; 17
	noRed();
     cae:	8d 9a       	sbi	0x11, 5	; 17
     cb0:	90 93 61 00 	sts	0x0061, r25
     cb4:	80 93 60 00 	sts	0x0060, r24
     cb8:	8d 98       	cbi	0x11, 5	; 17
	OCR0SA = 5;
	OCR0RA = 6;
#endif

	//See PCNF2, above...
	PCNF0 = (0<<PFIFTY0)
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	81 bb       	out	0x11, r24	; 17
//Which is OK, since pctln_vals are constants...

//	uint8_t pctl2_val = 0x3f;
//	uint8_t pctl0_val = 0x7f;
	//delayCyc_setup(asdf, (int8_t)PSC_SYNC_CYCLES);
	delayCyc_setup(asdf, (int8_t)(PSC_SYNC_CYCLES));
     cbe:	03 e1       	ldi	r16, 0x13	; 19
     cc0:	e6 e6       	ldi	r30, 0x66	; 102
     cc2:	f6 e0       	ldi	r31, 0x06	; 6

	__asm__ __volatile__
     cc4:	81 e0       	ldi	r24, 0x01	; 1

00000cc6 <dc_asm_init_asdf>:
     cc6:	98 94       	clz

00000cc8 <dc_asm_init_exit_asdf>:
     cc8:	86 bb       	out	0x16, r24	; 22

00000cca <delayCycs_asdf>:
     cca:	09 94       	ijmp

00000ccc <dc_loop_asdf>:
     ccc:	03 50       	subi	r16, 0x03	; 3
     cce:	f4 f7       	brge	.-4      	; 0xccc <dc_loop_asdf>

00000cd0 <dc_loopRemainder_asdf>:
     cd0:	0d 3f       	cpi	r16, 0xFD	; 253
     cd2:	19 f0       	breq	.+6      	; 0xcda <dc_done1_asdf>
     cd4:	0e 3f       	cpi	r16, 0xFE	; 254
     cd6:	11 f0       	breq	.+4      	; 0xcdc <dc_done_asdf>
     cd8:	00 00       	nop

00000cda <dc_done1_asdf>:
     cda:	00 00       	nop

00000cdc <dc_done_asdf>:
     cdc:	82 bb       	out	0x12, r24	; 18

	//PIM0: Interrupt Mask Register, unused
	//PIFR0: Interrupt Flag Register, unused


}
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <setColor>:
//This was #if'd into existence with IMAGE_BUFFER, but since it's only been
// used with frameBuffer, and since IMAGE_BUFFER is somewhat entangled with
// newer stuff, I'm putting it here and NOT including this file, (yet)
void setColor(uint8_t red, uint8_t green, uint8_t blue, 
               uint8_t row, uint8_t col)
{
     ce2:	0f 93       	push	r16
   red = (red > 3) ? 3 : red;
   green = (green > 3) ? 3 : green;
   blue = (blue > 3) ? 3 : blue;

   frameBuffer[row][col] = red | ((green)<<2) | ((blue)<<4);
     ce4:	90 e1       	ldi	r25, 0x10	; 16
     ce6:	29 9f       	mul	r18, r25
     ce8:	f0 01       	movw	r30, r0
     cea:	11 24       	eor	r1, r1
     cec:	e0 0f       	add	r30, r16
     cee:	f1 1d       	adc	r31, r1
     cf0:	e9 58       	subi	r30, 0x89	; 137
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
void setColor(uint8_t red, uint8_t green, uint8_t blue, 
               uint8_t row, uint8_t col)
{
   red = (red > 3) ? 3 : red;
   green = (green > 3) ? 3 : green;
   blue = (blue > 3) ? 3 : blue;
     cf4:	44 30       	cpi	r20, 0x04	; 4
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <setColor+0x18>
     cf8:	43 e0       	ldi	r20, 0x03	; 3

   frameBuffer[row][col] = red | ((green)<<2) | ((blue)<<4);
     cfa:	90 e1       	ldi	r25, 0x10	; 16
     cfc:	49 9f       	mul	r20, r25
     cfe:	90 01       	movw	r18, r0
     d00:	11 24       	eor	r1, r1
// used with frameBuffer, and since IMAGE_BUFFER is somewhat entangled with
// newer stuff, I'm putting it here and NOT including this file, (yet)
void setColor(uint8_t red, uint8_t green, uint8_t blue, 
               uint8_t row, uint8_t col)
{
   red = (red > 3) ? 3 : red;
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	08 f0       	brcs	.+2      	; 0xd08 <setColor+0x26>
     d06:	83 e0       	ldi	r24, 0x03	; 3
   green = (green > 3) ? 3 : green;
   blue = (blue > 3) ? 3 : blue;

   frameBuffer[row][col] = red | ((green)<<2) | ((blue)<<4);
     d08:	28 2b       	or	r18, r24
// newer stuff, I'm putting it here and NOT including this file, (yet)
void setColor(uint8_t red, uint8_t green, uint8_t blue, 
               uint8_t row, uint8_t col)
{
   red = (red > 3) ? 3 : red;
   green = (green > 3) ? 3 : green;
     d0a:	64 30       	cpi	r22, 0x04	; 4
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <setColor+0x2e>
     d0e:	63 e0       	ldi	r22, 0x03	; 3
   blue = (blue > 3) ? 3 : blue;

   frameBuffer[row][col] = red | ((green)<<2) | ((blue)<<4);
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	68 9f       	mul	r22, r24
     d14:	b0 01       	movw	r22, r0
     d16:	11 24       	eor	r1, r1
     d18:	62 2b       	or	r22, r18
     d1a:	60 83       	st	Z, r22
}
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <frameBufferInit>:
// This stuff was located in main() before the while loop...
// #if !COLOR_BAR_SCROLL... (which is *nearly every case* including 
//  RowSegBuffer, etc)
// it's long-since been commented-out...
void frameBufferInit(void)
{
     d20:	08 95       	ret

00000d22 <nonRSB_drawPix>:
{
   //uint8_t *setting = &(settingBuffer[rowNum][0]);
#if(defined(ROW_BUFFER) && ROW_BUFFER)
   uint8_t *color = &(rowBuffer[0]);
#else
	rowNum = rowNum*FB_HEIGHT / V_COUNT;
     d22:	24 e0       	ldi	r18, 0x04	; 4
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	2a 95       	dec	r18
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <nonRSB_drawPix+0x2>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	73 e0       	ldi	r23, 0x03	; 3
     d30:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__udivmodhi4>
     d34:	fb 01       	movw	r30, r22
//	rowNum &= 0x0f;
	uint8_t *color = &(frameBuffer[rowNum][0]);
     d36:	34 e0       	ldi	r19, 0x04	; 4
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	3a 95       	dec	r19
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <nonRSB_drawPix+0x16>
     d40:	e9 58       	subi	r30, 0x89	; 137
     d42:	fe 4f       	sbci	r31, 0xFE	; 254
	// WTF... this didn't work without DEonly_init();
	// despite the fact that writeColor() on the 161 sets DE?!
	// AND it worked on the Tiny861 without this?!
	// No... writeColor doesn't change one register, which needs to be set
	// for blue...
	DEonly_init();
     d44:	ad 9a       	sbi	0x15, 5	; 21
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	90 93 65 00 	sts	0x0065, r25
     d4e:	80 93 64 00 	sts	0x0064, r24
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9f bd       	out	0x2f, r25	; 47
     d58:	8e bd       	out	0x2e, r24	; 46
     d5a:	ad 98       	cbi	0x15, 5	; 21

   //Judging by some weird experiences re v21/22,
   // it's not entirely likely this will be predictable
   // it may try to recalculate the Z register between writeBlues...
   // hopefully not, for now. I should probably assemblify this
      writeColor(FALSE, *(color+0));
     d5c:	80 81       	ld	r24, Z

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     d5e:	48 2f       	mov	r20, r24
     d60:	42 95       	swap	r20
     d62:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     d64:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     d66:	28 2f       	mov	r18, r24
     d68:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	2e 5f       	subi	r18, 0xFE	; 254
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	30 93 61 00 	sts	0x0061, r19
     d74:	20 93 60 00 	sts	0x0060, r18
     d78:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     d7a:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
     d7c:	86 95       	lsr	r24
     d7e:	86 95       	lsr	r24
     d80:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	03 96       	adiw	r24, 0x03	; 3
     d86:	93 bd       	out	0x23, r25	; 35
     d88:	82 bd       	out	0x22, r24	; 34
     d8a:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
     d8c:	43 30       	cpi	r20, 0x03	; 3
     d8e:	11 f0       	breq	.+4      	; 0xd94 <nonRSB_drawPix+0x72>
     d90:	4c 5f       	subi	r20, 0xFC	; 252
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <nonRSB_drawPix+0x74>
     d94:	48 e0       	ldi	r20, 0x08	; 8
     d96:	ad 9a       	sbi	0x15, 5	; 21
     d98:	84 2f       	mov	r24, r20
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9f bd       	out	0x2f, r25	; 47
     d9e:	8e bd       	out	0x2e, r24	; 46
     da0:	ad 98       	cbi	0x15, 5	; 21
     da2:	87 e0       	ldi	r24, 0x07	; 7
     da4:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
     da6:	00 00       	nop
      asm("nop");
     da8:	00 00       	nop
     daa:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	d9 f7       	brne	.-10     	; 0xda6 <nonRSB_drawPix+0x84>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
     db0:	00 00       	nop
		case 3:
			asm("nop");
     db2:	00 00       	nop
		case 2:
			asm("nop");
     db4:	00 00       	nop
		case 1:
			asm("nop");
     db6:	00 00       	nop
      // (v29 has ~1/8in of noise, v30 has ~1pixel noise at the right edge)
//      TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
//               | (0<<COM1B1) | (1<<COM1B0)
//               | (1<<PWM1A) | (1<<PWM1B) );

      writeColor(TRUE, *(color+1));    
     db8:	81 81       	ldd	r24, Z+1	; 0x01

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     dba:	48 2f       	mov	r20, r24
     dbc:	42 95       	swap	r20
     dbe:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     dc0:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     dc2:	28 2f       	mov	r18, r24
     dc4:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	2e 5f       	subi	r18, 0xFE	; 254
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	30 93 61 00 	sts	0x0061, r19
     dd0:	20 93 60 00 	sts	0x0060, r18
     dd4:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     dd6:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
     dd8:	86 95       	lsr	r24
     dda:	86 95       	lsr	r24
     ddc:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	03 96       	adiw	r24, 0x03	; 3
     de2:	93 bd       	out	0x23, r25	; 35
     de4:	82 bd       	out	0x22, r24	; 34
     de6:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
     de8:	43 30       	cpi	r20, 0x03	; 3
     dea:	11 f0       	breq	.+4      	; 0xdf0 <nonRSB_drawPix+0xce>
     dec:	4c 5f       	subi	r20, 0xFC	; 252
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <nonRSB_drawPix+0xd0>
     df0:	48 e0       	ldi	r20, 0x08	; 8
     df2:	ad 9a       	sbi	0x15, 5	; 21
     df4:	84 2f       	mov	r24, r20
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9f bd       	out	0x2f, r25	; 47
     dfa:	8e bd       	out	0x2e, r24	; 46
     dfc:	ad 98       	cbi	0x15, 5	; 21
     dfe:	87 e0       	ldi	r24, 0x07	; 7
     e00:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
     e02:	00 00       	nop
      asm("nop");
     e04:	00 00       	nop
     e06:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	d9 f7       	brne	.-10     	; 0xe02 <nonRSB_drawPix+0xe0>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
     e0c:	00 00       	nop
		case 3:
			asm("nop");
     e0e:	00 00       	nop
		case 2:
			asm("nop");
     e10:	00 00       	nop
		case 1:
			asm("nop");
     e12:	00 00       	nop
//      TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
//               | (0<<COM1B1) | (1<<COM1B0)
//               | (1<<PWM1A) | (1<<PWM1B) );

      writeColor(TRUE, *(color+1));    
      writeColor(TRUE, *(color+2));    
     e14:	82 81       	ldd	r24, Z+2	; 0x02

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     e16:	48 2f       	mov	r20, r24
     e18:	42 95       	swap	r20
     e1a:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     e1c:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     e1e:	28 2f       	mov	r18, r24
     e20:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	2e 5f       	subi	r18, 0xFE	; 254
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	30 93 61 00 	sts	0x0061, r19
     e2c:	20 93 60 00 	sts	0x0060, r18
     e30:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     e32:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
     e34:	86 95       	lsr	r24
     e36:	86 95       	lsr	r24
     e38:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	03 96       	adiw	r24, 0x03	; 3
     e3e:	93 bd       	out	0x23, r25	; 35
     e40:	82 bd       	out	0x22, r24	; 34
     e42:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
     e44:	43 30       	cpi	r20, 0x03	; 3
     e46:	11 f0       	breq	.+4      	; 0xe4c <nonRSB_drawPix+0x12a>
     e48:	4c 5f       	subi	r20, 0xFC	; 252
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <nonRSB_drawPix+0x12c>
     e4c:	48 e0       	ldi	r20, 0x08	; 8
     e4e:	ad 9a       	sbi	0x15, 5	; 21
     e50:	84 2f       	mov	r24, r20
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9f bd       	out	0x2f, r25	; 47
     e56:	8e bd       	out	0x2e, r24	; 46
     e58:	ad 98       	cbi	0x15, 5	; 21
     e5a:	87 e0       	ldi	r24, 0x07	; 7
     e5c:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
     e5e:	00 00       	nop
      asm("nop");
     e60:	00 00       	nop
     e62:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	d9 f7       	brne	.-10     	; 0xe5e <nonRSB_drawPix+0x13c>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
     e68:	00 00       	nop
		case 3:
			asm("nop");
     e6a:	00 00       	nop
		case 2:
			asm("nop");
     e6c:	00 00       	nop
		case 1:
			asm("nop");
     e6e:	00 00       	nop
//               | (0<<COM1B1) | (1<<COM1B0)
//               | (1<<PWM1A) | (1<<PWM1B) );

      writeColor(TRUE, *(color+1));    
      writeColor(TRUE, *(color+2));    
      writeColor(TRUE, *(color+3)); 
     e70:	83 81       	ldd	r24, Z+3	; 0x03

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     e72:	48 2f       	mov	r20, r24
     e74:	42 95       	swap	r20
     e76:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     e78:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     e7a:	28 2f       	mov	r18, r24
     e7c:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	2e 5f       	subi	r18, 0xFE	; 254
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	30 93 61 00 	sts	0x0061, r19
     e88:	20 93 60 00 	sts	0x0060, r18
     e8c:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     e8e:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	03 96       	adiw	r24, 0x03	; 3
     e9a:	93 bd       	out	0x23, r25	; 35
     e9c:	82 bd       	out	0x22, r24	; 34
     e9e:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
     ea0:	43 30       	cpi	r20, 0x03	; 3
     ea2:	11 f0       	breq	.+4      	; 0xea8 <nonRSB_drawPix+0x186>
     ea4:	4c 5f       	subi	r20, 0xFC	; 252
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <nonRSB_drawPix+0x188>
     ea8:	48 e0       	ldi	r20, 0x08	; 8
     eaa:	ad 9a       	sbi	0x15, 5	; 21
     eac:	84 2f       	mov	r24, r20
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	9f bd       	out	0x2f, r25	; 47
     eb2:	8e bd       	out	0x2e, r24	; 46
     eb4:	ad 98       	cbi	0x15, 5	; 21
     eb6:	87 e0       	ldi	r24, 0x07	; 7
     eb8:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
     eba:	00 00       	nop
      asm("nop");
     ebc:	00 00       	nop
     ebe:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	d9 f7       	brne	.-10     	; 0xeba <nonRSB_drawPix+0x198>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
     ec4:	00 00       	nop
		case 3:
			asm("nop");
     ec6:	00 00       	nop
		case 2:
			asm("nop");
     ec8:	00 00       	nop
		case 1:
			asm("nop");
     eca:	00 00       	nop
//               | (1<<PWM1A) | (1<<PWM1B) );

      writeColor(TRUE, *(color+1));    
      writeColor(TRUE, *(color+2));    
      writeColor(TRUE, *(color+3)); 
      writeColor(TRUE, *(color+4));    
     ecc:	84 81       	ldd	r24, Z+4	; 0x04

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     ece:	48 2f       	mov	r20, r24
     ed0:	42 95       	swap	r20
     ed2:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     ed4:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     ed6:	28 2f       	mov	r18, r24
     ed8:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	2e 5f       	subi	r18, 0xFE	; 254
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	30 93 61 00 	sts	0x0061, r19
     ee4:	20 93 60 00 	sts	0x0060, r18
     ee8:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     eea:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
     eec:	86 95       	lsr	r24
     eee:	86 95       	lsr	r24
     ef0:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	03 96       	adiw	r24, 0x03	; 3
     ef6:	93 bd       	out	0x23, r25	; 35
     ef8:	82 bd       	out	0x22, r24	; 34
     efa:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
     efc:	43 30       	cpi	r20, 0x03	; 3
     efe:	11 f0       	breq	.+4      	; 0xf04 <nonRSB_drawPix+0x1e2>
     f00:	4c 5f       	subi	r20, 0xFC	; 252
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <nonRSB_drawPix+0x1e4>
     f04:	48 e0       	ldi	r20, 0x08	; 8
     f06:	ad 9a       	sbi	0x15, 5	; 21
     f08:	84 2f       	mov	r24, r20
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9f bd       	out	0x2f, r25	; 47
     f0e:	8e bd       	out	0x2e, r24	; 46
     f10:	ad 98       	cbi	0x15, 5	; 21
     f12:	87 e0       	ldi	r24, 0x07	; 7
     f14:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
     f16:	00 00       	nop
      asm("nop");
     f18:	00 00       	nop
     f1a:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	d9 f7       	brne	.-10     	; 0xf16 <nonRSB_drawPix+0x1f4>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
     f20:	00 00       	nop
		case 3:
			asm("nop");
     f22:	00 00       	nop
		case 2:
			asm("nop");
     f24:	00 00       	nop
		case 1:
			asm("nop");
     f26:	00 00       	nop

      writeColor(TRUE, *(color+1));    
      writeColor(TRUE, *(color+2));    
      writeColor(TRUE, *(color+3)); 
      writeColor(TRUE, *(color+4));    
      writeColor(TRUE, *(color+5));                
     f28:	85 81       	ldd	r24, Z+5	; 0x05

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     f2a:	48 2f       	mov	r20, r24
     f2c:	42 95       	swap	r20
     f2e:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     f30:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     f32:	28 2f       	mov	r18, r24
     f34:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	2e 5f       	subi	r18, 0xFE	; 254
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	30 93 61 00 	sts	0x0061, r19
     f40:	20 93 60 00 	sts	0x0060, r18
     f44:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     f46:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
     f48:	86 95       	lsr	r24
     f4a:	86 95       	lsr	r24
     f4c:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	03 96       	adiw	r24, 0x03	; 3
     f52:	93 bd       	out	0x23, r25	; 35
     f54:	82 bd       	out	0x22, r24	; 34
     f56:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
     f58:	43 30       	cpi	r20, 0x03	; 3
     f5a:	11 f0       	breq	.+4      	; 0xf60 <nonRSB_drawPix+0x23e>
     f5c:	4c 5f       	subi	r20, 0xFC	; 252
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <nonRSB_drawPix+0x240>
     f60:	48 e0       	ldi	r20, 0x08	; 8
     f62:	ad 9a       	sbi	0x15, 5	; 21
     f64:	84 2f       	mov	r24, r20
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9f bd       	out	0x2f, r25	; 47
     f6a:	8e bd       	out	0x2e, r24	; 46
     f6c:	ad 98       	cbi	0x15, 5	; 21
     f6e:	87 e0       	ldi	r24, 0x07	; 7
     f70:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
     f72:	00 00       	nop
      asm("nop");
     f74:	00 00       	nop
     f76:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	d9 f7       	brne	.-10     	; 0xf72 <nonRSB_drawPix+0x250>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
     f7c:	00 00       	nop
		case 3:
			asm("nop");
     f7e:	00 00       	nop
		case 2:
			asm("nop");
     f80:	00 00       	nop
		case 1:
			asm("nop");
     f82:	00 00       	nop
      writeColor(TRUE, *(color+1));    
      writeColor(TRUE, *(color+2));    
      writeColor(TRUE, *(color+3)); 
      writeColor(TRUE, *(color+4));    
      writeColor(TRUE, *(color+5));                
      writeColor(TRUE, *(color+6));  
     f84:	86 81       	ldd	r24, Z+6	; 0x06

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     f86:	48 2f       	mov	r20, r24
     f88:	42 95       	swap	r20
     f8a:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     f8c:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     f8e:	28 2f       	mov	r18, r24
     f90:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	2e 5f       	subi	r18, 0xFE	; 254
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	30 93 61 00 	sts	0x0061, r19
     f9c:	20 93 60 00 	sts	0x0060, r18
     fa0:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     fa2:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
     fa4:	86 95       	lsr	r24
     fa6:	86 95       	lsr	r24
     fa8:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	03 96       	adiw	r24, 0x03	; 3
     fae:	93 bd       	out	0x23, r25	; 35
     fb0:	82 bd       	out	0x22, r24	; 34
     fb2:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
     fb4:	43 30       	cpi	r20, 0x03	; 3
     fb6:	11 f0       	breq	.+4      	; 0xfbc <nonRSB_drawPix+0x29a>
     fb8:	4c 5f       	subi	r20, 0xFC	; 252
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <nonRSB_drawPix+0x29c>
     fbc:	48 e0       	ldi	r20, 0x08	; 8
     fbe:	ad 9a       	sbi	0x15, 5	; 21
     fc0:	84 2f       	mov	r24, r20
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9f bd       	out	0x2f, r25	; 47
     fc6:	8e bd       	out	0x2e, r24	; 46
     fc8:	ad 98       	cbi	0x15, 5	; 21
     fca:	87 e0       	ldi	r24, 0x07	; 7
     fcc:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
     fce:	00 00       	nop
      asm("nop");
     fd0:	00 00       	nop
     fd2:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	d9 f7       	brne	.-10     	; 0xfce <nonRSB_drawPix+0x2ac>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
     fd8:	00 00       	nop
		case 3:
			asm("nop");
     fda:	00 00       	nop
		case 2:
			asm("nop");
     fdc:	00 00       	nop
		case 1:
			asm("nop");
     fde:	00 00       	nop
      writeColor(TRUE, *(color+2));    
      writeColor(TRUE, *(color+3)); 
      writeColor(TRUE, *(color+4));    
      writeColor(TRUE, *(color+5));                
      writeColor(TRUE, *(color+6));  
      writeColor(TRUE, *(color+7));                         
     fe0:	87 81       	ldd	r24, Z+7	; 0x07

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
     fe2:	48 2f       	mov	r20, r24
     fe4:	42 95       	swap	r20
     fe6:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
     fe8:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
     fea:	28 2f       	mov	r18, r24
     fec:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	2e 5f       	subi	r18, 0xFE	; 254
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	30 93 61 00 	sts	0x0061, r19
     ff8:	20 93 60 00 	sts	0x0060, r18
     ffc:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
     ffe:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	03 96       	adiw	r24, 0x03	; 3
    100a:	93 bd       	out	0x23, r25	; 35
    100c:	82 bd       	out	0x22, r24	; 34
    100e:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    1010:	43 30       	cpi	r20, 0x03	; 3
    1012:	11 f0       	breq	.+4      	; 0x1018 <nonRSB_drawPix+0x2f6>
    1014:	4c 5f       	subi	r20, 0xFC	; 252
    1016:	01 c0       	rjmp	.+2      	; 0x101a <nonRSB_drawPix+0x2f8>
    1018:	48 e0       	ldi	r20, 0x08	; 8
    101a:	ad 9a       	sbi	0x15, 5	; 21
    101c:	84 2f       	mov	r24, r20
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9f bd       	out	0x2f, r25	; 47
    1022:	8e bd       	out	0x2e, r24	; 46
    1024:	ad 98       	cbi	0x15, 5	; 21
    1026:	87 e0       	ldi	r24, 0x07	; 7
    1028:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    102a:	00 00       	nop
      asm("nop");
    102c:	00 00       	nop
    102e:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	d9 f7       	brne	.-10     	; 0x102a <nonRSB_drawPix+0x308>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    1034:	00 00       	nop
		case 3:
			asm("nop");
    1036:	00 00       	nop
		case 2:
			asm("nop");
    1038:	00 00       	nop
		case 1:
			asm("nop");
    103a:	00 00       	nop
      writeColor(TRUE, *(color+3)); 
      writeColor(TRUE, *(color+4));    
      writeColor(TRUE, *(color+5));                
      writeColor(TRUE, *(color+6));  
      writeColor(TRUE, *(color+7));                         
      writeColor(TRUE, *(color+8));                         
    103c:	80 85       	ldd	r24, Z+8	; 0x08

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    103e:	48 2f       	mov	r20, r24
    1040:	42 95       	swap	r20
    1042:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    1044:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    1046:	28 2f       	mov	r18, r24
    1048:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	2e 5f       	subi	r18, 0xFE	; 254
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	30 93 61 00 	sts	0x0061, r19
    1054:	20 93 60 00 	sts	0x0060, r18
    1058:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    105a:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    105c:	86 95       	lsr	r24
    105e:	86 95       	lsr	r24
    1060:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	03 96       	adiw	r24, 0x03	; 3
    1066:	93 bd       	out	0x23, r25	; 35
    1068:	82 bd       	out	0x22, r24	; 34
    106a:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    106c:	43 30       	cpi	r20, 0x03	; 3
    106e:	11 f0       	breq	.+4      	; 0x1074 <nonRSB_drawPix+0x352>
    1070:	4c 5f       	subi	r20, 0xFC	; 252
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <nonRSB_drawPix+0x354>
    1074:	48 e0       	ldi	r20, 0x08	; 8
    1076:	ad 9a       	sbi	0x15, 5	; 21
    1078:	84 2f       	mov	r24, r20
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9f bd       	out	0x2f, r25	; 47
    107e:	8e bd       	out	0x2e, r24	; 46
    1080:	ad 98       	cbi	0x15, 5	; 21
    1082:	87 e0       	ldi	r24, 0x07	; 7
    1084:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    1086:	00 00       	nop
      asm("nop");
    1088:	00 00       	nop
    108a:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	d9 f7       	brne	.-10     	; 0x1086 <nonRSB_drawPix+0x364>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    1090:	00 00       	nop
		case 3:
			asm("nop");
    1092:	00 00       	nop
		case 2:
			asm("nop");
    1094:	00 00       	nop
		case 1:
			asm("nop");
    1096:	00 00       	nop
      writeColor(TRUE, *(color+4));    
      writeColor(TRUE, *(color+5));                
      writeColor(TRUE, *(color+6));  
      writeColor(TRUE, *(color+7));                         
      writeColor(TRUE, *(color+8));                         
		writeColor(TRUE, *(color+9));                         
    1098:	81 85       	ldd	r24, Z+9	; 0x09

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    109a:	48 2f       	mov	r20, r24
    109c:	42 95       	swap	r20
    109e:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    10a0:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    10a2:	28 2f       	mov	r18, r24
    10a4:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	2e 5f       	subi	r18, 0xFE	; 254
    10aa:	3f 4f       	sbci	r19, 0xFF	; 255
    10ac:	30 93 61 00 	sts	0x0061, r19
    10b0:	20 93 60 00 	sts	0x0060, r18
    10b4:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    10b6:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    10b8:	86 95       	lsr	r24
    10ba:	86 95       	lsr	r24
    10bc:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	03 96       	adiw	r24, 0x03	; 3
    10c2:	93 bd       	out	0x23, r25	; 35
    10c4:	82 bd       	out	0x22, r24	; 34
    10c6:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    10c8:	43 30       	cpi	r20, 0x03	; 3
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <nonRSB_drawPix+0x3ae>
    10cc:	4c 5f       	subi	r20, 0xFC	; 252
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <nonRSB_drawPix+0x3b0>
    10d0:	48 e0       	ldi	r20, 0x08	; 8
    10d2:	ad 9a       	sbi	0x15, 5	; 21
    10d4:	84 2f       	mov	r24, r20
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9f bd       	out	0x2f, r25	; 47
    10da:	8e bd       	out	0x2e, r24	; 46
    10dc:	ad 98       	cbi	0x15, 5	; 21
    10de:	87 e0       	ldi	r24, 0x07	; 7
    10e0:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    10e2:	00 00       	nop
      asm("nop");
    10e4:	00 00       	nop
    10e6:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	d9 f7       	brne	.-10     	; 0x10e2 <nonRSB_drawPix+0x3c0>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    10ec:	00 00       	nop
		case 3:
			asm("nop");
    10ee:	00 00       	nop
		case 2:
			asm("nop");
    10f0:	00 00       	nop
		case 1:
			asm("nop");
    10f2:	00 00       	nop
      writeColor(TRUE, *(color+5));                
      writeColor(TRUE, *(color+6));  
      writeColor(TRUE, *(color+7));                         
      writeColor(TRUE, *(color+8));                         
		writeColor(TRUE, *(color+9));                         
      writeColor(TRUE, *(color+10));                         
    10f4:	82 85       	ldd	r24, Z+10	; 0x0a

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    10f6:	48 2f       	mov	r20, r24
    10f8:	42 95       	swap	r20
    10fa:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    10fc:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    10fe:	28 2f       	mov	r18, r24
    1100:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	2e 5f       	subi	r18, 0xFE	; 254
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	30 93 61 00 	sts	0x0061, r19
    110c:	20 93 60 00 	sts	0x0060, r18
    1110:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    1112:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    1114:	86 95       	lsr	r24
    1116:	86 95       	lsr	r24
    1118:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	03 96       	adiw	r24, 0x03	; 3
    111e:	93 bd       	out	0x23, r25	; 35
    1120:	82 bd       	out	0x22, r24	; 34
    1122:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    1124:	43 30       	cpi	r20, 0x03	; 3
    1126:	11 f0       	breq	.+4      	; 0x112c <nonRSB_drawPix+0x40a>
    1128:	4c 5f       	subi	r20, 0xFC	; 252
    112a:	01 c0       	rjmp	.+2      	; 0x112e <nonRSB_drawPix+0x40c>
    112c:	48 e0       	ldi	r20, 0x08	; 8
    112e:	ad 9a       	sbi	0x15, 5	; 21
    1130:	84 2f       	mov	r24, r20
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9f bd       	out	0x2f, r25	; 47
    1136:	8e bd       	out	0x2e, r24	; 46
    1138:	ad 98       	cbi	0x15, 5	; 21
    113a:	87 e0       	ldi	r24, 0x07	; 7
    113c:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    113e:	00 00       	nop
      asm("nop");
    1140:	00 00       	nop
    1142:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	d9 f7       	brne	.-10     	; 0x113e <nonRSB_drawPix+0x41c>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    1148:	00 00       	nop
		case 3:
			asm("nop");
    114a:	00 00       	nop
		case 2:
			asm("nop");
    114c:	00 00       	nop
		case 1:
			asm("nop");
    114e:	00 00       	nop
      writeColor(TRUE, *(color+6));  
      writeColor(TRUE, *(color+7));                         
      writeColor(TRUE, *(color+8));                         
		writeColor(TRUE, *(color+9));                         
      writeColor(TRUE, *(color+10));                         
      writeColor(TRUE, *(color+11));                         
    1150:	83 85       	ldd	r24, Z+11	; 0x0b

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    1152:	48 2f       	mov	r20, r24
    1154:	42 95       	swap	r20
    1156:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    1158:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    115a:	28 2f       	mov	r18, r24
    115c:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	2e 5f       	subi	r18, 0xFE	; 254
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	30 93 61 00 	sts	0x0061, r19
    1168:	20 93 60 00 	sts	0x0060, r18
    116c:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    116e:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    1170:	86 95       	lsr	r24
    1172:	86 95       	lsr	r24
    1174:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	03 96       	adiw	r24, 0x03	; 3
    117a:	93 bd       	out	0x23, r25	; 35
    117c:	82 bd       	out	0x22, r24	; 34
    117e:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    1180:	43 30       	cpi	r20, 0x03	; 3
    1182:	11 f0       	breq	.+4      	; 0x1188 <nonRSB_drawPix+0x466>
    1184:	4c 5f       	subi	r20, 0xFC	; 252
    1186:	01 c0       	rjmp	.+2      	; 0x118a <nonRSB_drawPix+0x468>
    1188:	48 e0       	ldi	r20, 0x08	; 8
    118a:	ad 9a       	sbi	0x15, 5	; 21
    118c:	84 2f       	mov	r24, r20
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9f bd       	out	0x2f, r25	; 47
    1192:	8e bd       	out	0x2e, r24	; 46
    1194:	ad 98       	cbi	0x15, 5	; 21
    1196:	87 e0       	ldi	r24, 0x07	; 7
    1198:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    119a:	00 00       	nop
      asm("nop");
    119c:	00 00       	nop
    119e:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	d9 f7       	brne	.-10     	; 0x119a <nonRSB_drawPix+0x478>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    11a4:	00 00       	nop
		case 3:
			asm("nop");
    11a6:	00 00       	nop
		case 2:
			asm("nop");
    11a8:	00 00       	nop
		case 1:
			asm("nop");
    11aa:	00 00       	nop
      writeColor(TRUE, *(color+7));                         
      writeColor(TRUE, *(color+8));                         
		writeColor(TRUE, *(color+9));                         
      writeColor(TRUE, *(color+10));                         
      writeColor(TRUE, *(color+11));                         
      writeColor(TRUE, *(color+12));                         
    11ac:	84 85       	ldd	r24, Z+12	; 0x0c

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    11ae:	48 2f       	mov	r20, r24
    11b0:	42 95       	swap	r20
    11b2:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    11b4:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    11b6:	28 2f       	mov	r18, r24
    11b8:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	2e 5f       	subi	r18, 0xFE	; 254
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	30 93 61 00 	sts	0x0061, r19
    11c4:	20 93 60 00 	sts	0x0060, r18
    11c8:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    11ca:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    11cc:	86 95       	lsr	r24
    11ce:	86 95       	lsr	r24
    11d0:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	03 96       	adiw	r24, 0x03	; 3
    11d6:	93 bd       	out	0x23, r25	; 35
    11d8:	82 bd       	out	0x22, r24	; 34
    11da:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    11dc:	43 30       	cpi	r20, 0x03	; 3
    11de:	11 f0       	breq	.+4      	; 0x11e4 <nonRSB_drawPix+0x4c2>
    11e0:	4c 5f       	subi	r20, 0xFC	; 252
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <nonRSB_drawPix+0x4c4>
    11e4:	48 e0       	ldi	r20, 0x08	; 8
    11e6:	ad 9a       	sbi	0x15, 5	; 21
    11e8:	84 2f       	mov	r24, r20
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	9f bd       	out	0x2f, r25	; 47
    11ee:	8e bd       	out	0x2e, r24	; 46
    11f0:	ad 98       	cbi	0x15, 5	; 21
    11f2:	87 e0       	ldi	r24, 0x07	; 7
    11f4:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    11f6:	00 00       	nop
      asm("nop");
    11f8:	00 00       	nop
    11fa:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	d9 f7       	brne	.-10     	; 0x11f6 <nonRSB_drawPix+0x4d4>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    1200:	00 00       	nop
		case 3:
			asm("nop");
    1202:	00 00       	nop
		case 2:
			asm("nop");
    1204:	00 00       	nop
		case 1:
			asm("nop");
    1206:	00 00       	nop
      writeColor(TRUE, *(color+8));                         
		writeColor(TRUE, *(color+9));                         
      writeColor(TRUE, *(color+10));                         
      writeColor(TRUE, *(color+11));                         
      writeColor(TRUE, *(color+12));                         
      writeColor(TRUE, *(color+13));                         
    1208:	85 85       	ldd	r24, Z+13	; 0x0d

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    120a:	48 2f       	mov	r20, r24
    120c:	42 95       	swap	r20
    120e:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    1210:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    1212:	28 2f       	mov	r18, r24
    1214:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	2e 5f       	subi	r18, 0xFE	; 254
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	30 93 61 00 	sts	0x0061, r19
    1220:	20 93 60 00 	sts	0x0060, r18
    1224:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    1226:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    1228:	86 95       	lsr	r24
    122a:	86 95       	lsr	r24
    122c:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	03 96       	adiw	r24, 0x03	; 3
    1232:	93 bd       	out	0x23, r25	; 35
    1234:	82 bd       	out	0x22, r24	; 34
    1236:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    1238:	43 30       	cpi	r20, 0x03	; 3
    123a:	11 f0       	breq	.+4      	; 0x1240 <nonRSB_drawPix+0x51e>
    123c:	4c 5f       	subi	r20, 0xFC	; 252
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <nonRSB_drawPix+0x520>
    1240:	48 e0       	ldi	r20, 0x08	; 8
    1242:	ad 9a       	sbi	0x15, 5	; 21
    1244:	84 2f       	mov	r24, r20
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9f bd       	out	0x2f, r25	; 47
    124a:	8e bd       	out	0x2e, r24	; 46
    124c:	ad 98       	cbi	0x15, 5	; 21
    124e:	87 e0       	ldi	r24, 0x07	; 7
    1250:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    1252:	00 00       	nop
      asm("nop");
    1254:	00 00       	nop
    1256:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	d9 f7       	brne	.-10     	; 0x1252 <nonRSB_drawPix+0x530>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    125c:	00 00       	nop
		case 3:
			asm("nop");
    125e:	00 00       	nop
		case 2:
			asm("nop");
    1260:	00 00       	nop
		case 1:
			asm("nop");
    1262:	00 00       	nop
		writeColor(TRUE, *(color+9));                         
      writeColor(TRUE, *(color+10));                         
      writeColor(TRUE, *(color+11));                         
      writeColor(TRUE, *(color+12));                         
      writeColor(TRUE, *(color+13));                         
      writeColor(TRUE, *(color+14));                         
    1264:	86 85       	ldd	r24, Z+14	; 0x0e

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    1266:	48 2f       	mov	r20, r24
    1268:	42 95       	swap	r20
    126a:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    126c:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    126e:	28 2f       	mov	r18, r24
    1270:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	2e 5f       	subi	r18, 0xFE	; 254
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	30 93 61 00 	sts	0x0061, r19
    127c:	20 93 60 00 	sts	0x0060, r18
    1280:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    1282:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    1284:	86 95       	lsr	r24
    1286:	86 95       	lsr	r24
    1288:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	03 96       	adiw	r24, 0x03	; 3
    128e:	93 bd       	out	0x23, r25	; 35
    1290:	82 bd       	out	0x22, r24	; 34
    1292:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    1294:	43 30       	cpi	r20, 0x03	; 3
    1296:	11 f0       	breq	.+4      	; 0x129c <nonRSB_drawPix+0x57a>
    1298:	4c 5f       	subi	r20, 0xFC	; 252
    129a:	01 c0       	rjmp	.+2      	; 0x129e <nonRSB_drawPix+0x57c>
    129c:	48 e0       	ldi	r20, 0x08	; 8
    129e:	ad 9a       	sbi	0x15, 5	; 21
    12a0:	84 2f       	mov	r24, r20
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9f bd       	out	0x2f, r25	; 47
    12a6:	8e bd       	out	0x2e, r24	; 46
    12a8:	ad 98       	cbi	0x15, 5	; 21
    12aa:	87 e0       	ldi	r24, 0x07	; 7
    12ac:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    12ae:	00 00       	nop
      asm("nop");
    12b0:	00 00       	nop
    12b2:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	d9 f7       	brne	.-10     	; 0x12ae <nonRSB_drawPix+0x58c>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    12b8:	00 00       	nop
		case 3:
			asm("nop");
    12ba:	00 00       	nop
		case 2:
			asm("nop");
    12bc:	00 00       	nop
		case 1:
			asm("nop");
    12be:	00 00       	nop
      writeColor(TRUE, *(color+10));                         
      writeColor(TRUE, *(color+11));                         
      writeColor(TRUE, *(color+12));                         
      writeColor(TRUE, *(color+13));                         
      writeColor(TRUE, *(color+14));                         
      writeColor(TRUE, *(color+15));   
    12c0:	87 85       	ldd	r24, Z+15	; 0x0f

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;
    12c2:	48 2f       	mov	r20, r24
    12c4:	42 95       	swap	r20
    12c6:	43 70       	andi	r20, 0x03	; 3

	setRed4(redVal);
    12c8:	8d 9a       	sbi	0x11, 5	; 17

#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
    12ca:	28 2f       	mov	r18, r24
    12cc:	23 70       	andi	r18, 0x03	; 3
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	2e 5f       	subi	r18, 0xFE	; 254
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	30 93 61 00 	sts	0x0061, r19
    12d8:	20 93 60 00 	sts	0x0060, r18
    12dc:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    12de:	8d 9a       	sbi	0x11, 5	; 17
#if(defined(__AVR_AT90PWM161__))

 void writeColor(uint8_t includeDelay, uint8_t colorVal)
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
    12e0:	86 95       	lsr	r24
    12e2:	86 95       	lsr	r24
    12e4:	83 70       	andi	r24, 0x03	; 3
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
	setGreen4(greenVal);
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	03 96       	adiw	r24, 0x03	; 3
    12ea:	93 bd       	out	0x23, r25	; 35
    12ec:	82 bd       	out	0x22, r24	; 34
    12ee:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    12f0:	43 30       	cpi	r20, 0x03	; 3
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <nonRSB_drawPix+0x5d6>
    12f4:	4c 5f       	subi	r20, 0xFC	; 252
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <nonRSB_drawPix+0x5d8>
    12f8:	48 e0       	ldi	r20, 0x08	; 8
    12fa:	ad 9a       	sbi	0x15, 5	; 21
    12fc:	84 2f       	mov	r24, r20
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9f bd       	out	0x2f, r25	; 47
    1302:	8e bd       	out	0x2e, r24	; 46
    1304:	ad 98       	cbi	0x15, 5	; 21
    1306:	87 e0       	ldi	r24, 0x07	; 7
    1308:	90 e0       	ldi	r25, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    130a:	00 00       	nop
      asm("nop");
    130c:	00 00       	nop
    130e:	01 97       	sbiw	r24, 0x01	; 1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	d9 f7       	brne	.-10     	; 0x130a <nonRSB_drawPix+0x5e8>
		case 6:
			asm("nop");
		case 5:
			asm("nop");
		case 4:
			asm("nop");
    1314:	00 00       	nop
		case 3:
			asm("nop");
    1316:	00 00       	nop
		case 2:
			asm("nop");
    1318:	00 00       	nop
		case 1:
			asm("nop");
    131a:	00 00       	nop
 {
	uint8_t redVal = colorVal & 0x03;
	uint8_t greenVal = (colorVal >> 2) & 0x03;
	uint8_t blueVal = (colorVal >> 4) & 0x03;

	setRed4(redVal);
    131c:	8d 9a       	sbi	0x11, 5	; 17
    131e:	22 e0       	ldi	r18, 0x02	; 2
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	30 93 61 00 	sts	0x0061, r19
    1326:	20 93 60 00 	sts	0x0060, r18
    132a:	8d 98       	cbi	0x11, 5	; 17
	setGreen4(greenVal);
    132c:	8d 9a       	sbi	0x11, 5	; 17
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	93 bd       	out	0x23, r25	; 35
    1334:	82 bd       	out	0x22, r24	; 34
    1336:	8d 98       	cbi	0x11, 5	; 17
	setBlue4(blueVal);
    1338:	ad 9a       	sbi	0x15, 5	; 21
    133a:	84 e0       	ldi	r24, 0x04	; 4
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9f bd       	out	0x2f, r25	; 47
    1340:	8e bd       	out	0x2e, r24	; 46
    1342:	ad 98       	cbi	0x15, 5	; 21
		//a/o v62: (Original notes removed)
		//OCR1D controls RED... >=6 is full-red
		// Setting this here indicates where the drawing has completed
		// This is handy for determining timing, stretching, etc...
		//OCR1D = 6; //0;
		fullRed();
    1344:	8d 9a       	sbi	0x11, 5	; 17
    1346:	45 e0       	ldi	r20, 0x05	; 5
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	50 93 61 00 	sts	0x0061, r21
    134e:	40 93 60 00 	sts	0x0060, r20
    1352:	8d 98       	cbi	0x11, 5	; 17

		lvds_disableGreen_MakeClockInsensitiveToDT();

      //fullBlue();
      //Nada_fromDEonly();
		Nada_init();
    1354:	ad 9a       	sbi	0x15, 5	; 21
    1356:	30 93 65 00 	sts	0x0065, r19
    135a:	20 93 64 00 	sts	0x0064, r18
    135e:	9f bd       	out	0x2f, r25	; 47
    1360:	8e bd       	out	0x2e, r24	; 46
    1362:	ad 98       	cbi	0x15, 5	; 21
    1364:	08 95       	ret

00001366 <setSpriteSkyColorOverride>:
sprite_t *skyOverrideSprite = NULL;
//uint8_t skyOverridePalette;

void setSpriteSkyColorOverride(sprite_t *sprite) //, uint8_t palette)
{
	skyOverrideSprite = sprite;
    1366:	90 93 6b 01 	sts	0x016B, r25
    136a:	80 93 6a 01 	sts	0x016A, r24
    136e:	08 95       	ret

00001370 <getRawPixelVal>:

uint8_t getRawPixelVal(sprite_t *sprite, uint8_t row, uint8_t col)
{

	return
		(((pgm_read_byte((uint8_t *)(&(sprite->p_image[ \
    1370:	24 2f       	mov	r18, r20
    1372:	26 95       	lsr	r18
    1374:	26 95       	lsr	r18
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	54 e0       	ldi	r21, 0x04	; 4
    137a:	65 9f       	mul	r22, r21
    137c:	20 0d       	add	r18, r0
    137e:	31 1d       	adc	r19, r1
    1380:	11 24       	eor	r1, r1
    1382:	dc 01       	movw	r26, r24
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	e2 0f       	add	r30, r18
    138a:	f3 1f       	adc	r31, r19
    138c:	84 91       	lpm	r24, Z
					(row)*PACKED_BYTES_PER_ROW + (col)/PIXELS_PER_PACKAGE])))\
		  )>>((col)%PIXELS_PER_PACKAGE)*(PACKED_BITS_PER_PIXEL))&0x03);
    138e:	43 70       	andi	r20, 0x03	; 3
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	44 0f       	add	r20, r20
    1394:	02 c0       	rjmp	.+4      	; 0x139a <getRawPixelVal+0x2a>
    1396:	95 95       	asr	r25
    1398:	87 95       	ror	r24
    139a:	4a 95       	dec	r20
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <getRawPixelVal+0x26>
}
    139e:	83 70       	andi	r24, 0x03	; 3
    13a0:	08 95       	ret

000013a2 <rawPixValToGimpColorVal>:

uint8_t rawPixValToGimpColorVal(uint8_t rawPixelVal, sprite_t *sprite, 
																			uint8_t palette)
{
	return 
	pgm_read_byte(
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	24 e0       	ldi	r18, 0x04	; 4
    13a6:	42 9f       	mul	r20, r18
    13a8:	80 0d       	add	r24, r0
    13aa:	91 1d       	adc	r25, r1
    13ac:	11 24       	eor	r1, r1
    13ae:	db 01       	movw	r26, r22
    13b0:	14 96       	adiw	r26, 0x04	; 4
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	15 97       	sbiw	r26, 0x05	; 5
    13b8:	e8 0f       	add	r30, r24
    13ba:	f9 1f       	adc	r31, r25
    13bc:	84 91       	lpm	r24, Z
			(uint8_t *)(&(sprite->p_palette[ (palette)*4 + rawPixelVal ])));
}
    13be:	08 95       	ret

000013c0 <getGimpColorVal>:

//This doesn't exactly work as expected... see drawSpriteRow for a better
//implementation
uint8_t getGimpColorVal(sprite_t *sprite, uint8_t palette, uint8_t row, 
																			 	uint8_t col)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	18 2f       	mov	r17, r24
    13d0:	79 2f       	mov	r23, r25
    13d2:	06 2f       	mov	r16, r22
    13d4:	64 2f       	mov	r22, r20
	//No shit, this entire function was a single "line" of code, at one
	//point... (broken up a/o v63)

	//This is the value as-seen in the icon's .h file... (0-3)
	uint8_t rawPixelVal = getRawPixelVal(sprite, row, col);
    13d6:	42 2f       	mov	r20, r18
    13d8:	79 83       	std	Y+1, r23	; 0x01
    13da:	0e 94 b8 09 	call	0x1370	; 0x1370 <getRawPixelVal>


	//The sky is always 0, as of recently (v63)
	// That's not to say the same color isn't used for other purposes
	// this isn't that smart...
	if((rawPixelVal == 0) && (skyOverrideSprite != NULL))
    13de:	79 81       	ldd	r23, Y+1	; 0x01
    13e0:	81 11       	cpse	r24, r1
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <getGimpColorVal+0x36>
    13e4:	20 91 6a 01 	lds	r18, 0x016A
    13e8:	30 91 6b 01 	lds	r19, 0x016B
    13ec:	21 15       	cp	r18, r1
    13ee:	31 05       	cpc	r19, r1
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <getGimpColorVal+0x36>
    13f2:	12 2f       	mov	r17, r18
    13f4:	73 2f       	mov	r23, r19
	{
		sprite = skyOverrideSprite;
		//palette = skyOverridePalette;
	}

	return rawPixValToGimpColorVal(rawPixelVal, sprite, palette); 
    13f6:	40 2f       	mov	r20, r16
    13f8:	61 2f       	mov	r22, r17
//	pgm_read_byte(
//			(uint8_t *)(&(sprite->p_palette[ (palette)*4 + rawPixelVal ])));
}
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
	{
		sprite = skyOverrideSprite;
		//palette = skyOverridePalette;
	}

	return rawPixValToGimpColorVal(rawPixelVal, sprite, palette); 
    1404:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <rawPixValToGimpColorVal>

00001408 <getRawPixelValCOIN>:
uint8_t getRawPixelValCOIN(uint8_t spritePhase, uint8_t row, uint8_t col)
{
	const uint8_t * p_image;

	//Is this better accomplished as a switch-statement or with math...?
	switch(spritePhase%8)
    1408:	87 70       	andi	r24, 0x07	; 7
    140a:	86 30       	cpi	r24, 0x06	; 6
    140c:	48 f4       	brcc	.+18     	; 0x1420 <getRawPixelValCOIN+0x18>
    140e:	e8 2f       	mov	r30, r24
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	eb 5b       	subi	r30, 0xBB	; 187
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <getRawPixelValCOIN+0x1c>
    1420:	8e e8       	ldi	r24, 0x8E	; 142
    1422:	91 e0       	ldi	r25, 0x01	; 1
			p_image = pgm_imageCOIN3;
			break;
	}	

   return
      (((pgm_read_byte((uint8_t *)(&(p_image[ \
    1424:	e4 2f       	mov	r30, r20
    1426:	e6 95       	lsr	r30
    1428:	e6 95       	lsr	r30
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	24 e0       	ldi	r18, 0x04	; 4
    142e:	62 9f       	mul	r22, r18
    1430:	e0 0d       	add	r30, r0
    1432:	f1 1d       	adc	r31, r1
    1434:	11 24       	eor	r1, r1
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	e4 91       	lpm	r30, Z
               (row)*PACKED_BYTES_PER_ROW + (col)/PIXELS_PER_PACKAGE])))\
        )>>((col)%PIXELS_PER_PACKAGE)*(PACKED_BITS_PER_PIXEL))&0x03);
    143c:	43 70       	andi	r20, 0x03	; 3
    143e:	8e 2f       	mov	r24, r30
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	44 0f       	add	r20, r20
    1444:	02 c0       	rjmp	.+4      	; 0x144a <getRawPixelValCOIN+0x42>
    1446:	95 95       	asr	r25
    1448:	87 95       	ror	r24
    144a:	4a 95       	dec	r20
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <getRawPixelValCOIN+0x3e>
}  
    144e:	83 70       	andi	r24, 0x03	; 3
    1450:	08 95       	ret

00001452 <fbQuestion_hitDetected>:
sprite_t *p_selectedSprite = &spriteCOIN; //GOOMBA; //FLOWER; //&spriteQ;
sprite_t *p_nextSprite = NULL;

void fbQuestion_hitDetected(void)
{
	if( (p_selectedSprite == &spriteQ)
    1452:	80 91 04 01 	lds	r24, 0x0104
    1456:	90 91 05 01 	lds	r25, 0x0105
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	8e 33       	cpi	r24, 0x3E	; 62
    145e:	92 07       	cpc	r25, r18
    1460:	09 f0       	breq	.+2      	; 0x1464 <fbQuestion_hitDetected+0x12>
    1462:	41 c0       	rjmp	.+130    	; 0x14e6 <fbQuestion_hitDetected+0x94>
#if (!defined(IMMEDIATE) || !IMMEDIATE)
	    && (p_nextSprite == NULL)
    1464:	80 91 66 01 	lds	r24, 0x0166
    1468:	90 91 67 01 	lds	r25, 0x0167
    146c:	89 2b       	or	r24, r25
    146e:	09 f0       	breq	.+2      	; 0x1472 <fbQuestion_hitDetected+0x20>
    1470:	4b c0       	rjmp	.+150    	; 0x1508 <fbQuestion_hitDetected+0xb6>
#endif
	  )
	{
		qCount = 0;
    1472:	10 92 68 01 	sts	0x0168, r1
#ifndef RANDOM_OVERRIDE
		//Just trying to get some randomness up in hea
		switch(((adc_getValue()*3+callCount+qCount))%8)
    1476:	0e 94 2b 04 	call	0x856	; 0x856 <adc_getValue>
    147a:	40 91 68 01 	lds	r20, 0x0168
    147e:	20 91 69 01 	lds	r18, 0x0169
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	24 0f       	add	r18, r20
    1486:	31 1d       	adc	r19, r1
    1488:	ac 01       	movw	r20, r24
    148a:	44 0f       	add	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	48 0f       	add	r20, r24
    1490:	59 1f       	adc	r21, r25
    1492:	24 0f       	add	r18, r20
    1494:	35 1f       	adc	r19, r21
    1496:	27 70       	andi	r18, 0x07	; 7
    1498:	33 27       	eor	r19, r19
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	b1 f0       	breq	.+44     	; 0x14cc <fbQuestion_hitDetected+0x7a>
    14a0:	48 f4       	brcc	.+18     	; 0x14b4 <fbQuestion_hitDetected+0x62>
    14a2:	21 15       	cp	r18, r1
    14a4:	31 05       	cpc	r19, r1
    14a6:	79 f0       	breq	.+30     	; 0x14c6 <fbQuestion_hitDetected+0x74>
    14a8:	21 30       	cpi	r18, 0x01	; 1
    14aa:	31 05       	cpc	r19, r1
    14ac:	c9 f4       	brne	.+50     	; 0x14e0 <fbQuestion_hitDetected+0x8e>
		{
			case 0:
				p_nextSprite = &spriteFLOWER;
				break;
			case 1:
				p_nextSprite = &sprite1UP;
    14ae:	89 e2       	ldi	r24, 0x29	; 41
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <fbQuestion_hitDetected+0x7e>
	  )
	{
		qCount = 0;
#ifndef RANDOM_OVERRIDE
		//Just trying to get some randomness up in hea
		switch(((adc_getValue()*3+callCount+qCount))%8)
    14b4:	23 30       	cpi	r18, 0x03	; 3
    14b6:	31 05       	cpc	r19, r1
    14b8:	81 f0       	breq	.+32     	; 0x14da <fbQuestion_hitDetected+0x88>
    14ba:	24 30       	cpi	r18, 0x04	; 4
    14bc:	31 05       	cpc	r19, r1
    14be:	81 f4       	brne	.+32     	; 0x14e0 <fbQuestion_hitDetected+0x8e>
				break;
			case 3:
				p_nextSprite = &spriteSTAR;
				break;
			case 4:
				p_nextSprite = &spriteGOOMBA;
    14c0:	8d e0       	ldi	r24, 0x0D	; 13
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <fbQuestion_hitDetected+0x7e>
#else
		switch(RANDOM_OVERRIDE)
#endif
		{
			case 0:
				p_nextSprite = &spriteFLOWER;
    14c6:	84 e1       	ldi	r24, 0x14	; 20
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <fbQuestion_hitDetected+0x7e>
				break;
			case 1:
				p_nextSprite = &sprite1UP;
				break;
			case 2:
				p_nextSprite = &spriteBIG;
    14cc:	82 e2       	ldi	r24, 0x22	; 34
    14ce:	91 e0       	ldi	r25, 0x01	; 1
		{
			case 0:
				p_nextSprite = &spriteFLOWER;
				break;
			case 1:
				p_nextSprite = &sprite1UP;
    14d0:	90 93 67 01 	sts	0x0167, r25
    14d4:	80 93 66 01 	sts	0x0166, r24
    14d8:	08 95       	ret
				break;
			case 2:
				p_nextSprite = &spriteBIG;
				break;
			case 3:
				p_nextSprite = &spriteSTAR;
    14da:	8b e1       	ldi	r24, 0x1B	; 27
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	f8 cf       	rjmp	.-16     	; 0x14d0 <fbQuestion_hitDetected+0x7e>
				break;
			case 7:
				p_selectedSprite = &spriteSOLID;
				break;
*/			default:
				p_nextSprite = &spriteCOIN;
    14e0:	86 e0       	ldi	r24, 0x06	; 6
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	f5 cf       	rjmp	.-22     	; 0x14d0 <fbQuestion_hitDetected+0x7e>
	//briefly before scroll-back-to-question starts...
	// so there's no reason to test for KILLABLE
	// since it can't be killed when it's scrolling.
	// There's probably a tiny fraction of a second window where it is
	// possible to hit it when it's blue, and kill it... but it's TINY.
	else if( (p_selectedSprite == &spriteGOOMBA)
    14e6:	8d 50       	subi	r24, 0x0D	; 13
    14e8:	91 40       	sbci	r25, 0x01	; 1
    14ea:	71 f4       	brne	.+28     	; 0x1508 <fbQuestion_hitDetected+0xb6>
				&& (p_nextSprite == NULL) )
    14ec:	80 91 66 01 	lds	r24, 0x0166
    14f0:	90 91 67 01 	lds	r25, 0x0167
    14f4:	89 2b       	or	r24, r25
    14f6:	41 f4       	brne	.+16     	; 0x1508 <fbQuestion_hitDetected+0xb6>
//			   && ((qCount > 0) && (qCount < 16)) )
//			   && (qCount < GOOMBA_KILLABLE_QCOUNT) )
	{
		qCount = 0;
    14f8:	10 92 68 01 	sts	0x0168, r1
		p_selectedSprite = &spriteDEADGOOMBA;
    14fc:	80 e3       	ldi	r24, 0x30	; 48
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	90 93 05 01 	sts	0x0105, r25
    1504:	80 93 04 01 	sts	0x0104, r24
    1508:	08 95       	ret

0000150a <getSpritePalette>:

}

uint8_t getSpritePalette(sprite_t *p_thisSprite, uint8_t spritePhase,
																	uint8_t spriteRow)
{
    150a:	fc 01       	movw	r30, r24
    150c:	86 2f       	mov	r24, r22

	uint8_t thePalette;
	
	
	if(p_thisSprite == &spriteFLOWER)
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	e4 31       	cpi	r30, 0x14	; 20
    1512:	f9 07       	cpc	r31, r25
    1514:	61 f4       	brne	.+24     	; 0x152e <getSpritePalette+0x24>
	{
		if(spriteRow<FLOWER_PALETTE1_ROW)
    1516:	48 30       	cpi	r20, 0x08	; 8
    1518:	30 f5       	brcc	.+76     	; 0x1566 <getSpritePalette+0x5c>
			//data = getGimpColorVal(&spriteFLOWER,
			  thePalette = spritePhase%(spriteFLOWER.numPalettes-1) + 1; 
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	60 91 1a 01 	lds	r22, 0x011A
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	61 50       	subi	r22, 0x01	; 1
    1524:	71 09       	sbc	r23, r1
    1526:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__divmodhi4>
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	08 95       	ret
					 //spriteRow, qCol);
		else
			thePalette = 0;
			//data = getGimpColorVal(&spriteFLOWER, 0, spriteRow, qCol);
	}
	else if(p_thisSprite == &spriteGOOMBA)
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	ed 30       	cpi	r30, 0x0D	; 13
    1532:	f9 07       	cpc	r31, r25
    1534:	99 f4       	brne	.+38     	; 0x155c <getSpritePalette+0x52>
		//uint8_t palette; // = qCount * p_thisSprite->numPalettes / 16;
		//if(palette >= p_thisSprite->numPalettes)
		//	palette = p_thisSprite->numPalettes-1;

			
		switch(spritePhase)
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	80 31       	cpi	r24, 0x10	; 16
    153a:	91 05       	cpc	r25, r1
    153c:	58 f4       	brcc	.+22     	; 0x1554 <getSpritePalette+0x4a>
    153e:	fc 01       	movw	r30, r24
    1540:	e8 5d       	subi	r30, 0xD8	; 216
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__tablejump2__>
					thePalette = 1;
					break;
				case 7:
				case 8:
				case 9:
					thePalette = 2;
    1548:	82 e0       	ldi	r24, 0x02	; 2
					break;
    154a:	08 95       	ret
				case 10:
				case 11:
				case 12:
					thePalette = 3;
    154c:	83 e0       	ldi	r24, 0x03	; 3
					break;
    154e:	08 95       	ret
				case 13:
				case 14:
				case 15:
					thePalette = 4;
    1550:	84 e0       	ldi	r24, 0x04	; 4
					break;
    1552:	08 95       	ret
				default:
					thePalette = p_thisSprite->numPalettes-1;
    1554:	80 91 13 01 	lds	r24, 0x0113
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	08 95       	ret
		//data = getGimpColorVal(&spriteGOOMBA, palette, spriteRow, gCol);
	}
	else
	{
		//data = getGimpColorVal(p_thisSprite, 
		  thePalette = spritePhase%p_thisSprite->numPalettes;
    155c:	66 81       	ldd	r22, Z+6	; 0x06
    155e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__udivmodqi4>
    1562:	89 2f       	mov	r24, r25
    1564:	08 95       	ret
		if(spriteRow<FLOWER_PALETTE1_ROW)
			//data = getGimpColorVal(&spriteFLOWER,
			  thePalette = spritePhase%(spriteFLOWER.numPalettes-1) + 1; 
					 //spriteRow, qCol);
		else
			thePalette = 0;
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	08 95       	ret
					thePalette = 0;
					break;
				case 4:
				case 5:
				case 6:
					thePalette = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
		  thePalette = spritePhase%p_thisSprite->numPalettes;
						//spriteRow, qCol);
	}

	return thePalette;
}
    156c:	08 95       	ret

0000156e <getSpritePhase>:
// vOffset is whether the sprite is above the frame-buffer or below...
// centered = 0
// so, e.g. vOffset = spriteRow - rowToDrawAt
uint8_t getSpritePhase(sprite_t *p_thisSprite, uint8_t qCount, int8_t
		vOffset)
{
    156e:	9c 01       	movw	r18, r24
    1570:	86 2f       	mov	r24, r22
	uint8_t spritePhase = qCount;

	if(p_thisSprite == &spriteQ)
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	2e 33       	cpi	r18, 0x3E	; 62
    1576:	39 07       	cpc	r19, r25
    1578:	99 f4       	brne	.+38     	; 0x15a0 <getSpritePhase+0x32>
	{
		switch(spritePhase%12)
    157a:	6c e0       	ldi	r22, 0x0C	; 12
    157c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__udivmodqi4>
    1580:	89 2f       	mov	r24, r25
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	8c 30       	cpi	r24, 0x0C	; 12
    1586:	91 05       	cpc	r25, r1
    1588:	38 f4       	brcc	.+14     	; 0x1598 <getSpritePhase+0x2a>
    158a:	fc 01       	movw	r30, r24
    158c:	e8 5c       	subi	r30, 0xC8	; 200
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__tablejump2__>
			case 2:

			case 9:
			case 10:
			case 11:
				spritePhase = 0; //yellow background
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	08 95       	ret
				break;
			case 5:
			case 6:

			default:
				spritePhase = 2; //brown background
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	08 95       	ret
			case 3:
			case 4:

			case 7:
			case 8:
				spritePhase = 1; //red background
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	08 95       	ret
				break;
		}

	}
	//else if(p_thisSprite == &spriteCOIN) //handled in getRowPixelValCOIN()
	else if(p_thisSprite == &spriteGOOMBA)
    15a0:	2d 50       	subi	r18, 0x0D	; 13
    15a2:	31 40       	sbci	r19, 0x01	; 1
    15a4:	69 f4       	brne	.+26     	; 0x15c0 <getSpritePhase+0x52>
	{
		if (vOffset < 0) //(spriteRow < rowToDrawAt)
    15a6:	47 fd       	sbrc	r20, 7
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <getSpritePhase+0x42>
			spritePhase = 0;
		if (vOffset > 0) //(spriteRow > rowToDrawAt)
    15aa:	41 11       	cpse	r20, r1
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <getSpritePhase+0x50>
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <getSpritePhase+0x44>
	}
	//else if(p_thisSprite == &spriteCOIN) //handled in getRowPixelValCOIN()
	else if(p_thisSprite == &spriteGOOMBA)
	{
		if (vOffset < 0) //(spriteRow < rowToDrawAt)
			spritePhase = 0;
    15b0:	80 e0       	ldi	r24, 0x00	; 0
		if (vOffset > 0) //(spriteRow > rowToDrawAt)
			spritePhase = GOOMBA_QCOUNT;
		else
			spritePhase /=3;
    15b2:	9b ea       	ldi	r25, 0xAB	; 171
    15b4:	89 9f       	mul	r24, r25
    15b6:	81 2d       	mov	r24, r1
    15b8:	11 24       	eor	r1, r1
    15ba:	86 95       	lsr	r24
    15bc:	08 95       	ret
	else if(p_thisSprite == &spriteGOOMBA)
	{
		if (vOffset < 0) //(spriteRow < rowToDrawAt)
			spritePhase = 0;
		if (vOffset > 0) //(spriteRow > rowToDrawAt)
			spritePhase = GOOMBA_QCOUNT;
    15be:	80 e3       	ldi	r24, 0x30	; 48

	}

	return spritePhase;

}
    15c0:	08 95       	ret

000015c2 <drawSpriteRow>:
// This does *NOT* handle COIN... use getRowPixelValCOIN() instead.
void drawSpriteRow(sprite_t *p_thisSprite, uint8_t qCount,
															//uint8_t spritePhase,
													  int8_t spriteRow, 
													  uint8_t rowToDrawAt)
{
    15c2:	4f 92       	push	r4
    15c4:	5f 92       	push	r5
    15c6:	6f 92       	push	r6
    15c8:	7f 92       	push	r7
    15ca:	8f 92       	push	r8
    15cc:	9f 92       	push	r9
    15ce:	af 92       	push	r10
    15d0:	bf 92       	push	r11
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	ec 01       	movw	r28, r24
    15e4:	76 2e       	mov	r7, r22
    15e6:	b4 2e       	mov	r11, r20
    15e8:	c2 2e       	mov	r12, r18
	uint8_t qCol;

	uint8_t spritePhase;

	spritePhase = getSpritePhase(p_thisSprite, qCount, 
    15ea:	94 2e       	mov	r9, r20
    15ec:	92 1a       	sub	r9, r18
    15ee:	49 2d       	mov	r20, r9
    15f0:	0e 94 b7 0a 	call	0x156e	; 0x156e <getSpritePhase>
    15f4:	a8 2e       	mov	r10, r24
												((int8_t)spriteRow - rowToDrawAt) );

	//This may get overridden (for the sky)
	uint8_t thePalette = getSpritePalette(p_thisSprite, spritePhase,
    15f6:	4b 2d       	mov	r20, r11
    15f8:	68 2f       	mov	r22, r24
    15fa:	ce 01       	movw	r24, r28
    15fc:	0e 94 85 0a 	call	0x150a	; 0x150a <getSpritePalette>
    1600:	88 2e       	mov	r8, r24
    1602:	80 e1       	ldi	r24, 0x10	; 16
    1604:	c8 9e       	mul	r12, r24
    1606:	60 01       	movw	r12, r0
    1608:	11 24       	eor	r1, r1
    160a:	c6 01       	movw	r24, r12
    160c:	89 58       	subi	r24, 0x89	; 137
    160e:	9e 4f       	sbci	r25, 0xFE	; 254
    1610:	6c 01       	movw	r12, r24
    1612:	e1 2c       	mov	r14, r1
    1614:	f1 2c       	mov	r15, r1
		{
			p_spriteForColor = skyOverrideSprite;
			int8_t vOffset = spriteRow - rowToDrawAt;

			if (skyOverrideSprite != p_thisSprite)
				vOffset = -vOffset;
    1616:	69 2c       	mov	r6, r9
    1618:	61 94       	neg	r6

		if(p_thisSprite == &spriteGOOMBA)
		{
			//uint8_t gCol = qCol;
			//Goomba moves by flipping horizontally...
			if((spritePhase < 16) && (spritePhase & 0x01))
    161a:	9a 2d       	mov	r25, r10
    161c:	91 70       	andi	r25, 0x01	; 1
    161e:	59 2e       	mov	r5, r25
    1620:	7f e0       	ldi	r23, 0x0F	; 15
    1622:	47 2e       	mov	r4, r23
    1624:	4e 2d       	mov	r20, r14
    1626:	9f e0       	ldi	r25, 0x0F	; 15
      //  pgm_read_byte((uint8_t *)(&((p_image)[(qRow)*Q_WIDTH+(qCol)])));
      uint8_t data;
		uint8_t theCol = qCol;


		if(p_thisSprite == &spriteGOOMBA)
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	cd 30       	cpi	r28, 0x0D	; 13
    162c:	d8 07       	cpc	r29, r24
    162e:	41 f4       	brne	.+16     	; 0x1640 <drawSpriteRow+0x7e>
		{
			//uint8_t gCol = qCol;
			//Goomba moves by flipping horizontally...
			if((spritePhase < 16) && (spritePhase & 0x01))
    1630:	9a 15       	cp	r25, r10
    1632:	90 f0       	brcs	.+36     	; 0x1658 <drawSpriteRow+0x96>
    1634:	55 20       	and	r5, r5
    1636:	81 f0       	breq	.+32     	; 0x1658 <drawSpriteRow+0x96>
    1638:	84 2d       	mov	r24, r4
    163a:	8e 19       	sub	r24, r14
    163c:	48 2f       	mov	r20, r24
    163e:	0c c0       	rjmp	.+24     	; 0x1658 <drawSpriteRow+0x96>



		uint8_t rawPixVal;

		if((spriteRow < 0) || (spriteRow >= Q_HEIGHT))
    1640:	9b 15       	cp	r25, r11
    1642:	98 f0       	brcs	.+38     	; 0x166a <drawSpriteRow+0xa8>
			rawPixVal = 0;
		else if(p_thisSprite == &spriteCOIN)
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	c6 30       	cpi	r28, 0x06	; 6
    1648:	d8 07       	cpc	r29, r24
    164a:	49 f4       	brne	.+18     	; 0x165e <drawSpriteRow+0x9c>
			rawPixVal = getRawPixelValCOIN(spritePhase, spriteRow, theCol);
    164c:	4e 2d       	mov	r20, r14
    164e:	6b 2d       	mov	r22, r11
    1650:	8a 2d       	mov	r24, r10
    1652:	0e 94 04 0a 	call	0x1408	; 0x1408 <getRawPixelValCOIN>
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <drawSpriteRow+0xa4>



		uint8_t rawPixVal;

		if((spriteRow < 0) || (spriteRow >= Q_HEIGHT))
    1658:	9f e0       	ldi	r25, 0x0F	; 15
    165a:	9b 15       	cp	r25, r11
    165c:	30 f0       	brcs	.+12     	; 0x166a <drawSpriteRow+0xa8>
			rawPixVal = 0;
		else if(p_thisSprite == &spriteCOIN)
			rawPixVal = getRawPixelValCOIN(spritePhase, spriteRow, theCol);
		else
			rawPixVal = getRawPixelVal(p_thisSprite, spriteRow, theCol);
    165e:	6b 2d       	mov	r22, r11
    1660:	ce 01       	movw	r24, r28
    1662:	0e 94 b8 09 	call	0x1370	; 0x1370 <getRawPixelVal>


		sprite_t *p_spriteForColor = p_thisSprite;
		uint8_t paletteForColor = thePalette;

		if( (rawPixVal == 0) && (skyOverrideSprite != NULL) )
    1666:	81 11       	cpse	r24, r1
    1668:	18 c0       	rjmp	.+48     	; 0x169a <drawSpriteRow+0xd8>
    166a:	00 91 6a 01 	lds	r16, 0x016A
    166e:	10 91 6b 01 	lds	r17, 0x016B
    1672:	01 15       	cp	r16, r1
    1674:	11 05       	cpc	r17, r1
    1676:	a1 f0       	breq	.+40     	; 0x16a0 <drawSpriteRow+0xde>
		{
			p_spriteForColor = skyOverrideSprite;
			int8_t vOffset = spriteRow - rowToDrawAt;

			if (skyOverrideSprite != p_thisSprite)
    1678:	0c 17       	cp	r16, r28
    167a:	1d 07       	cpc	r17, r29
    167c:	11 f0       	breq	.+4      	; 0x1682 <drawSpriteRow+0xc0>
				vOffset = -vOffset;
    167e:	46 2d       	mov	r20, r6
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <drawSpriteRow+0xc2>
		uint8_t paletteForColor = thePalette;

		if( (rawPixVal == 0) && (skyOverrideSprite != NULL) )
		{
			p_spriteForColor = skyOverrideSprite;
			int8_t vOffset = spriteRow - rowToDrawAt;
    1682:	49 2d       	mov	r20, r9

			if (skyOverrideSprite != p_thisSprite)
				vOffset = -vOffset;

			uint8_t spritePhaseForColor = 
    1684:	67 2d       	mov	r22, r7
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 b7 0a 	call	0x156e	; 0x156e <getSpritePhase>
						getSpritePhase(p_spriteForColor, qCount, vOffset);
									//				(spriteRow - rowToDrawAta)); 
			paletteForColor = getSpritePalette(p_spriteForColor, 
    168c:	4b 2d       	mov	r20, r11
    168e:	68 2f       	mov	r22, r24
    1690:	c8 01       	movw	r24, r16
    1692:	0e 94 85 0a 	call	0x150a	; 0x150a <getSpritePalette>
    1696:	48 2f       	mov	r20, r24
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <drawSpriteRow+0xe2>
		else
			rawPixVal = getRawPixelVal(p_thisSprite, spriteRow, theCol);


		sprite_t *p_spriteForColor = p_thisSprite;
		uint8_t paletteForColor = thePalette;
    169a:	48 2d       	mov	r20, r8
    169c:	8e 01       	movw	r16, r28
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <drawSpriteRow+0xe4>
    16a0:	48 2d       	mov	r20, r8
    16a2:	8e 01       	movw	r16, r28
    16a4:	80 e0       	ldi	r24, 0x00	; 0
															spritePhaseForColor,
															spriteRow);
		}


		data = rawPixValToGimpColorVal(rawPixVal, p_spriteForColor,
    16a6:	b8 01       	movw	r22, r16
    16a8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <rawPixValToGimpColorVal>
																		paletteForColor); 
		
      data = gimpPixelValToLColor(data);
    16ac:	28 2f       	mov	r18, r24
    16ae:	20 73       	andi	r18, 0x30	; 48
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	20 32       	cpi	r18, 0x20	; 32
    16b4:	31 05       	cpc	r19, r1
    16b6:	0c f0       	brlt	.+2      	; 0x16ba <drawSpriteRow+0xf8>
    16b8:	80 5f       	subi	r24, 0xF0	; 240
    16ba:	f6 01       	movw	r30, r12
    16bc:	ee 0d       	add	r30, r14
    16be:	ff 1d       	adc	r31, r15

		frameBuffer[rowToDrawAt][qCol] = data;
    16c0:	80 83       	st	Z, r24
    16c2:	9f ef       	ldi	r25, 0xFF	; 255
    16c4:	e9 1a       	sub	r14, r25
    16c6:	f9 0a       	sbc	r15, r25

	//This may get overridden (for the sky)
	uint8_t thePalette = getSpritePalette(p_thisSprite, spritePhase,
																				spriteRow);
	
	for(qCol=0; qCol<Q_WIDTH; qCol++)
    16c8:	80 e1       	ldi	r24, 0x10	; 16
    16ca:	e8 16       	cp	r14, r24
    16cc:	f1 04       	cpc	r15, r1
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <drawSpriteRow+0x110>
    16d0:	a9 cf       	rjmp	.-174    	; 0x1624 <drawSpriteRow+0x62>
		
      data = gimpPixelValToLColor(data);

		frameBuffer[rowToDrawAt][qCol] = data;
	}
}
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	08 95       	ret

000016f4 <fbQuestion_update>:
void drawSpriteRow(sprite_t *p_thisSprite, uint8_t spritePhase,
													  int8_t spriteRow, 
													  uint8_t rowToDrawAt);

void fbQuestion_update(void) //uint8_t triggerDetected)
{
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
	callCount++;
    16fc:	80 91 69 01 	lds	r24, 0x0169
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	80 93 69 01 	sts	0x0169, r24
//#define Q_STRETCHTOP   1//0//28//2
//#define Q_STRETCHDIV 5//30//3
//   hfm_t colincrementer_hfm;
//   hfm_setup(&colincrementer_hfm, Q_STRETCHTOP, Q_STRETCHDIV);

	if(p_nextSprite == NULL)
    1706:	80 91 66 01 	lds	r24, 0x0166
    170a:	90 91 67 01 	lds	r25, 0x0167
    170e:	89 2b       	or	r24, r25
    1710:	09 f0       	breq	.+2      	; 0x1714 <fbQuestion_update+0x20>
    1712:	42 c0       	rjmp	.+132    	; 0x1798 <fbQuestion_update+0xa4>
	{
#if(!defined(STAY_ON_IT) || !STAY_ON_IT)
	if(p_selectedSprite == &spriteDEADGOOMBA)
    1714:	80 91 04 01 	lds	r24, 0x0104
    1718:	90 91 05 01 	lds	r25, 0x0105
    171c:	20 91 68 01 	lds	r18, 0x0168
    1720:	31 e0       	ldi	r19, 0x01	; 1
    1722:	80 33       	cpi	r24, 0x30	; 48
    1724:	93 07       	cpc	r25, r19
    1726:	41 f4       	brne	.+16     	; 0x1738 <fbQuestion_update+0x44>
	{
		if(qCount >= 16)
    1728:	20 31       	cpi	r18, 0x10	; 16
    172a:	b0 f1       	brcs	.+108    	; 0x1798 <fbQuestion_update+0xa4>
		{
			qCount = Q_QSTART; //0;
    172c:	87 e0       	ldi	r24, 0x07	; 7
    172e:	80 93 68 01 	sts	0x0168, r24
			p_nextSprite = &spriteQ;
    1732:	8e e3       	ldi	r24, 0x3E	; 62
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	0a c0       	rjmp	.+20     	; 0x174c <fbQuestion_update+0x58>
		}
	}
	else if(p_selectedSprite == &spriteGOOMBA)
    1738:	31 e0       	ldi	r19, 0x01	; 1
    173a:	8d 30       	cpi	r24, 0x0D	; 13
    173c:	93 07       	cpc	r25, r19
    173e:	59 f4       	brne	.+22     	; 0x1756 <fbQuestion_update+0x62>
	{
		if(qCount >= GOOMBA_QCOUNT)
    1740:	20 33       	cpi	r18, 0x30	; 48
    1742:	50 f1       	brcs	.+84     	; 0x1798 <fbQuestion_update+0xa4>
		{
			qCount = 0;
    1744:	10 92 68 01 	sts	0x0168, r1
			p_nextSprite = &spriteSOLID;
    1748:	87 e3       	ldi	r24, 0x37	; 55
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	90 93 67 01 	sts	0x0167, r25
    1750:	80 93 66 01 	sts	0x0166, r24
    1754:	21 c0       	rjmp	.+66     	; 0x1798 <fbQuestion_update+0xa4>
		}
	}
	else if(p_selectedSprite == &spriteCOIN)
    1756:	31 e0       	ldi	r19, 0x01	; 1
    1758:	86 30       	cpi	r24, 0x06	; 6
    175a:	93 07       	cpc	r25, r19
    175c:	19 f4       	brne	.+6      	; 0x1764 <fbQuestion_update+0x70>
	{
		if(qCount >= 8)
    175e:	28 30       	cpi	r18, 0x08	; 8
    1760:	88 f7       	brcc	.-30     	; 0x1744 <fbQuestion_update+0x50>
    1762:	1a c0       	rjmp	.+52     	; 0x1798 <fbQuestion_update+0xa4>
		{
			qCount = 0;
			p_nextSprite = &spriteSOLID;
		}
	}
	else if(p_selectedSprite == &spriteSOLID)
    1764:	31 e0       	ldi	r19, 0x01	; 1
    1766:	87 33       	cpi	r24, 0x37	; 55
    1768:	93 07       	cpc	r25, r19
    176a:	61 f4       	brne	.+24     	; 0x1784 <fbQuestion_update+0x90>
	{
		if(qCount >= 8)
    176c:	28 30       	cpi	r18, 0x08	; 8
    176e:	a0 f0       	brcs	.+40     	; 0x1798 <fbQuestion_update+0xa4>
		{
			qCount = Q_QSTART; //0;
    1770:	87 e0       	ldi	r24, 0x07	; 7
    1772:	80 93 68 01 	sts	0x0168, r24
			p_selectedSprite = &spriteQ;
    1776:	8e e3       	ldi	r24, 0x3E	; 62
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	90 93 05 01 	sts	0x0105, r25
    177e:	80 93 04 01 	sts	0x0104, r24
    1782:	0a c0       	rjmp	.+20     	; 0x1798 <fbQuestion_update+0xa4>
		}
	}
	else if(p_selectedSprite != &spriteQ)
    1784:	8e 53       	subi	r24, 0x3E	; 62
    1786:	91 40       	sbci	r25, 0x01	; 1
    1788:	19 f0       	breq	.+6      	; 0x1790 <fbQuestion_update+0x9c>
	{
		if(qCount >= 16)
    178a:	20 31       	cpi	r18, 0x10	; 16
    178c:	d8 f6       	brcc	.-74     	; 0x1744 <fbQuestion_update+0x50>
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <fbQuestion_update+0xa4>
	}
	//else is handled in the trigger-handler...
#if(defined(AUTO_HIT) && AUTO_HIT)
	else //spriteQ
	{
		if(qCount >= (12*5))
    1790:	2c 33       	cpi	r18, 0x3C	; 60
    1792:	10 f0       	brcs	.+4      	; 0x1798 <fbQuestion_update+0xa4>
			fbQuestion_hitDetected();
    1794:	0e 94 29 0a 	call	0x1452	; 0x1452 <fbQuestion_hitDetected>
	//       _____                               ___
	//      |     |     _____         __        /___\			//
	//      |  ?  | -> |     |  ->  _/__\_  ->   |_|
	//      |_____|    |  ?  |     |      |

	if(p_nextSprite != NULL)
    1798:	80 91 66 01 	lds	r24, 0x0166
    179c:	90 91 67 01 	lds	r25, 0x0167
    17a0:	89 2b       	or	r24, r25
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <fbQuestion_update+0xb2>
    17a4:	6b c0       	rjmp	.+214    	; 0x187c <fbQuestion_update+0x188>
	{

		setSpriteSkyColorOverride(p_selectedSprite);
    17a6:	80 91 04 01 	lds	r24, 0x0104
    17aa:	90 91 05 01 	lds	r25, 0x0105
sprite_t *skyOverrideSprite = NULL;
//uint8_t skyOverridePalette;

void setSpriteSkyColorOverride(sprite_t *sprite) //, uint8_t palette)
{
	skyOverrideSprite = sprite;
    17ae:	90 93 6b 01 	sts	0x016B, r25
    17b2:	80 93 6a 01 	sts	0x016A, r24

		if(p_selectedSprite == &spriteQ) 
    17b6:	8e 53       	subi	r24, 0x3E	; 62
    17b8:	91 40       	sbci	r25, 0x01	; 1
    17ba:	b1 f5       	brne	.+108    	; 0x1828 <fbQuestion_update+0x134>
    17bc:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t spriteRow;

			//Draw the top of the next sprite...
			for(qRow=0; qRow<qCount; qRow++)
    17be:	60 91 68 01 	lds	r22, 0x0168
    17c2:	c6 17       	cp	r28, r22
    17c4:	60 f4       	brcc	.+24     	; 0x17de <fbQuestion_update+0xea>
			{
				spriteRow = qRow - (16 - qCount);
    17c6:	40 ef       	ldi	r20, 0xF0	; 240
    17c8:	46 0f       	add	r20, r22
    17ca:	4c 0f       	add	r20, r28
				drawSpriteRow(p_nextSprite, qCount, spriteRow, qRow);
    17cc:	2c 2f       	mov	r18, r28
    17ce:	80 91 66 01 	lds	r24, 0x0166
    17d2:	90 91 67 01 	lds	r25, 0x0167
    17d6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <drawSpriteRow>
		if(p_selectedSprite == &spriteQ) 
		{
			uint8_t spriteRow;

			//Draw the top of the next sprite...
			for(qRow=0; qRow<qCount; qRow++)
    17da:	cf 5f       	subi	r28, 0xFF	; 255
    17dc:	f0 cf       	rjmp	.-32     	; 0x17be <fbQuestion_update+0xca>
    17de:	dc 2f       	mov	r29, r28
			// become solid... but in most cases using p_selectedSprite==SOLID
			// results in a transition straight to Q...
			// so rather than changing p_selectedSprite, let's just override
			// it here
			spriteRow = 0;
			for( ; qRow<Q_HEIGHT; qRow++)
    17e0:	c0 31       	cpi	r28, 0x10	; 16
    17e2:	58 f4       	brcc	.+22     	; 0x17fa <fbQuestion_update+0x106>
    17e4:	4c 2f       	mov	r20, r28
    17e6:	4d 1b       	sub	r20, r29
			{
				drawSpriteRow(&spriteSOLID, qCount, spriteRow, qRow);
    17e8:	2c 2f       	mov	r18, r28
    17ea:	60 91 68 01 	lds	r22, 0x0168
    17ee:	87 e3       	ldi	r24, 0x37	; 55
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <drawSpriteRow>
			// become solid... but in most cases using p_selectedSprite==SOLID
			// results in a transition straight to Q...
			// so rather than changing p_selectedSprite, let's just override
			// it here
			spriteRow = 0;
			for( ; qRow<Q_HEIGHT; qRow++)
    17f6:	cf 5f       	subi	r28, 0xFF	; 255
    17f8:	f3 cf       	rjmp	.-26     	; 0x17e0 <fbQuestion_update+0xec>

				spriteRow++;
			}
		}

		qCount++;
    17fa:	80 91 68 01 	lds	r24, 0x0168
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	80 93 68 01 	sts	0x0168, r24
		if(qCount >= Q_HEIGHT)
    1804:	80 31       	cpi	r24, 0x10	; 16
    1806:	08 f4       	brcc	.+2      	; 0x180a <fbQuestion_update+0x116>
    1808:	54 c0       	rjmp	.+168    	; 0x18b2 <fbQuestion_update+0x1be>
		{
			qCount = 0;
    180a:	10 92 68 01 	sts	0x0168, r1
			p_selectedSprite = p_nextSprite;
    180e:	80 91 66 01 	lds	r24, 0x0166
    1812:	90 91 67 01 	lds	r25, 0x0167
    1816:	90 93 05 01 	sts	0x0105, r25
    181a:	80 93 04 01 	sts	0x0104, r24
			p_nextSprite = NULL;
    181e:	10 92 67 01 	sts	0x0167, r1
    1822:	10 92 66 01 	sts	0x0166, r1
    1826:	45 c0       	rjmp	.+138    	; 0x18b2 <fbQuestion_update+0x1be>
			
		}
		else
		{
			uint8_t displayRow;
			uint8_t spriteRow = qCount; 
    1828:	00 91 68 01 	lds	r16, 0x0168

			for(displayRow = 0; displayRow < (Q_HEIGHT-qCount); displayRow++)
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	c0 e1       	ldi	r28, 0x10	; 16
    1830:	d0 e0       	ldi	r29, 0x00	; 0
    1832:	60 91 68 01 	lds	r22, 0x0168
    1836:	41 2f       	mov	r20, r17
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	ce 01       	movw	r24, r28
    183c:	86 1b       	sub	r24, r22
    183e:	91 09       	sbc	r25, r1
    1840:	48 17       	cp	r20, r24
    1842:	59 07       	cpc	r21, r25
    1844:	5c f4       	brge	.+22     	; 0x185c <fbQuestion_update+0x168>
    1846:	41 2f       	mov	r20, r17
    1848:	40 0f       	add	r20, r16
			{
				drawSpriteRow(p_selectedSprite, qCount, spriteRow, displayRow);
    184a:	21 2f       	mov	r18, r17
    184c:	80 91 04 01 	lds	r24, 0x0104
    1850:	90 91 05 01 	lds	r25, 0x0105
    1854:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <drawSpriteRow>
		else
		{
			uint8_t displayRow;
			uint8_t spriteRow = qCount; 

			for(displayRow = 0; displayRow < (Q_HEIGHT-qCount); displayRow++)
    1858:	1f 5f       	subi	r17, 0xFF	; 255
    185a:	eb cf       	rjmp	.-42     	; 0x1832 <fbQuestion_update+0x13e>
    185c:	c1 2f       	mov	r28, r17
									//				displayRow+qCount, displayRow);
				spriteRow++;
			}
	
			spriteRow = 0;
			for( ; displayRow<Q_HEIGHT; displayRow++)
    185e:	10 31       	cpi	r17, 0x10	; 16
    1860:	60 f6       	brcc	.-104    	; 0x17fa <fbQuestion_update+0x106>
    1862:	41 2f       	mov	r20, r17
    1864:	4c 1b       	sub	r20, r28
			{
				drawSpriteRow(p_nextSprite, qCount, spriteRow, displayRow);
    1866:	21 2f       	mov	r18, r17
    1868:	60 91 68 01 	lds	r22, 0x0168
    186c:	80 91 66 01 	lds	r24, 0x0166
    1870:	90 91 67 01 	lds	r25, 0x0167
    1874:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <drawSpriteRow>
									//				displayRow+qCount, displayRow);
				spriteRow++;
			}
	
			spriteRow = 0;
			for( ; displayRow<Q_HEIGHT; displayRow++)
    1878:	1f 5f       	subi	r17, 0xFF	; 255
    187a:	f1 cf       	rjmp	.-30     	; 0x185e <fbQuestion_update+0x16a>
    187c:	10 92 6b 01 	sts	0x016B, r1
    1880:	10 92 6a 01 	sts	0x016A, r1
	} //end of nextSprite Handling...
	else //we only have a selectedSprite (nextSprite is NULL)
	{
		setSpriteSkyColorOverride(NULL);

		for(qRow=0; qRow<Q_HEIGHT; qRow++)
    1884:	c0 e0       	ldi	r28, 0x00	; 0
			drawSpriteRow(p_selectedSprite, qCount, qRow, qRow);
    1886:	2c 2f       	mov	r18, r28
    1888:	4c 2f       	mov	r20, r28
    188a:	60 91 68 01 	lds	r22, 0x0168
    188e:	80 91 04 01 	lds	r24, 0x0104
    1892:	90 91 05 01 	lds	r25, 0x0105
    1896:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <drawSpriteRow>
	} //end of nextSprite Handling...
	else //we only have a selectedSprite (nextSprite is NULL)
	{
		setSpriteSkyColorOverride(NULL);

		for(qRow=0; qRow<Q_HEIGHT; qRow++)
    189a:	cf 5f       	subi	r28, 0xFF	; 255
    189c:	c0 31       	cpi	r28, 0x10	; 16
    189e:	99 f7       	brne	.-26     	; 0x1886 <fbQuestion_update+0x192>
			drawSpriteRow(p_selectedSprite, qCount, qRow, qRow);

		qCount++;
    18a0:	80 91 68 01 	lds	r24, 0x0168
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	80 93 68 01 	sts	0x0168, r24
		//the only case where qCount should cycle is spriteQ...
		// its value is %12, so could either reset it at 12, or this.. whatev
		// To avoid a glitch every 21 cycles.
		if(qCount >= ((255 / 12) * 12))
    18aa:	8c 3f       	cpi	r24, 0xFC	; 252
    18ac:	10 f0       	brcs	.+4      	; 0x18b2 <fbQuestion_update+0x1be>
			qCount = 0;
    18ae:	10 92 68 01 	sts	0x0168, r1
	}

}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	08 95       	ret

000018bc <lcd_Init>:
//   (the fewer changes, the less likely we'll glitch...?)


void lcd_Init(void)
{
 	Nada_init();
    18bc:	ad 9a       	sbi	0x15, 5	; 21
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	90 93 65 00 	sts	0x0065, r25
    18c6:	80 93 64 00 	sts	0x0064, r24
    18ca:	84 e0       	ldi	r24, 0x04	; 4
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9f bd       	out	0x2f, r25	; 47
    18d0:	8e bd       	out	0x2e, r24	; 46
    18d2:	ad 98       	cbi	0x15, 5	; 21
    18d4:	08 95       	ret

000018d6 <updateLCD>:

	//Hsync and Actually draw the pixels... (when DE is active)
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);
    18d6:	40 91 65 01 	lds	r20, 0x0165
    18da:	80 91 62 01 	lds	r24, 0x0162
    18de:	90 91 63 01 	lds	r25, 0x0163
// rowNum is only used when DE is active...
//  and should be 0 at *drawn row* 0
void loadData(uint16_t rowNum, uint8_t dataEnable)
{
	//H Active pulse...
   if(vSync)
    18e2:	20 91 64 01 	lds	r18, 0x0164
   {
		//Vsync_fromNada() is called at the end of the last interupt
      VplusH_fromVsync();
    18e6:	ad 9a       	sbi	0x15, 5	; 21
// rowNum is only used when DE is active...
//  and should be 0 at *drawn row* 0
void loadData(uint16_t rowNum, uint8_t dataEnable)
{
	//H Active pulse...
   if(vSync)
    18e8:	22 23       	and	r18, r18
    18ea:	79 f1       	breq	.+94     	; 0x194a <updateLCD+0x74>
   {
		//Vsync_fromNada() is called at the end of the last interupt
      VplusH_fromVsync();
    18ec:	26 e0       	ldi	r18, 0x06	; 6
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	30 93 65 00 	sts	0x0065, r19
    18f4:	20 93 64 00 	sts	0x0064, r18
    18f8:	3f bd       	out	0x2f, r19	; 47
    18fa:	2e bd       	out	0x2e, r18	; 46
    18fc:	ad 98       	cbi	0x15, 5	; 21
    18fe:	26 e1       	ldi	r18, 0x16	; 22
    1900:	30 e0       	ldi	r19, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    1902:	00 00       	nop
      asm("nop");
    1904:	00 00       	nop
    1906:	21 50       	subi	r18, 0x01	; 1
    1908:	31 09       	sbc	r19, r1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    190a:	21 15       	cp	r18, r1
    190c:	31 05       	cpc	r19, r1
    190e:	c9 f7       	brne	.-14     	; 0x1902 <updateLCD+0x2c>
	//thing...
	// but doing-so might make optimization more difficult...?
	switch(loopRemainder)
	{
		case 7:
			asm("nop");
    1910:	00 00       	nop
		case 6:
			asm("nop");
    1912:	00 00       	nop
		case 5:
			asm("nop");
    1914:	00 00       	nop
		case 4:
			asm("nop");
    1916:	00 00       	nop
		case 3:
			asm("nop");
    1918:	00 00       	nop
		case 2:
			asm("nop");
    191a:	00 00       	nop
		case 1:
			asm("nop");
    191c:	00 00       	nop
      Hlow_Delay();
      Vsync_fromVplusH();
    191e:	ad 9a       	sbi	0x15, 5	; 21
    1920:	23 e0       	ldi	r18, 0x03	; 3
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	30 93 65 00 	sts	0x0065, r19
    1928:	20 93 64 00 	sts	0x0064, r18
    192c:	24 e0       	ldi	r18, 0x04	; 4
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	3f bd       	out	0x2f, r19	; 47
    1932:	2e bd       	out	0x2e, r18	; 46
    1934:	ad 98       	cbi	0x15, 5	; 21
    1936:	2b e0       	ldi	r18, 0x0B	; 11
    1938:	30 e0       	ldi	r19, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    193a:	00 00       	nop
      asm("nop");
    193c:	00 00       	nop
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	31 09       	sbc	r19, r1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    1942:	21 15       	cp	r18, r1
    1944:	31 05       	cpc	r19, r1
    1946:	c9 f7       	brne	.-14     	; 0x193a <updateLCD+0x64>
    1948:	30 c0       	rjmp	.+96     	; 0x19aa <updateLCD+0xd4>
      HD_Delay();
   }
   else
   {
      Hsync_fromNada();
    194a:	22 e0       	ldi	r18, 0x02	; 2
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	30 93 65 00 	sts	0x0065, r19
    1952:	20 93 64 00 	sts	0x0064, r18
    1956:	23 e0       	ldi	r18, 0x03	; 3
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3f bd       	out	0x2f, r19	; 47
    195c:	2e bd       	out	0x2e, r18	; 46
    195e:	ad 98       	cbi	0x15, 5	; 21
    1960:	26 e1       	ldi	r18, 0x16	; 22
    1962:	30 e0       	ldi	r19, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    1964:	00 00       	nop
      asm("nop");
    1966:	00 00       	nop
    1968:	21 50       	subi	r18, 0x01	; 1
    196a:	31 09       	sbc	r19, r1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    196c:	21 15       	cp	r18, r1
    196e:	31 05       	cpc	r19, r1
    1970:	c9 f7       	brne	.-14     	; 0x1964 <updateLCD+0x8e>
	//thing...
	// but doing-so might make optimization more difficult...?
	switch(loopRemainder)
	{
		case 7:
			asm("nop");
    1972:	00 00       	nop
		case 6:
			asm("nop");
    1974:	00 00       	nop
		case 5:
			asm("nop");
    1976:	00 00       	nop
		case 4:
			asm("nop");
    1978:	00 00       	nop
		case 3:
			asm("nop");
    197a:	00 00       	nop
		case 2:
			asm("nop");
    197c:	00 00       	nop
		case 1:
			asm("nop");
    197e:	00 00       	nop
      Hlow_Delay();
      Nada_fromHsync();
    1980:	ad 9a       	sbi	0x15, 5	; 21
    1982:	22 e0       	ldi	r18, 0x02	; 2
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	30 93 65 00 	sts	0x0065, r19
    198a:	20 93 64 00 	sts	0x0064, r18
    198e:	24 e0       	ldi	r18, 0x04	; 4
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3f bd       	out	0x2f, r19	; 47
    1994:	2e bd       	out	0x2e, r18	; 46
    1996:	ad 98       	cbi	0x15, 5	; 21
    1998:	2b e0       	ldi	r18, 0x0B	; 11
    199a:	30 e0       	ldi	r19, 0x00	; 0
         asm("nop");
      }
   */
      //Apparently this loop will optimize-out without this:
      // Obviously, one instruction each...
      asm("nop");
    199c:	00 00       	nop
      asm("nop");
    199e:	00 00       	nop
    19a0:	21 50       	subi	r18, 0x01	; 1
    19a2:	31 09       	sbc	r19, r1
   // Each loop is 7 cycles, make it 8 by adding an extra nop and we can
   // use >> instead of / for calculations...
   // +7 assures rounding-up...
#warning "This loop seems to be optimizing out!"
   //for(i=0; i<((numCyc+7)>>3); i++)
   for(i=0; i<numLoops; i++)
    19a4:	21 15       	cp	r18, r1
    19a6:	31 05       	cpc	r19, r1
    19a8:	c9 f7       	brne	.-14     	; 0x199c <updateLCD+0xc6>
	//thing...
	// but doing-so might make optimization more difficult...?
	switch(loopRemainder)
	{
		case 7:
			asm("nop");
    19aa:	00 00       	nop
		case 6:
			asm("nop");
    19ac:	00 00       	nop
		case 5:
			asm("nop");
    19ae:	00 00       	nop
		case 4:
			asm("nop");
    19b0:	00 00       	nop
		case 3:
			asm("nop");
    19b2:	00 00       	nop
		case 2:
			asm("nop");
    19b4:	00 00       	nop
		case 1:
			asm("nop");
    19b6:	00 00       	nop
      HD_Delay();
   }

   if(dataEnable)
    19b8:	44 23       	and	r20, r20
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <updateLCD+0xec>
{
	//a/o v67, this is used by FRAMEBUFFER_TESTING...
	//Old:
	//This hasn't been used in quite some time... 
	// it may not work at all anymore.
	nonRSB_drawPix(rowNum);
    19bc:	86 97       	sbiw	r24, 0x26	; 38
    19be:	0e 94 91 06 	call	0xd22	; 0xd22 <nonRSB_drawPix>
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);

	hsyncCount++;
    19c2:	80 91 62 01 	lds	r24, 0x0162
    19c6:	90 91 63 01 	lds	r25, 0x0163
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	90 93 63 01 	sts	0x0163, r25
    19d0:	80 93 62 01 	sts	0x0162, r24

	switch(hsyncCount)
    19d4:	83 32       	cpi	r24, 0x23	; 35
    19d6:	91 05       	cpc	r25, r1
    19d8:	c9 f0       	breq	.+50     	; 0x1a0c <updateLCD+0x136>
    19da:	50 f4       	brcc	.+20     	; 0x19f0 <updateLCD+0x11a>
    19dc:	83 30       	cpi	r24, 0x03	; 3
    19de:	91 05       	cpc	r25, r1
    19e0:	39 f5       	brne	.+78     	; 0x1a30 <updateLCD+0x15a>
	{
		//V Front Porch, begins with initLCD

		//Vsync H->L (Begin V-Sync)
		case T_DV:
			dataEnable = FALSE;
    19e2:	10 92 65 01 	sts	0x0165, r1
			//clrpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = TRUE;
    19e6:	21 e0       	ldi	r18, 0x01	; 1
    19e8:	20 93 64 01 	sts	0x0164, r18
			Vsync_fromNada();
    19ec:	ad 9a       	sbi	0x15, 5	; 21
    19ee:	13 c0       	rjmp	.+38     	; 0x1a16 <updateLCD+0x140>
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);

	hsyncCount++;

	switch(hsyncCount)
    19f0:	86 32       	cpi	r24, 0x26	; 38
    19f2:	91 05       	cpc	r25, r1
    19f4:	d1 f0       	breq	.+52     	; 0x1a2a <updateLCD+0x154>
    19f6:	86 32       	cpi	r24, 0x26	; 38
    19f8:	93 40       	sbci	r25, 0x03	; 3
    19fa:	d1 f4       	brne	.+52     	; 0x1a30 <updateLCD+0x15a>
			dataEnable = TRUE;
			break;
		// All rows have been displayed
		// Return to V Front Porch
		case V_COUNT +(T_VD + T_Vlow + T_DV):
			dataEnable = FALSE;
    19fc:	10 92 65 01 	sts	0x0165, r1
		//	break;
		//Frame complete
		//case HSYNC_COUNT_FRAME_COMPLETE:
			//T_DV +(V_COUNT+T_VD+T_Vlow) + FRAME_UPDATE_DELAY:
			hsyncCount = 0;
    1a00:	10 92 63 01 	sts	0x0163, r1
    1a04:	10 92 62 01 	sts	0x0162, r1
			}
#endif
			
//#warning "NewNote: WTF, are we relying on loadData to have properly set the mode?"
// Yeah, guess that makes sense... Must be Nada...
			frameComplete = TRUE;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
			break;
    1a0a:	08 95       	ret
		//	if(hfm_nextOutput(&modulator))
		//		colorOverride = 0xff;
		//	else
		//		colorOverride = 7;
			//setpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = FALSE;
    1a0c:	10 92 64 01 	sts	0x0164, r1
			Nada_fromVsync();
    1a10:	ad 9a       	sbi	0x15, 5	; 21
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	90 93 65 00 	sts	0x0065, r25
    1a1a:	80 93 64 00 	sts	0x0064, r24
    1a1e:	84 e0       	ldi	r24, 0x04	; 4
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9f bd       	out	0x2f, r25	; 47
    1a24:	8e bd       	out	0x2e, r24	; 46
    1a26:	ad 98       	cbi	0x15, 5	; 21
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <updateLCD+0x15a>
			break;
		//Start of frame (DE active)
		case T_VD +(T_Vlow + T_DV):
			dataEnable = TRUE;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 65 01 	sts	0x0165, r24
//  point to the "first" Hsync. This is handled in sdramThing2.0's code
// Used to be:
//SIGNAL(TIMER0_COMPA_vect)
uint8_t updateLCD(void)
{
	uint8_t frameComplete = FALSE;
    1a30:	80 e0       	ldi	r24, 0x00	; 0
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...

	return frameComplete;
}
    1a32:	08 95       	ret

00001a34 <__vector_11>:
 //Nearly everything display-related happens in this interrupt
 // It even calls the functions that load (and calculate!) the data for the
 // next row.
 // So basically, the entire project is running via timer-interrupt.
 SIGNAL(HSYNC_TIMER_INTERRUPT_VECT) //TIMER0_COMPA_vect)
 {
    1a34:	1f 92       	push	r1
    1a36:	0f 92       	push	r0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	0f 92       	push	r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
	// drawPix is only called for drawn-rows (where DE is active, NOT for
	// Vblank rows)
	// H-Front-Porch is handled in the time between completion of this
	// interrupt and the next interrupt...

	if(updateLCD())
    1a56:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <updateLCD>
    1a5a:	88 23       	and	r24, r24
    1a5c:	29 f0       	breq	.+10     	; 0x1a68 <__vector_11+0x34>
	{
		frameCount++;
    1a5e:	80 91 61 01 	lds	r24, 0x0161
    1a62:	8f 5f       	subi	r24, 0xFF	; 255
    1a64:	80 93 61 01 	sts	0x0161, r24
	// to load a row to a row-buffer (as opposed to a frame-buffer)
	// thus, DE could gain more pixels because there would be fewer
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...
 }
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	bf 91       	pop	r27
    1a6e:	af 91       	pop	r26
    1a70:	9f 91       	pop	r25
    1a72:	8f 91       	pop	r24
    1a74:	7f 91       	pop	r23
    1a76:	6f 91       	pop	r22
    1a78:	5f 91       	pop	r21
    1a7a:	4f 91       	pop	r20
    1a7c:	3f 91       	pop	r19
    1a7e:	2f 91       	pop	r18
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <init_hsyncTimer>:
//Testing with values returned by hsyncTimerCalculator
//#define HSYNC_TIMER_OCRVAL	65

void init_hsyncTimer(void)
{
   HSYNC_TIMER_OCR = HSYNC_TIMER_OCRVAL; 
    1a8a:	85 e0       	ldi	r24, 0x05	; 5
    1a8c:	98 e0       	ldi	r25, 0x08	; 8
    1a8e:	90 93 8d 00 	sts	0x008D, r25
    1a92:	80 93 8c 00 	sts	0x008C, r24
							//T_Hlow_CYC + T_HD_CYC + T_DE_CYC + T_DH_CYC;
   timer_setWGM(HSYNC_TIMER_NUM, WGM_CLR_ON_COMPARE);
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <timer_setWGM>
   timer_selectDivisor(HSYNC_TIMER_NUM, HSYNC_TIMER_CLKDIV); //CLKDIV1);
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <timer_selectDivisor>
   timer_compareMatchIntEnable(HSYNC_TIMER_NUM, OUT_CHANNELA);
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	0c 94 9e 04 	jmp	0x93c	; 0x93c <timer_compareMatchIntSetup>

00001ab0 <main>:
	racer_init();
#endif

#if ( (defined(BLUE_ADC) && BLUE_ADC) \
		|| (defined(FB_QUESTION) && FB_QUESTION) )
	adc_takeInput(6);
    1ab0:	86 e0       	ldi	r24, 0x06	; 6
    1ab2:	0e 94 55 04 	call	0x8aa	; 0x8aa <adc_takeInput>
	adc_init();
    1ab6:	0e 94 41 04 	call	0x882	; 0x882 <adc_init>
	adc_select(6);
    1aba:	86 e0       	ldi	r24, 0x06	; 6
    1abc:	0e 94 25 04 	call	0x84a	; 0x84a <adc_select>
#if(defined(SEG_TET) && SEG_TET)
	tetInit(3);
#endif
	
#if(!defined(PWM_TESTING) || !PWM_TESTING)
	init_hsyncTimer();
    1ac0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <init_hsyncTimer>
#if(!defined(FB_DONT_USE_UPDATE) || !FB_DONT_USE_UPDATE)
	frameBufferUpdate();
#endif
#endif
	//This starts pretty late... watch out for WDT
	init_heartBeat();
    1ac4:	0e 94 cd 04 	call	0x99a	; 0x99a <init_heartBeat>

	setHeartRate(0);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	0e 94 b0 04 	call	0x960	; 0x960 <setHeartRate>

	lvds_timerInit();
    1ace:	0e 94 2d 06 	call	0xc5a	; 0xc5a <lvds_timerInit>

	// MUCH Of this is outside the screen...


#if(defined(FB_QUESTION) && FB_QUESTION)
	adc_startConversion();
    1ad2:	0e 94 33 04 	call	0x866	; 0x866 <adc_startConversion>
#define ADC_DETECTION_THRESHOLD	15 //20 //38 //(1024*125/3300)
					if(absDiff > ADC_DETECTION_THRESHOLD)
						fbQuestion_hitDetected();
				}
				adcAvg = 0;
				avgCount=1;
    1ad6:	c1 e0       	ldi	r28, 0x01	; 1

#if(defined(FB_QUESTION) && FB_QUESTION)
		static int32_t adcAvg = 0;
		static uint16_t adcVal;
		static uint8_t avgCount = 100;
		if(!adc_isBusy())
    1ad8:	0e 94 2e 04 	call	0x85c	; 0x85c <adc_isBusy>
    1adc:	81 11       	cpse	r24, r1
    1ade:	52 c0       	rjmp	.+164    	; 0x1b84 <main+0xd4>
		{
			adcVal = adc_getValue();
    1ae0:	0e 94 2b 04 	call	0x856	; 0x856 <adc_getValue>
    1ae4:	90 93 72 01 	sts	0x0172, r25
    1ae8:	80 93 71 01 	sts	0x0171, r24
			
			adc_startConversion();
    1aec:	0e 94 33 04 	call	0x866	; 0x866 <adc_startConversion>


			if(avgCount > 1)
    1af0:	40 91 03 01 	lds	r20, 0x0103
    1af4:	42 30       	cpi	r20, 0x02	; 2
    1af6:	20 f0       	brcs	.+8      	; 0x1b00 <main+0x50>
				avgCount--;
    1af8:	41 50       	subi	r20, 0x01	; 1
    1afa:	40 93 03 01 	sts	0x0103, r20
    1afe:	42 c0       	rjmp	.+132    	; 0x1b84 <main+0xd4>
    1b00:	20 91 71 01 	lds	r18, 0x0171
    1b04:	30 91 72 01 	lds	r19, 0x0172
    1b08:	80 91 6d 01 	lds	r24, 0x016D
    1b0c:	90 91 6e 01 	lds	r25, 0x016E
    1b10:	a0 91 6f 01 	lds	r26, 0x016F
    1b14:	b0 91 70 01 	lds	r27, 0x0170
			else if(avgCount == 1)
    1b18:	41 30       	cpi	r20, 0x01	; 1
    1b1a:	79 f4       	brne	.+30     	; 0x1b3a <main+0x8a>
			{
				avgCount=0;
    1b1c:	10 92 03 01 	sts	0x0103, r1
				adcAvg += adcVal;
    1b20:	82 0f       	add	r24, r18
    1b22:	93 1f       	adc	r25, r19
    1b24:	a1 1d       	adc	r26, r1
    1b26:	b1 1d       	adc	r27, r1
    1b28:	80 93 6d 01 	sts	0x016D, r24
    1b2c:	90 93 6e 01 	sts	0x016E, r25
    1b30:	a0 93 6f 01 	sts	0x016F, r26
    1b34:	b0 93 70 01 	sts	0x0170, r27
    1b38:	25 c0       	rjmp	.+74     	; 0x1b84 <main+0xd4>
			else if(avgCount == 0)
			{
				//After the first case, the average should be somewhere
				//'round the ADC Val... then after subtracting the current
				//adcVal, we should be close to zero...
				adcAvg -= adcVal;
    1b3a:	82 1b       	sub	r24, r18
    1b3c:	93 0b       	sbc	r25, r19
    1b3e:	a1 09       	sbc	r26, r1
    1b40:	b1 09       	sbc	r27, r1
    1b42:	80 93 6d 01 	sts	0x016D, r24
    1b46:	90 93 6e 01 	sts	0x016E, r25
    1b4a:	a0 93 6f 01 	sts	0x016F, r26
    1b4e:	b0 93 70 01 	sts	0x0170, r27
    1b52:	b7 ff       	sbrs	r27, 7
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <main+0xb4>
    1b56:	b0 95       	com	r27
    1b58:	a0 95       	com	r26
    1b5a:	90 95       	com	r25
    1b5c:	81 95       	neg	r24
    1b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b60:	af 4f       	sbci	r26, 0xFF	; 255
    1b62:	bf 4f       	sbci	r27, 0xFF	; 255
					// If there's a lot of change, it will be positive...
					// the ADC is ten-bits, so 3.3V/1024 = .003V per LSB
					// Of course, a spike isn't instantaneous...
					// .2V is measurable on the 'scope, currently...
#define ADC_DETECTION_THRESHOLD	15 //20 //38 //(1024*125/3300)
					if(absDiff > ADC_DETECTION_THRESHOLD)
    1b64:	40 97       	sbiw	r24, 0x10	; 16
    1b66:	a1 05       	cpc	r26, r1
    1b68:	b1 05       	cpc	r27, r1
    1b6a:	14 f0       	brlt	.+4      	; 0x1b70 <main+0xc0>
						fbQuestion_hitDetected();
    1b6c:	0e 94 29 0a 	call	0x1452	; 0x1452 <fbQuestion_hitDetected>
				}
				adcAvg = 0;
    1b70:	10 92 6d 01 	sts	0x016D, r1
    1b74:	10 92 6e 01 	sts	0x016E, r1
    1b78:	10 92 6f 01 	sts	0x016F, r1
    1b7c:	10 92 70 01 	sts	0x0170, r1
				avgCount=1;
    1b80:	c0 93 03 01 	sts	0x0103, r28
		|| (defined(FB_SMILEY) && FB_SMILEY) )

		//static uint32_t count = 0;
		static uint8_t lastFrameCount = 0;
#define FRAME_COUNT_LIMIT 0x03
		uint8_t thisFrameCount = frameCount&FRAME_COUNT_LIMIT;
    1b84:	d0 91 61 01 	lds	r29, 0x0161
    1b88:	d3 70       	andi	r29, 0x03	; 3

//		if(( (thisFrameCount==0) && (lastFrameCount==FRAME_COUNT_LIMIT) ))
		if(thisFrameCount != lastFrameCount)
    1b8a:	80 91 6c 01 	lds	r24, 0x016C
    1b8e:	d8 13       	cpse	r29, r24
		{

#if(defined(FB_QUESTION) && FB_QUESTION)
			fbQuestion_update();
    1b90:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <fbQuestion_update>
#elif (defined(FB_SMILEY) && FB_SMILEY)
			frameBufferUpdate();
#endif
		}

		lastFrameCount = thisFrameCount;
    1b94:	d0 93 6c 01 	sts	0x016C, r29
#endif
		//see cTools/unusedMacroTest.c
		//({0;});	no warning (anymore), I'm sure it did before...
		//(0);	"statement with no effect"
		heartUpdate();
    1b98:	0e 94 51 05 	call	0xaa2	; 0xaa2 <heartUpdate>
/*	Testing HEART_REMOVED for warnings...
		if(heartUpdate())
			heartUpdate();
*/
	}
    1b9c:	9d cf       	rjmp	.-198    	; 0x1ad8 <main+0x28>

00001b9e <__udivmodqi4>:
    1b9e:	99 1b       	sub	r25, r25
    1ba0:	79 e0       	ldi	r23, 0x09	; 9
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <__udivmodqi4_ep>

00001ba4 <__udivmodqi4_loop>:
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	96 17       	cp	r25, r22
    1ba8:	08 f0       	brcs	.+2      	; 0x1bac <__udivmodqi4_ep>
    1baa:	96 1b       	sub	r25, r22

00001bac <__udivmodqi4_ep>:
    1bac:	88 1f       	adc	r24, r24
    1bae:	7a 95       	dec	r23
    1bb0:	c9 f7       	brne	.-14     	; 0x1ba4 <__udivmodqi4_loop>
    1bb2:	80 95       	com	r24
    1bb4:	08 95       	ret

00001bb6 <__udivmodhi4>:
    1bb6:	aa 1b       	sub	r26, r26
    1bb8:	bb 1b       	sub	r27, r27
    1bba:	51 e1       	ldi	r21, 0x11	; 17
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <__udivmodhi4_ep>

00001bbe <__udivmodhi4_loop>:
    1bbe:	aa 1f       	adc	r26, r26
    1bc0:	bb 1f       	adc	r27, r27
    1bc2:	a6 17       	cp	r26, r22
    1bc4:	b7 07       	cpc	r27, r23
    1bc6:	10 f0       	brcs	.+4      	; 0x1bcc <__udivmodhi4_ep>
    1bc8:	a6 1b       	sub	r26, r22
    1bca:	b7 0b       	sbc	r27, r23

00001bcc <__udivmodhi4_ep>:
    1bcc:	88 1f       	adc	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	5a 95       	dec	r21
    1bd2:	a9 f7       	brne	.-22     	; 0x1bbe <__udivmodhi4_loop>
    1bd4:	80 95       	com	r24
    1bd6:	90 95       	com	r25
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	08 95       	ret

00001bde <__divmodhi4>:
    1bde:	97 fb       	bst	r25, 7
    1be0:	07 2e       	mov	r0, r23
    1be2:	16 f4       	brtc	.+4      	; 0x1be8 <__divmodhi4+0xa>
    1be4:	00 94       	com	r0
    1be6:	07 d0       	rcall	.+14     	; 0x1bf6 <__divmodhi4_neg1>
    1be8:	77 fd       	sbrc	r23, 7
    1bea:	09 d0       	rcall	.+18     	; 0x1bfe <__divmodhi4_neg2>
    1bec:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__udivmodhi4>
    1bf0:	07 fc       	sbrc	r0, 7
    1bf2:	05 d0       	rcall	.+10     	; 0x1bfe <__divmodhi4_neg2>
    1bf4:	3e f4       	brtc	.+14     	; 0x1c04 <__divmodhi4_exit>

00001bf6 <__divmodhi4_neg1>:
    1bf6:	90 95       	com	r25
    1bf8:	81 95       	neg	r24
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	08 95       	ret

00001bfe <__divmodhi4_neg2>:
    1bfe:	70 95       	com	r23
    1c00:	61 95       	neg	r22
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255

00001c04 <__divmodhi4_exit>:
    1c04:	08 95       	ret

00001c06 <__tablejump2__>:
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31

00001c0a <__tablejump__>:
    1c0a:	05 90       	lpm	r0, Z+
    1c0c:	f4 91       	lpm	r31, Z
    1c0e:	e0 2d       	mov	r30, r0
    1c10:	09 94       	ijmp

00001c12 <_exit>:
    1c12:	f8 94       	cli

00001c14 <__stop_program>:
    1c14:	ff cf       	rjmp	.-2      	; 0x1c14 <__stop_program>
