
_BUILD/LCDdirectLVDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000017ac  00001840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015c  0080006e  0080006e  0000184e  2**0
                  ALLOC
  3 .stab         0000420c  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002068  00000000  00000000  00005a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c2       	rjmp	.+1178   	; 0x49c <__ctors_end>
       2:	67 c2       	rjmp	.+1230   	; 0x4d2 <__bad_interrupt>
       4:	66 c2       	rjmp	.+1228   	; 0x4d2 <__bad_interrupt>
       6:	65 c2       	rjmp	.+1226   	; 0x4d2 <__bad_interrupt>
       8:	64 c2       	rjmp	.+1224   	; 0x4d2 <__bad_interrupt>
       a:	63 c2       	rjmp	.+1222   	; 0x4d2 <__bad_interrupt>
       c:	62 c2       	rjmp	.+1220   	; 0x4d2 <__bad_interrupt>
       e:	61 c2       	rjmp	.+1218   	; 0x4d2 <__bad_interrupt>
      10:	60 c2       	rjmp	.+1216   	; 0x4d2 <__bad_interrupt>
      12:	5f c2       	rjmp	.+1214   	; 0x4d2 <__bad_interrupt>
      14:	5e c2       	rjmp	.+1212   	; 0x4d2 <__bad_interrupt>
      16:	5d c2       	rjmp	.+1210   	; 0x4d2 <__bad_interrupt>
      18:	5c c2       	rjmp	.+1208   	; 0x4d2 <__bad_interrupt>
      1a:	5b c2       	rjmp	.+1206   	; 0x4d2 <__bad_interrupt>
      1c:	98 c7       	rjmp	.+3888   	; 0xf4e <__vector_14>
      1e:	59 c2       	rjmp	.+1202   	; 0x4d2 <__bad_interrupt>
      20:	58 c2       	rjmp	.+1200   	; 0x4d2 <__bad_interrupt>
      22:	57 c2       	rjmp	.+1198   	; 0x4d2 <__bad_interrupt>
      24:	56 c2       	rjmp	.+1196   	; 0x4d2 <__bad_interrupt>

00000026 <sineTable>:
      26:	00 00 92 01 24 03 b6 04 48 06 d9 07 6a 09 fb 0a     ....$...H...j...
      36:	8c 0c 1c 0e ab 0f 3a 11 c8 12 55 14 e2 15 6e 17     ......:...U...n.
      46:	f9 18 82 1a 0b 1c 93 1d 1a 1f 9f 20 23 22 a6 23     ........... #".#
      56:	28 25 a8 26 26 28 a3 29 1f 2b 99 2c 11 2e 87 2f     (%.&&(.).+.,.../
      66:	fb 30 6e 32 df 33 4d 35 ba 36 24 38 8c 39 f2 3a     .0n2.3M5.6$8.9.:
      76:	56 3c b8 3d 17 3f 73 40 ce 41 25 43 7a 44 cd 45     V<.=.?s@.A%CzD.E
      86:	1c 47 69 48 b4 49 fb 4a 3f 4c 81 4d bf 4e fb 4f     .GiH.I.J?L.M.N.O
      96:	33 51 68 52 9b 53 c9 54 f5 55 1d 57 42 58 64 59     3QhR.S.T.U.WBXdY
      a6:	82 5a 9c 5b b3 5c c7 5d d7 5e e3 5f eb 60 f0 61     .Z.[.\.].^._.`.a
      b6:	f1 62 ee 63 e8 64 dd 65 cf 66 bc 67 a6 68 8b 69     .b.c.d.e.f.g.h.i
      c6:	6d 6a 4a 6b 23 6c f8 6c c9 6d 96 6e 5e 6f 22 70     mjJk#l.l.m.n^o"p
      d6:	e2 70 9d 71 54 72 07 73 b5 73 5f 74 04 75 a5 75     .p.qTr.s.s_t.u.u
      e6:	41 76 d8 76 6b 77 fa 77 84 78 09 79 89 79 05 7a     Av.vkw.w.x.y.y.z
      f6:	7c 7a ee 7a 5c 7b c5 7b 29 7c 88 7c e3 7c 39 7d     |z.z\{.{)|.|.|9}
     106:	89 7d d5 7d 1d 7e 5f 7e 9c 7e d5 7e 09 7f 37 7f     .}.}.~_~.~.~..7.
     116:	61 7f 86 7f a6 7f c1 7f d8 7f e9 7f f5 7f fd 7f     a...............
     126:	ff 7f                                               ..

00000128 <header>:
     128:	4c 43 44 64 69 72 65 63 74 4c 56 44 53 36 31 20     LCDdirectLVDS61 
     138:	32 30 31 33 2d 31 32 2d 31 36 20 32 33 3a 34 39     2013-12-16 23:49
     148:	3a 34 34 00                                         :44.

0000014c <characters>:
     14c:	00 0c 36 36 0c 00 1c 06 18 06 00 00 00 00 00 60     ..66...........`
     15c:	1e 0c 1e 1e 38 3f 1c 3f 1e 1e 00 00 18 00 06 1e     ....8?.?........
     16c:	3e 0c 3f 3c 3f 7f 7f 3c 33 1e 78 67 0f 63 63 1c     >.?<?..<3.xg.cc.
     17c:	3f 1e 3f 1e 3f 33 33 63 63 33 7f 1e 03 1e 08 00     ?.?.?33cc3......
     18c:	0c 00 07 00 38 00 1c 00 07 0c 18 07 0e 00 00 00     ....8...........
     19c:	00 00 00 00 08 00 00 00 00 00 00 38 18 07 6e 0e     ...........8..n.
     1ac:	00 1e 36 36 3e 63 36 06 0c 0c 66 0c 00 00 00 30     ..66>c6...f....0
     1bc:	33 0f 33 33 3c 03 06 33 33 33 00 00 0c 00 0c 33     3.33<..333.....3
     1cc:	63 1e 66 66 36 46 46 66 33 0c 30 66 06 77 67 36     c.ff6FFf3.0f.wg6
     1dc:	66 33 66 33 2d 33 33 63 63 33 33 06 06 18 1c 00     f3f3-33cc33.....
     1ec:	0c 00 06 00 30 00 36 00 06 00 00 06 0c 00 00 00     ....0.6.........
     1fc:	00 00 00 00 0c 00 00 00 00 00 00 0c 18 0c 3b 13     ..............;.
     20c:	00 1e 36 7f 03 33 1c 03 06 18 3c 0c 00 00 00 18     ..6..3....<.....
     21c:	3b 0c 30 30 36 1f 03 30 33 33 0c 0c 06 3f 18 30     ;.006..033...?.0
     22c:	7b 33 66 03 66 16 16 03 33 0c 30 36 06 7f 6f 63     {3f.f...3.06..oc
     23c:	66 33 66 07 0c 33 33 63 36 33 19 06 0c 18 36 00     f3f..33c63....6.
     24c:	18 1e 3e 1e 30 1e 06 6e 36 0e 1e 66 0c 37 1f 1e     ..>.0..n6..f.7..
     25c:	3b 6e 1b 3e 3e 33 33 63 63 33 3f 0c 18 0c 00 39     ;n.>>33cc3?....9
     26c:	00 0c 00 36 1e 18 6e 00 06 18 ff 3f 00 3f 00 0c     ...6..n....?.?..
     27c:	3f 0c 1c 1c 33 30 1f 18 1e 3e 0c 0c 03 00 30 18     ?...30...>....0.
     28c:	7b 33 3e 03 66 1e 1e 03 3f 0c 30 1e 06 6b 7b 63     {3>.f...?.0..k{c
     29c:	3e 33 3e 1c 0c 33 33 6b 1c 1e 0c 06 18 18 63 00     >3>..33k......c.
     2ac:	00 30 66 33 3e 33 0f 33 6e 0c 18 36 0c 7f 33 33     .0f3>3.3n..6..33
     2bc:	66 33 36 03 0c 33 33 63 36 33 19 07 00 38 00 69     f36..33c63...8.i
     2cc:	00 0c 00 7f 30 0c 3b 00 06 18 3c 0c 00 00 00 06     ....0.;...<.....
     2dc:	37 0c 06 30 7f 30 33 0c 33 30 00 00 06 3f 18 0c     7..0.03.30...?..
     2ec:	7b 3f 66 03 66 16 16 73 33 0c 33 36 46 63 73 63     {?f.f..s3.36Fcsc
     2fc:	06 3b 1e 38 0c 33 33 7f 36 0c 46 06 30 18 00 00     .;.8.33.6.F.0...
     30c:	00 3e 66 03 33 3f 06 33 66 0c 18 1e 0c 6b 33 33     .>f.3?.3f....k33
     31c:	66 33 36 1e 0c 33 33 6b 1c 33 0c 0c 18 0c 00 0e     f36..33k.3......
     32c:	00 00 00 36 1f 66 33 00 0c 0c 66 0c 0e 00 0c 03     ...6.f3...f.....
     33c:	33 0c 33 33 30 33 33 06 33 18 0c 0e 0c 00 0c 00     3.33033.3.......
     34c:	03 33 66 66 36 46 06 66 33 0c 33 66 66 63 63 36     .3ff6F.f3.3ffcc6
     35c:	06 1e 36 33 0c 33 1e 77 63 0c 63 06 60 18 00 00     ..63.3.wc.c.`...
     36c:	00 33 66 33 33 03 06 3e 66 0c 18 36 0c 63 33 33     .3f33..>f..6.c33
     37c:	3e 3e 06 30 2c 33 1e 7f 36 3e 26 0c 18 0c 00 f3     >>.0,3..6>&.....
     38c:	00 0c 00 36 0c 63 6e 00 18 06 00 00 0c 00 0c 01     ...6.cn.........
     39c:	1e 3f 3f 1e 30 1e 1e 06 1e 0e 0c 0c 18 00 06 0c     .??.0...........
     3ac:	1e 33 3f 3c 3f 7f 0f 7c 33 1e 1e 67 7f 63 63 1c     .3?<?..|3..g.cc.
     3bc:	0f 38 67 1e 1e 3f 0c 63 63 1e 7f 1e 40 1e 00 00     .8g..?.cc...@...
     3cc:	00 6e 3d 1e 6e 1e 0f 30 67 1e 1b 67 1e 63 33 1e     .n=.n..0g..g.c3.
     3dc:	06 30 0f 1f 18 6e 0c 36 63 30 3f 38 18 07 00 46     .0...n.6c0?8...F
     3ec:	00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00     ................
     3fc:	00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00     ................
     40c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     41c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
     42c:	00 00 00 00 00 00 00 1f 00 00 0e 00 00 00 00 00     ................
     43c:	0f 78 00 00 00 00 00 00 00 1f 00 00 00 00 00 f4     .x..............

0000044c <pgm_tetPiece>:
     44c:	f0 00 22 22 f0 00 22 22 60 0c 64 02 60 0c 64 02     ..""..""`.d.`.d.
     45c:	c0 06 40 8c c0 06 40 8c e0 04 c4 04 e4 00 64 04     ..@...@.......d.
     46c:	e0 08 4c 04 e2 00 44 06 e0 02 44 0c e8 00 46 04     ..L...D...D...F.
     47c:	60 06 60 06 60 06 60 06                             `.`.`.`.

00000484 <__c.1838>:
     484:	45 46 47 65 66 67 00                                EFGefg.

0000048b <__c.1832>:
     48b:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
     49b:	00                                                  .

0000049c <__ctors_end>:
     49c:	11 24       	eor	r1, r1
     49e:	1f be       	out	0x3f, r1	; 63
     4a0:	cf e5       	ldi	r28, 0x5F	; 95
     4a2:	d2 e0       	ldi	r29, 0x02	; 2
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	cd bf       	out	0x3d, r28	; 61

000004a8 <__do_copy_data>:
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	a0 e6       	ldi	r26, 0x60	; 96
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	ec ea       	ldi	r30, 0xAC	; 172
     4b0:	f7 e1       	ldi	r31, 0x17	; 23
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x10>
     4b4:	05 90       	lpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	ae 36       	cpi	r26, 0x6E	; 110
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0xc>

000004be <__do_clear_bss>:
     4be:	11 e0       	ldi	r17, 0x01	; 1
     4c0:	ae e6       	ldi	r26, 0x6E	; 110
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	aa 3c       	cpi	r26, 0xCA	; 202
     4ca:	b1 07       	cpc	r27, r17
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	3a d5       	rcall	.+2676   	; 0xf44 <main>
     4d0:	6b c9       	rjmp	.-3370   	; 0xfffff7a8 <__eeprom_end+0xff7ef7a8>

000004d2 <__bad_interrupt>:
     4d2:	96 cd       	rjmp	.-1236   	; 0x0 <__vectors>

000004d4 <hfm_setup>:

//Mainly just for setting up the maxPower (divisor)
// [can] use hfm_setPower otherwise...
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
     4d4:	fc 01       	movw	r30, r24
	modulator->desiredSum = 0;
     4d6:	11 82       	std	Z+1, r1	; 0x01
     4d8:	10 82       	st	Z, r1
	modulator->maxPower = maxPower;
     4da:	42 83       	std	Z+2, r20	; 0x02
{
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
     4de:	86 17       	cp	r24, r22
     4e0:	10 f0       	brcs	.+4      	; 0x4e6 <hfm_setup+0x12>
		modulator->power = power;
     4e2:	63 83       	std	Z+3, r22	; 0x03
     4e4:	08 95       	ret
	else
		modulator->power = modulator->maxPower;
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	83 83       	std	Z+3, r24	; 0x03
     4ea:	08 95       	ret

000004ec <hfm_setPower>:
// This needs to be set, initially! 
//   either init it in the hfm variable declaration
//   or use hfm_setup (ideal)
// however, sometimes it needs to be variable, thus hfm_setup (above)
void hfm_setPower(hfm_t	*modulator, uint8_t power)
{
     4ec:	fc 01       	movw	r30, r24
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     4ee:	82 81       	ldd	r24, Z+2	; 0x02
     4f0:	86 17       	cp	r24, r22
     4f2:	10 f0       	brcs	.+4      	; 0x4f8 <hfm_setPower+0xc>
		modulator->power = power;
     4f4:	63 83       	std	Z+3, r22	; 0x03
     4f6:	08 95       	ret
	else
		modulator->power = modulator->maxPower;
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	83 83       	std	Z+3, r24	; 0x03
     4fc:	08 95       	ret

000004fe <hfm_nextOutput>:
}

//Returns 0 if the "output" should be "off" in this cycle
//		  1 if the "output" should be "on"  in this cycle
uint8_t hfm_nextOutput(hfm_t *modulator)
{
     4fe:	fc 01       	movw	r30, r24
	// IF desired == 255, we want it never to clr...
	//		but running will be 0 the first time
	//		and we'll therefore if... set == good
	//		and later we'll runningSum == desiredSum (above) 
	//    and reset and if again
	if(modulator->desiredSum > 0)
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	18 16       	cp	r1, r24
     506:	19 06       	cpc	r1, r25
     508:	14 f0       	brlt	.+4      	; 0x50e <hfm_nextOutput+0x10>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	08 c0       	rjmp	.+16     	; 0x51e <hfm_nextOutput+0x20>
	{
		(modulator->desiredSum) -= (modulator->maxPower); //0xff;
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	22 81       	ldd	r18, Z+2	; 0x02
     514:	82 1b       	sub	r24, r18
     516:	91 09       	sbc	r25, r1
     518:	91 83       	std	Z+1, r25	; 0x01
     51a:	80 83       	st	Z, r24
     51c:	81 e0       	ldi	r24, 0x01	; 1
	{
		//Don't modify runningSum, wait until desiredSum catches up...
		toReturn = FALSE;
	}
	
	(modulator->desiredSum) += (modulator->power);
     51e:	20 81       	ld	r18, Z
     520:	31 81       	ldd	r19, Z+1	; 0x01
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	29 0f       	add	r18, r25
     526:	31 1d       	adc	r19, r1
     528:	31 83       	std	Z+1, r19	; 0x01
     52a:	20 83       	st	Z, r18
		modulator->runningSum = 0;
		modulator->desiredSum = 0;
	}
*/	
	return toReturn;
}
     52c:	08 95       	ret

0000052e <adc_select>:
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     52e:	97 b1       	in	r25, 0x07	; 7
     530:	8f 71       	andi	r24, 0x1F	; 31
     532:	90 7e       	andi	r25, 0xE0	; 224
     534:	89 2b       	or	r24, r25
     536:	87 b9       	out	0x07, r24	; 7
}
     538:	08 95       	ret

0000053a <adc_startConversion>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     53a:	86 b1       	in	r24, 0x06	; 6

//Return TRUE on error (if there was a previous conversion in progress...)
uint8_t adc_startConversion(void)
{
	//Check if a conversion is already in progress...
	if(adc_isBusy())
     53c:	80 74       	andi	r24, 0x40	; 64
     53e:	11 f0       	breq	.+4      	; 0x544 <adc_startConversion+0xa>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret
	// until a conversion is started. Once the conversion starts, the channel and 
	// reference selection is locked to ensure a sufficient sampling time for the ADC."
	
	//"In Single Conversion mode, write this bit to one to start each conversion."
	// BEWARE: calling this will CLEAR the conversion-complete indicator
	setbit(ADSC, ADCSRA);
     544:	36 9a       	sbi	0x06, 6	; 6
     546:	80 e0       	ldi	r24, 0x00	; 0
	return FALSE;
}
     548:	08 95       	ret

0000054a <adc_init>:
	// (i.e. a 3.3V voltage regulator output)
	//Technically, these values are reset-defaults, but just make sure
	//!!!According to attiny861, these values set VCC as the voltage ref
	//   NOT an external reference. So the above note seems odd...
	// This IS what I want on the Tiny861 threePinIDer...
	clrbit(REFS0, ADMUX);
     54a:	3e 98       	cbi	0x07, 6	; 7
	clrbit(REFS1, ADMUX);
     54c:	3f 98       	cbi	0x07, 7	; 7
	
	//Use right-adjusted output
	// so values read from the 2-byte register are:
	//	8-bits in the Low reg, and 2 in the High reg
	clrbit(ADLAR, ADMUX);
     54e:	3d 98       	cbi	0x07, 5	; 7

	//Enable the ADC
	// (see description for noise cancelling techniques)
	setbit(ADEN, ADCSRA);
     550:	37 9a       	sbi	0x06, 7	; 6
	
	//Don't use Auto Triggering
	// (@@@ could use a timer, etc.)
	clrbit(ADATE, ADCSRA);
     552:	35 98       	cbi	0x06, 5	; 6
	// "ADIF is cleared by writing a logical one to the flag."
	// " BEWARE that if doing a Read-Modify-Write on ADCSRA, a pending interrupt can be disabled. "
	//   because the flag may be 1 when read, and re-writing 1 clears it.
	//   ???could get around this by using a special set/clrbit instruction which would always write 0
	//   to this bit...
	setbit(ADIF, ADCSRA);
     554:	34 9a       	sbi	0x06, 4	; 6
	
	//make sure the interrupt is not enabled...
	clrbit(ADIE, ADCSRA);
     556:	33 98       	cbi	0x06, 3	; 6
}

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     558:	86 b1       	in	r24, 0x06	; 6
     55a:	87 60       	ori	r24, 0x07	; 7
     55c:	86 b9       	out	0x06, r24	; 6
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     55e:	87 b1       	in	r24, 0x07	; 7
     560:	8f 61       	ori	r24, 0x1F	; 31
     562:	87 b9       	out	0x07, r24	; 7
	//Start a conversion so it will be initialized for the next...
	//"The first conversion after ADSC has been written 
	// after the ADC has been enabled ... 
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();
     564:	ea df       	rcall	.-44     	; 0x53a <adc_startConversion>
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     566:	86 b1       	in	r24, 0x06	; 6
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();

	//Wait for the initialization to complete for lockstepping...
	while(adc_isBusy())
     568:	80 74       	andi	r24, 0x40	; 64
     56a:	e9 f7       	brne	.-6      	; 0x566 <adc_init+0x1c>
	{}
}
     56c:	08 95       	ret

0000056e <adc_getValue>:
//Return the last value read by the ADC
// check if adc_isBusy is true before reading, in lockstep...
// Since ADLAR is cleared, it will be the low ten bits 
uint16_t adc_getValue(void)
{
	return ADC;
     56e:	24 b1       	in	r18, 0x04	; 4
     570:	35 b1       	in	r19, 0x05	; 5
	//reading both values takes longer and some other things mentioned in the manual
	// (i.e. it might be more efficient to only read one byte if acceptable)
	// unless only reading ADCH: "ADCL must be read first, then ADCH"
	//!!! Might want to verify this occurs properly in the assembly code
	
}
     572:	c9 01       	movw	r24, r18
     574:	08 95       	ret

00000576 <adc_isBusy>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     576:	86 b1       	in	r24, 0x06	; 6
     578:	82 95       	swap	r24
     57a:	86 95       	lsr	r24
     57c:	86 95       	lsr	r24
}
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	08 95       	ret

00000582 <adc_setPrescaler>:

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     582:	96 b1       	in	r25, 0x06	; 6
     584:	87 70       	andi	r24, 0x07	; 7
     586:	98 7f       	andi	r25, 0xF8	; 248
     588:	89 2b       	or	r24, r25
     58a:	86 b9       	out	0x06, r24	; 6
}
     58c:	08 95       	ret

0000058e <adc_takeInput>:
	uint8_t bitNum = inputNum;

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
     58e:	83 30       	cpi	r24, 0x03	; 3
     590:	80 f0       	brcs	.+32     	; 0x5b2 <adc_takeInput+0x24>

	//Analog inputs 7-10 are selected in DIDR1 and shifted...
	// 7 is bit 4, 10 is bit 7...
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
     592:	87 30       	cpi	r24, 0x07	; 7
     594:	10 f4       	brcc	.+4      	; 0x59a <adc_takeInput+0xc>

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
		bitNum = inputNum + 1;
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	0c c0       	rjmp	.+24     	; 0x5b2 <adc_takeInput+0x24>
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
	{
		bitNum = inputNum - 3;
		setbit(bitNum, DIDR1);
     59a:	92 b1       	in	r25, 0x02	; 2
     59c:	83 50       	subi	r24, 0x03	; 3
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <adc_takeInput+0x1a>
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	8a 95       	dec	r24
     5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <adc_takeInput+0x16>
     5ac:	92 2b       	or	r25, r18
     5ae:	92 b9       	out	0x02, r25	; 2
		return;
     5b0:	08 95       	ret
	}
#endif

	if(bitNum <= 7)
		setbit(bitNum, DIDR0);
     5b2:	91 b1       	in	r25, 0x01	; 1
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <adc_takeInput+0x30>
     5ba:	22 0f       	add	r18, r18
     5bc:	33 1f       	adc	r19, r19
     5be:	8a 95       	dec	r24
     5c0:	e2 f7       	brpl	.-8      	; 0x5ba <adc_takeInput+0x2c>
     5c2:	92 2b       	or	r25, r18
     5c4:	91 b9       	out	0x01, r25	; 1
     5c6:	08 95       	ret

000005c8 <timer_selectDivisor>:
	uint8_t csbits;
	
  #if defined(CSOBS)
	if(timerNum == 0 || timerNum == 1 || timerNum == 3)//IS_CSTYP(timerNum) || IS_CSOBS(timerNum))
  #else
	if(IS_CSTYP(timerNum))
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	28 f5       	brcc	.+74     	; 0x616 <timer_selectDivisor+0x4e>
  #endif
	{
		switch(clockDiv)
     5cc:	66 30       	cpi	r22, 0x06	; 6
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <timer_selectDivisor+0x28>
     5d0:	67 30       	cpi	r22, 0x07	; 7
     5d2:	28 f4       	brcc	.+10     	; 0x5de <timer_selectDivisor+0x16>
     5d4:	66 23       	and	r22, r22
     5d6:	51 f0       	breq	.+20     	; 0x5ec <timer_selectDivisor+0x24>
     5d8:	63 30       	cpi	r22, 0x03	; 3
     5da:	e9 f4       	brne	.+58     	; 0x616 <timer_selectDivisor+0x4e>
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <timer_selectDivisor+0x20>
     5de:	68 30       	cpi	r22, 0x08	; 8
     5e0:	49 f0       	breq	.+18     	; 0x5f4 <timer_selectDivisor+0x2c>
     5e2:	6a 30       	cpi	r22, 0x0A	; 10
     5e4:	c1 f4       	brne	.+48     	; 0x616 <timer_selectDivisor+0x4e>
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <timer_selectDivisor+0x30>
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <timer_selectDivisor+0x32>
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <timer_selectDivisor+0x32>
     5f0:	93 e0       	ldi	r25, 0x03	; 3
			case CLKDIV8:
				csbits = CSTYP_DIV8;
				break;
			case CLKDIV64:
				csbits = CSTYP_DIV64;	
				break;
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <timer_selectDivisor+0x32>
     5f4:	94 e0       	ldi	r25, 0x04	; 4
			case CLKDIV256:
				csbits = CSTYP_DIV256;	
				break;
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <timer_selectDivisor+0x32>
     5f8:	95 e0       	ldi	r25, 0x05	; 5
     5fa:	97 70       	andi	r25, 0x07	; 7
	}
  #endif
	else 
		return 1;	

	switch(timerNum)
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	29 f0       	breq	.+10     	; 0x60a <timer_selectDivisor+0x42>
	{
		//Assume Timer0 and Timer1 exist (see setWGM)
		case 0:
			writeMasked(csbits, CSMASK, T0_CSReg);
     600:	83 b7       	in	r24, 0x33	; 51
     602:	88 7f       	andi	r24, 0xF8	; 248
     604:	89 2b       	or	r24, r25
     606:	83 bf       	out	0x33, r24	; 51
     608:	04 c0       	rjmp	.+8      	; 0x612 <timer_selectDivisor+0x4a>
			break;
		case 1:
			writeMasked(csbits, CSMASK, T1_CSReg);
     60a:	8f b5       	in	r24, 0x2f	; 47
     60c:	88 7f       	andi	r24, 0xF8	; 248
     60e:	89 2b       	or	r24, r25
     610:	8f bd       	out	0x2f, r24	; 47
     612:	80 e0       	ldi	r24, 0x00	; 0
			break;
     614:	08 95       	ret
     616:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     618:	08 95       	ret

0000061a <timer_setWGM>:
//	wgmLb *= 0xff;
//	wgmHb *= 0xff;

	//Make sure the chosen WGM will be written to the WGM bits properly, as implemented below...
	// Only modes 0-3 are implemented...
	if(wgm > 0x03)
     61a:	64 30       	cpi	r22, 0x04	; 4
     61c:	f0 f4       	brcc	.+60     	; 0x65a <timer_setWGM+0x40>
		return 1;
	
	switch(timerNum)
     61e:	88 23       	and	r24, r24
     620:	19 f0       	breq	.+6      	; 0x628 <timer_setWGM+0xe>
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	d1 f4       	brne	.+52     	; 0x65a <timer_setWGM+0x40>
     626:	0a c0       	rjmp	.+20     	; 0x63c <timer_setWGM+0x22>
#ifdef _AVR_IOTNx61_H_
			//TinyX61s' Timer0 is an exception...
			// It only has WGM00, which serves the same functionality as
			// most others' WGM01 (when their WGM00 == 0)
			// (No PWM)
			if(wgmLb)
     628:	86 2f       	mov	r24, r22
     62a:	81 70       	andi	r24, 0x01	; 1
     62c:	b1 f4       	brne	.+44     	; 0x65a <timer_setWGM+0x40>
				return 1;

			//Whatever .stab is, this single change reduces it by 36Bytes
			writebit(WGM00, T0_WGMReg, wgmHb);
     62e:	62 70       	andi	r22, 0x02	; 2
     630:	11 f0       	breq	.+4      	; 0x636 <timer_setWGM+0x1c>
     632:	a8 9a       	sbi	0x15, 0	; 21
     634:	01 c0       	rjmp	.+2      	; 0x638 <timer_setWGM+0x1e>
     636:	a8 98       	cbi	0x15, 0	; 21
     638:	85 b3       	in	r24, 0x15	; 21
     63a:	0d c0       	rjmp	.+26     	; 0x656 <timer_setWGM+0x3c>
     63c:	61 30       	cpi	r22, 0x01	; 1
     63e:	19 f4       	brne	.+6      	; 0x646 <timer_setWGM+0x2c>
					wgmHb = 0;
					break;
			}

			//NOTE: TinyX61s' WGM bits are both in TCCR1D (very unusual)
			writebit(WGM10, TCCR1D, wgmLb);
     640:	86 b5       	in	r24, 0x26	; 38
     642:	81 60       	ori	r24, 0x01	; 1
     644:	02 c0       	rjmp	.+4      	; 0x64a <timer_setWGM+0x30>
     646:	86 b5       	in	r24, 0x26	; 38
     648:	8e 7f       	andi	r24, 0xFE	; 254
     64a:	86 bd       	out	0x26, r24	; 38
     64c:	86 b5       	in	r24, 0x26	; 38
			writebit(WGM11, TCCR1D, wgmHb);
     64e:	86 b5       	in	r24, 0x26	; 38
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	86 bd       	out	0x26, r24	; 38
     654:	86 b5       	in	r24, 0x26	; 38
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret
     65a:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     65c:	08 95       	ret

0000065e <timer_init>:

//Roughly equivalent to the ol' Init_timerX(clkDiv, wgm)
//Return 0 if no error...
#if (!defined(TIMER_INIT_UNUSED) || !TIMER_INIT_UNUSED)
uint8_t timer_init(uint8_t timerNum, uint8_t clockDiv, uint8_t wgm)
{
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	18 2f       	mov	r17, r24
     664:	06 2f       	mov	r16, r22
	//set the waveform mode
	ERR_HANDLE_NUM(1,				\
     666:	64 2f       	mov	r22, r20
     668:	d8 df       	rcall	.-80     	; 0x61a <timer_setWGM>
     66a:	88 23       	and	r24, r24
     66c:	11 f0       	breq	.+4      	; 0x672 <timer_init+0x14>
     66e:	80 61       	ori	r24, 0x10	; 16
     670:	05 c0       	rjmp	.+10     	; 0x67c <timer_init+0x1e>
		timer_setWGM(timerNum, wgm)	);

	//select the clock
	ERR_HANDLE_NUM(2,							\
     672:	81 2f       	mov	r24, r17
     674:	60 2f       	mov	r22, r16
     676:	a8 df       	rcall	.-176    	; 0x5c8 <timer_selectDivisor>
     678:	81 11       	cpse	r24, r1
     67a:	80 62       	ori	r24, 0x20	; 32
		timer_selectDivisor(timerNum, clockDiv)	);
		
	return 0;
}
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	08 95       	ret

00000682 <timer_compareMatchIntSetup>:
uint8_t timer_compareMatchIntSetup(uint8_t timerNum, uint8_t outputChannel,\
	  												uint8_t enable)
{
	uint8_t channelNum;

	if(timerNum >= MAXTIMERS)
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	10 f0       	brcs	.+4      	; 0x68a <timer_compareMatchIntSetup+0x8>
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	08 95       	ret
		return 1;

	if(outputChannel >= 2) //MAXCHANNELSPERTIMER)
     68a:	62 30       	cpi	r22, 0x02	; 2
     68c:	10 f0       	brcs	.+4      	; 0x692 <timer_compareMatchIntSetup+0x10>
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	08 95       	ret
     692:	44 23       	and	r20, r20
     694:	11 f0       	breq	.+4      	; 0x69a <timer_compareMatchIntSetup+0x18>
     696:	41 e0       	ldi	r20, 0x01	; 1
	channelNum = (timerNum<<4) + outputChannel;

	//Don't clear interrupts before disabling this one, or that defeats the purpose!
	// But do clear so we don't get unexpected overflows on init
	if(enable)
		cli();
     698:	f8 94       	cli
	
	switch(channelNum)
     69a:	82 95       	swap	r24
     69c:	80 7f       	andi	r24, 0xF0	; 240
     69e:	86 0f       	add	r24, r22
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	a1 f0       	breq	.+40     	; 0x6cc <timer_compareMatchIntSetup+0x4a>
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	30 f0       	brcs	.+12     	; 0x6b4 <timer_compareMatchIntSetup+0x32>
     6a8:	80 31       	cpi	r24, 0x10	; 16
     6aa:	e1 f0       	breq	.+56     	; 0x6e4 <timer_compareMatchIntSetup+0x62>
     6ac:	81 31       	cpi	r24, 0x11	; 17
     6ae:	31 f1       	breq	.+76     	; 0x6fc <timer_compareMatchIntSetup+0x7a>
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	08 95       	ret
			break;
	   #endif
	   #if defined(OCIE0A)
		case 0x00:
//			setbit(OCIE0A, T0_TIMSK);
			writebit(OCIE0A, T0_TIMSK, enable);
     6b4:	44 23       	and	r20, r20
     6b6:	19 f0       	breq	.+6      	; 0x6be <timer_compareMatchIntSetup+0x3c>
     6b8:	89 b7       	in	r24, 0x39	; 57
     6ba:	80 61       	ori	r24, 0x10	; 16
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <timer_compareMatchIntSetup+0x40>
     6be:	89 b7       	in	r24, 0x39	; 57
     6c0:	8f 7e       	andi	r24, 0xEF	; 239
     6c2:	89 bf       	out	0x39, r24	; 57
     6c4:	89 b7       	in	r24, 0x39	; 57
			// My OCD bit me in the ass, this was set to TIMSK by mistake(?)
			setbit(OCF0A, T0_TIFR);
     6c6:	88 b7       	in	r24, 0x38	; 56
     6c8:	80 61       	ori	r24, 0x10	; 16
     6ca:	23 c0       	rjmp	.+70     	; 0x712 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE0B)
		case 0x01:
//			setbit(OCIE0B, T0_TIMSK);
			writebit(OCIE0B, T0_TIMSK, enable);
     6cc:	44 23       	and	r20, r20
     6ce:	19 f0       	breq	.+6      	; 0x6d6 <timer_compareMatchIntSetup+0x54>
     6d0:	89 b7       	in	r24, 0x39	; 57
     6d2:	88 60       	ori	r24, 0x08	; 8
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <timer_compareMatchIntSetup+0x58>
     6d6:	89 b7       	in	r24, 0x39	; 57
     6d8:	87 7f       	andi	r24, 0xF7	; 247
     6da:	89 bf       	out	0x39, r24	; 57
     6dc:	89 b7       	in	r24, 0x39	; 57
			// As was this...
			setbit(OCF0B, T0_TIFR);
     6de:	88 b7       	in	r24, 0x38	; 56
     6e0:	88 60       	ori	r24, 0x08	; 8
     6e2:	17 c0       	rjmp	.+46     	; 0x712 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1A)
		case 0x10:
//			setbit(OCIE1A, T1_TIMSK);
			writebit(OCIE1A, T1_TIMSK, enable);
     6e4:	44 23       	and	r20, r20
     6e6:	19 f0       	breq	.+6      	; 0x6ee <timer_compareMatchIntSetup+0x6c>
     6e8:	89 b7       	in	r24, 0x39	; 57
     6ea:	80 64       	ori	r24, 0x40	; 64
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <timer_compareMatchIntSetup+0x70>
     6ee:	89 b7       	in	r24, 0x39	; 57
     6f0:	8f 7b       	andi	r24, 0xBF	; 191
     6f2:	89 bf       	out	0x39, r24	; 57
     6f4:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1A, T1_TIFR);
     6f6:	88 b7       	in	r24, 0x38	; 56
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	0b c0       	rjmp	.+22     	; 0x712 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1B)
		case 0x11:
//			setbit(OCIE1B, T1_TIMSK);
			writebit(OCIE1B, T1_TIMSK, enable);
     6fc:	44 23       	and	r20, r20
     6fe:	19 f0       	breq	.+6      	; 0x706 <timer_compareMatchIntSetup+0x84>
     700:	89 b7       	in	r24, 0x39	; 57
     702:	80 62       	ori	r24, 0x20	; 32
     704:	02 c0       	rjmp	.+4      	; 0x70a <timer_compareMatchIntSetup+0x88>
     706:	89 b7       	in	r24, 0x39	; 57
     708:	8f 7d       	andi	r24, 0xDF	; 223
     70a:	89 bf       	out	0x39, r24	; 57
     70c:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1B, T1_TIFR);
     70e:	88 b7       	in	r24, 0x38	; 56
     710:	80 62       	ori	r24, 0x20	; 32
     712:	88 bf       	out	0x38, r24	; 56
			break;
	}
	
	//Don't reenable interrupts here if disabling... just leave them as they were....
	// but do enable for init...
	if(enable)
     714:	44 23       	and	r20, r20
     716:	11 f4       	brne	.+4      	; 0x71c <timer_compareMatchIntSetup+0x9a>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	08 95       	ret
		sei();
     71c:	78 94       	sei
     71e:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     720:	08 95       	ret

00000722 <sineRaw>:
//   rollover/wraparound should work fine... (e.g. Sine(coord_t))
//output is a value between -INT32_MAX and INT32_MAX (representing sin values -1 to 1)
sine_t sineRaw(theta_t theta)
{
//	theta %= 512;
	theta %= SINE_2PI;
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	4b d7       	rcall	.+3734   	; 0x15be <__divmodhi4>

	if(theta < 0)
     728:	97 ff       	sbrs	r25, 7
     72a:	02 c0       	rjmp	.+4      	; 0x730 <sineRaw+0xe>
		theta = SINE_2PI + theta;
     72c:	80 50       	subi	r24, 0x00	; 0
     72e:	9e 4f       	sbci	r25, 0xFE	; 254

//For more accurate realtimeishness, it might be worthwhile to reverse this order...
	
	//in the first quadrant, just take the sine value from the table
	if(theta < SINE_SIZE-1) //128)
     730:	80 38       	cpi	r24, 0x80	; 128
     732:	91 05       	cpc	r25, r1
     734:	44 f4       	brge	.+16     	; 0x746 <sineRaw+0x24>
		return pgm_read_sine(sineTable[theta]);
     736:	fc 01       	movw	r30, r24
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	ea 5d       	subi	r30, 0xDA	; 218
     73e:	ff 4f       	sbci	r31, 0xFF	; 255
     740:	25 91       	lpm	r18, Z+
     742:	34 91       	lpm	r19, Z
     744:	29 c0       	rjmp	.+82     	; 0x798 <sineRaw+0x76>
	//in the second quadrant, mirror theta and subtract the offset
	else if(theta < SINE_SIZE2) //256)
     746:	8f 3f       	cpi	r24, 0xFF	; 255
     748:	91 05       	cpc	r25, r1
     74a:	09 f0       	breq	.+2      	; 0x74e <sineRaw+0x2c>
     74c:	5c f4       	brge	.+22     	; 0x764 <sineRaw+0x42>
		return pgm_read_sine(sineTable[SINE_SIZE2-theta]); //256-theta]);
     74e:	e0 e0       	ldi	r30, 0x00	; 0
     750:	f1 e0       	ldi	r31, 0x01	; 1
     752:	e8 1b       	sub	r30, r24
     754:	f9 0b       	sbc	r31, r25
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	ea 5d       	subi	r30, 0xDA	; 218
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	25 91       	lpm	r18, Z+
     760:	34 91       	lpm	r19, Z
     762:	1a c0       	rjmp	.+52     	; 0x798 <sineRaw+0x76>
	//in the third quadrant, mirror the value and subtract the offset
	else if(theta < SINE_SIZE3) //384)
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	80 38       	cpi	r24, 0x80	; 128
     768:	92 07       	cpc	r25, r18
     76a:	44 f4       	brge	.+16     	; 0x77c <sineRaw+0x5a>
		return -(sine_t)pgm_read_sine(sineTable[theta-SINE_SIZE2]); //256]);
     76c:	fc 01       	movw	r30, r24
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	ea 5d       	subi	r30, 0xDA	; 218
     774:	f1 40       	sbci	r31, 0x01	; 1
     776:	85 91       	lpm	r24, Z+
     778:	94 91       	lpm	r25, Z
     77a:	0a c0       	rjmp	.+20     	; 0x790 <sineRaw+0x6e>
	//in the fourth quadrant, mirror both theta and the value and subtract the offset...
	else
		return -(sine_t)pgm_read_sine(sineTable[SINE_SIZE4-theta]); //512-theta]);
     77c:	e0 e0       	ldi	r30, 0x00	; 0
     77e:	f2 e0       	ldi	r31, 0x02	; 2
     780:	e8 1b       	sub	r30, r24
     782:	f9 0b       	sbc	r31, r25
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	ea 5d       	subi	r30, 0xDA	; 218
     78a:	ff 4f       	sbci	r31, 0xFF	; 255
     78c:	85 91       	lpm	r24, Z+
     78e:	94 91       	lpm	r25, Z
     790:	22 27       	eor	r18, r18
     792:	33 27       	eor	r19, r19
     794:	28 1b       	sub	r18, r24
     796:	39 0b       	sbc	r19, r25
}
     798:	c9 01       	movw	r24, r18
     79a:	08 95       	ret

0000079c <sineRaw8>:


#if ( defined(SINE_RAW8) && SINE_RAW8 )
int8_t sineRaw8(theta_t theta)
{
	theta %= SINE_2PI;
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	72 e0       	ldi	r23, 0x02	; 2
     7a0:	0e d7       	rcall	.+3612   	; 0x15be <__divmodhi4>
     7a2:	9c 01       	movw	r18, r24

	if(theta < 0)
     7a4:	37 ff       	sbrs	r19, 7
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <sineRaw8+0x10>
		theta = SINE_2PI + theta;
     7a8:	20 50       	subi	r18, 0x00	; 0
     7aa:	3e 4f       	sbci	r19, 0xFE	; 254

	if(theta < SINE_SIZE-1)
     7ac:	20 38       	cpi	r18, 0x80	; 128
     7ae:	31 05       	cpc	r19, r1
     7b0:	3c f4       	brge	.+14     	; 0x7c0 <sineRaw8+0x24>
		return pgm_read_sine8(sineTable[theta]);
     7b2:	f9 01       	movw	r30, r18
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	e9 5d       	subi	r30, 0xD9	; 217
     7ba:	ff 4f       	sbci	r31, 0xFF	; 255
     7bc:	84 91       	lpm	r24, Z
     7be:	08 95       	ret
   else if(theta < SINE_SIZE2) //256)
     7c0:	2f 3f       	cpi	r18, 0xFF	; 255
     7c2:	31 05       	cpc	r19, r1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <sineRaw8+0x2c>
     7c6:	54 f4       	brge	.+20     	; 0x7dc <sineRaw8+0x40>
		return pgm_read_sine8(sineTable[SINE_SIZE2-theta]); //256-theta]);
     7c8:	e0 e0       	ldi	r30, 0x00	; 0
     7ca:	f1 e0       	ldi	r31, 0x01	; 1
     7cc:	e2 1b       	sub	r30, r18
     7ce:	f3 0b       	sbc	r31, r19
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e9 5d       	subi	r30, 0xD9	; 217
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	84 91       	lpm	r24, Z
     7da:	08 95       	ret
	else if(theta < SINE_SIZE3) //384)
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	20 38       	cpi	r18, 0x80	; 128
     7e0:	38 07       	cpc	r19, r24
     7e2:	44 f4       	brge	.+16     	; 0x7f4 <sineRaw8+0x58>
		return -(int8_t)pgm_read_sine8(sineTable[theta-SINE_SIZE2]); //256]);
     7e4:	f9 01       	movw	r30, r18
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	e9 5d       	subi	r30, 0xD9	; 217
     7ec:	f1 40       	sbci	r31, 0x01	; 1
     7ee:	84 91       	lpm	r24, Z
     7f0:	81 95       	neg	r24
     7f2:	08 95       	ret
	else
	   return -(int8_t)pgm_read_sine8(sineTable[SINE_SIZE4-theta]); 
     7f4:	e0 e0       	ldi	r30, 0x00	; 0
     7f6:	f2 e0       	ldi	r31, 0x02	; 2
     7f8:	e2 1b       	sub	r30, r18
     7fa:	f3 0b       	sbc	r31, r19
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	e9 5d       	subi	r30, 0xD9	; 217
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	84 91       	lpm	r24, Z
     806:	81 95       	neg	r24

}
     808:	08 95       	ret

0000080a <fb_to_rb>:
   //         |   Blue Value (0-3)
   //         Alpha... only partially implemented

#warning "This isn't at all optimized..."
   // Blue setting = Blue Value | 0x04
   uint8_t blueValue = (fbColor & 0x30) >> 4;
     80a:	68 2f       	mov	r22, r24
     80c:	70 e0       	ldi	r23, 0x00	; 0
   rb = (blueValue << 5) | 0x80;

   // Red setting = redVal << 1 | redVal & 0x01
   uint8_t redValue = (fbColor & 0x03);
   rb |= ((redValue << 1) | (redValue & 0x01)) << 2;
     80e:	83 70       	andi	r24, 0x03	; 3
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	9c 01       	movw	r18, r24
     814:	21 70       	andi	r18, 0x01	; 1
     816:	30 70       	andi	r19, 0x00	; 0
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	28 2b       	or	r18, r24
     81e:	39 2b       	or	r19, r25
     820:	22 0f       	add	r18, r18
     822:	33 1f       	adc	r19, r19
     824:	22 0f       	add	r18, r18
     826:	33 1f       	adc	r19, r19
     828:	20 68       	ori	r18, 0x80	; 128
     82a:	ab 01       	movw	r20, r22
     82c:	40 73       	andi	r20, 0x30	; 48
     82e:	50 70       	andi	r21, 0x00	; 0
     830:	44 0f       	add	r20, r20
     832:	55 1f       	adc	r21, r21
     834:	24 2b       	or	r18, r20
     836:	cb 01       	movw	r24, r22
     838:	8c 70       	andi	r24, 0x0C	; 12
     83a:	90 70       	andi	r25, 0x00	; 0
     83c:	95 95       	asr	r25
     83e:	87 95       	ror	r24
     840:	95 95       	asr	r25
     842:	87 95       	ror	r24
   // Green Setting = Green Value...
   uint8_t greenValue = (fbColor & 0x0C) >> 2;
   rb |= greenValue;

   return rb;
}
     844:	82 2b       	or	r24, r18
     846:	08 95       	ret

00000848 <getTetBrick>:

//returns a 3-bit value
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
     848:	e8 2f       	mov	r30, r24
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	e0 58       	subi	r30, 0x80	; 128
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	86 2f       	mov	r24, r22
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	63 e0       	ldi	r22, 0x03	; 3
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	9c d6       	rcall	.+3384   	; 0x159a <__mulhi3>
     862:	20 81       	ld	r18, Z
     864:	31 81       	ldd	r19, Z+1	; 0x01
     866:	42 81       	ldd	r20, Z+2	; 0x02
     868:	53 81       	ldd	r21, Z+3	; 0x03
     86a:	04 c0       	rjmp	.+8      	; 0x874 <getTetBrick+0x2c>
     86c:	56 95       	lsr	r21
     86e:	47 95       	ror	r20
     870:	37 95       	ror	r19
     872:	27 95       	ror	r18
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <getTetBrick+0x24>
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';

}
     878:	82 2f       	mov	r24, r18
     87a:	87 70       	andi	r24, 0x07	; 7
     87c:	08 95       	ret

0000087e <setTetBrick>:

//val should only be 0-7
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
void setTetBrick(uint8_t row, uint8_t col, uint8_t val)
{
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
	//Clear the old value...
	tetRow[row] &= ~(((uint32_t)'\007')<<(3*col));
     882:	e8 2f       	mov	r30, r24
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	86 2f       	mov	r24, r22
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	63 e0       	ldi	r22, 0x03	; 3
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	85 d6       	rcall	.+3338   	; 0x159a <__mulhi3>
     890:	a8 2f       	mov	r26, r24
	//Write the new value...
	tetRow[row] |= (((uint32_t)val)<<(3*col));
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	e0 58       	subi	r30, 0x80	; 128
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	67 e0       	ldi	r22, 0x07	; 7
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0a 2e       	mov	r0, r26
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <setTetBrick+0x34>
     8aa:	66 0f       	add	r22, r22
     8ac:	77 1f       	adc	r23, r23
     8ae:	88 1f       	adc	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	0a 94       	dec	r0
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <setTetBrick+0x2c>
     8b6:	60 95       	com	r22
     8b8:	70 95       	com	r23
     8ba:	80 95       	com	r24
     8bc:	90 95       	com	r25
     8be:	00 81       	ld	r16, Z
     8c0:	11 81       	ldd	r17, Z+1	; 0x01
     8c2:	22 81       	ldd	r18, Z+2	; 0x02
     8c4:	33 81       	ldd	r19, Z+3	; 0x03
     8c6:	60 23       	and	r22, r16
     8c8:	71 23       	and	r23, r17
     8ca:	82 23       	and	r24, r18
     8cc:	93 23       	and	r25, r19
     8ce:	24 2f       	mov	r18, r20
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <setTetBrick+0x62>
     8d8:	22 0f       	add	r18, r18
     8da:	33 1f       	adc	r19, r19
     8dc:	44 1f       	adc	r20, r20
     8de:	55 1f       	adc	r21, r21
     8e0:	aa 95       	dec	r26
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <setTetBrick+0x5a>
     8e4:	62 2b       	or	r22, r18
     8e6:	73 2b       	or	r23, r19
     8e8:	84 2b       	or	r24, r20
     8ea:	95 2b       	or	r25, r21
     8ec:	60 83       	st	Z, r22
     8ee:	71 83       	std	Z+1, r23	; 0x01
     8f0:	82 83       	std	Z+2, r24	; 0x02
     8f2:	93 83       	std	Z+3, r25	; 0x03
}
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <tetInit>:
//For now, let's just test that it works...
// (This could be implemented with bitfields?)
uint32_t tetRow[TET_HEIGHT];

void tetInit(uint8_t filledRows)
{
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	e0 e8       	ldi	r30, 0x80	; 128
     900:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
     902:	11 92       	st	Z+, r1
     904:	11 92       	st	Z+, r1
     906:	11 92       	st	Z+, r1
     908:	11 92       	st	Z+, r1
void tetInit(uint8_t filledRows)
{
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	e8 3c       	cpi	r30, 0xC8	; 200
     90e:	f9 07       	cpc	r31, r25
     910:	c1 f7       	brne	.-16     	; 0x902 <tetInit+0x8>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     912:	12 e1       	ldi	r17, 0x12	; 18
     914:	18 1b       	sub	r17, r24
     916:	0b c0       	rjmp	.+22     	; 0x92e <tetInit+0x34>
     918:	00 e0       	ldi	r16, 0x00	; 0
		for(col=0; col<TET_WIDTH; col++)
			setTetBrick(row, col, (row+col)&0x07);
     91a:	40 2f       	mov	r20, r16
     91c:	41 0f       	add	r20, r17
     91e:	47 70       	andi	r20, 0x07	; 7
     920:	81 2f       	mov	r24, r17
     922:	60 2f       	mov	r22, r16
     924:	ac df       	rcall	.-168    	; 0x87e <setTetBrick>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
		for(col=0; col<TET_WIDTH; col++)
     926:	0f 5f       	subi	r16, 0xFF	; 255
     928:	0a 30       	cpi	r16, 0x0A	; 10
     92a:	b9 f7       	brne	.-18     	; 0x91a <tetInit+0x20>
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     92c:	1f 5f       	subi	r17, 0xFF	; 255
     92e:	12 31       	cpi	r17, 0x12	; 18
     930:	98 f3       	brcs	.-26     	; 0x918 <tetInit+0x1e>

		row+=4;

	}
#endif
}
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <tetUpdate>:


}

void tetUpdate(void)
{
     938:	2f 92       	push	r2
     93a:	3f 92       	push	r3
     93c:	4f 92       	push	r4
     93e:	5f 92       	push	r5
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	df 93       	push	r29
     95a:	cf 93       	push	r28
     95c:	00 d0       	rcall	.+0      	; 0x95e <tetUpdate+0x26>
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
	uint8_t pieceCol;

	uint8_t noChange = FALSE;
	uint8_t settle = FALSE;

	if(newPieceHitCount == 5)
     962:	80 91 7e 00 	lds	r24, 0x007E
     966:	85 30       	cpi	r24, 0x05	; 5
     968:	21 f4       	brne	.+8      	; 0x972 <tetUpdate+0x3a>
	{
		newPieceHitCount = 0;
     96a:	10 92 7e 00 	sts	0x007E, r1
		tetInit(0);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	c4 df       	rcall	.-120    	; 0x8fa <tetInit>
	}

	new_pieceOrientation = pieceOrientation;
     972:	30 90 6f 00 	lds	r3, 0x006F
	new_pieceLeftCol = pieceLeftCol;
     976:	40 91 71 00 	lds	r20, 0x0071
	new_pieceTopRow = pieceTopRow;
     97a:	20 90 70 00 	lds	r2, 0x0070

	if(callCount%4 == 2)
     97e:	50 91 7f 00 	lds	r21, 0x007F
     982:	85 2f       	mov	r24, r21
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	83 70       	andi	r24, 0x03	; 3
     988:	90 70       	andi	r25, 0x00	; 0
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	91 05       	cpc	r25, r1
     98e:	31 f4       	brne	.+12     	; 0x99c <tetUpdate+0x64>
   {
		new_pieceOrientation=pieceOrientation+1;
     990:	23 2d       	mov	r18, r3
     992:	2f 5f       	subi	r18, 0xFF	; 255
      if (new_pieceOrientation==4)
     994:	24 30       	cpi	r18, 0x04	; 4
     996:	09 f0       	breq	.+2      	; 0x99a <tetUpdate+0x62>
     998:	e0 c0       	rjmp	.+448    	; 0xb5a <tetUpdate+0x222>
     99a:	de c0       	rjmp	.+444    	; 0xb58 <tetUpdate+0x220>
			new_pieceOrientation=0;
	}

      if(callCount%4==0)
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	19 f4       	brne	.+6      	; 0x9a6 <tetUpdate+0x6e>
      {  
         new_pieceLeftCol=pieceLeftCol+1;
     9a0:	34 2f       	mov	r19, r20
     9a2:	3f 5f       	subi	r19, 0xFF	; 255
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <tetUpdate+0x78>
		}

		if(callCount%4==3)
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	91 05       	cpc	r25, r1
     9aa:	09 f4       	brne	.+2      	; 0x9ae <tetUpdate+0x76>
		{
			new_pieceTopRow=pieceTopRow+1;
     9ac:	23 94       	inc	r2
     9ae:	34 2f       	mov	r19, r20
     9b0:	23 2d       	mov	r18, r3
      }

	callCount++;
     9b2:	5f 5f       	subi	r21, 0xFF	; 255
     9b4:	50 93 7f 00 	sts	0x007F, r21
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     9b8:	80 91 6e 00 	lds	r24, 0x006E
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	82 0f       	add	r24, r18
     9c8:	91 1d       	adc	r25, r1
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	84 5b       	subi	r24, 0xB4	; 180
     9d0:	9b 4f       	sbci	r25, 0xFB	; 251
     9d2:	12 2d       	mov	r17, r2
     9d4:	1d 5f       	subi	r17, 0xFD	; 253
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b3 e0       	ldi	r27, 0x03	; 3
     9da:	fc 01       	movw	r30, r24
     9dc:	c5 90       	lpm	r12, Z+
     9de:	d4 90       	lpm	r13, Z
     9e0:	36 c0       	rjmp	.+108    	; 0xa4e <tetUpdate+0x116>
			uint8_t boardCol = new_pieceLeftCol + pieceCol;

			uint8_t boardBrick = getTetBrick(boardRow, boardCol);


			if(pieceBrick)
     9e2:	cf 01       	movw	r24, r30
     9e4:	8e 0d       	add	r24, r14
     9e6:	9f 1d       	adc	r25, r15
     9e8:	26 01       	movw	r4, r12
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <tetUpdate+0xb8>
     9ec:	56 94       	lsr	r5
     9ee:	47 94       	ror	r4
     9f0:	8a 95       	dec	r24
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <tetUpdate+0xb4>
     9f4:	40 fe       	sbrs	r4, 0
     9f6:	1a c0       	rjmp	.+52     	; 0xa2c <tetUpdate+0xf4>
			{
				if(boardRow >= TET_HEIGHT)
     9f8:	12 31       	cpi	r17, 0x12	; 18
     9fa:	f8 f4       	brcc	.+62     	; 0xa3a <tetUpdate+0x102>
					break;
				}

				//There's some plausibility for some oddities here...
				// revisit 41-15.zip
				if(boardCol >= TET_WIDTH)
     9fc:	0a 30       	cpi	r16, 0x0A	; 10
     9fe:	f8 f4       	brcc	.+62     	; 0xa3e <tetUpdate+0x106>
				   noChange = TRUE;
				   break;
				}


				if(boardBrick)
     a00:	80 2f       	mov	r24, r16
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	63 e0       	ldi	r22, 0x03	; 3
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	c8 d5       	rcall	.+2960   	; 0x159a <__mulhi3>
     a0a:	24 01       	movw	r4, r8
     a0c:	35 01       	movw	r6, r10
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <tetUpdate+0xe0>
     a10:	76 94       	lsr	r7
     a12:	67 94       	ror	r6
     a14:	57 94       	ror	r5
     a16:	47 94       	ror	r4
     a18:	8a 95       	dec	r24
     a1a:	d2 f7       	brpl	.-12     	; 0xa10 <tetUpdate+0xd8>
     a1c:	84 2d       	mov	r24, r4
     a1e:	87 70       	andi	r24, 0x07	; 7
     a20:	29 f0       	breq	.+10     	; 0xa2c <tetUpdate+0xf4>
				{
					//Must be a settle...
					if((new_pieceOrientation == pieceOrientation) &&
     a22:	23 15       	cp	r18, r3
     a24:	61 f4       	brne	.+24     	; 0xa3e <tetUpdate+0x106>
     a26:	34 17       	cp	r19, r20
     a28:	51 f4       	brne	.+20     	; 0xa3e <tetUpdate+0x106>
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <tetUpdate+0x102>
     a2c:	31 96       	adiw	r30, 0x01	; 1
     a2e:	0f 5f       	subi	r16, 0xFF	; 255


	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
     a30:	e4 30       	cpi	r30, 0x04	; 4
     a32:	f1 05       	cpc	r31, r1
     a34:	b1 f6       	brne	.-84     	; 0x9e2 <tetUpdate+0xaa>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <tetUpdate+0x10a>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <tetUpdate+0x108>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	a1 e0       	ldi	r26, 0x01	; 1



	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
     a42:	b1 50       	subi	r27, 0x01	; 1
     a44:	11 50       	subi	r17, 0x01	; 1
     a46:	bf 3f       	cpi	r27, 0xFF	; 255
     a48:	d9 f0       	breq	.+54     	; 0xa80 <tetUpdate+0x148>
     a4a:	88 23       	and	r24, r24
     a4c:	c9 f4       	brne	.+50     	; 0xa80 <tetUpdate+0x148>
     a4e:	aa 23       	and	r26, r26
     a50:	09 f0       	breq	.+2      	; 0xa54 <tetUpdate+0x11c>
     a52:	85 c0       	rjmp	.+266    	; 0xb5e <tetUpdate+0x226>
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     a54:	eb 2e       	mov	r14, r27
     a56:	ff 24       	eor	r15, r15
     a58:	ee 0c       	add	r14, r14
     a5a:	ff 1c       	adc	r15, r15
     a5c:	ee 0c       	add	r14, r14
     a5e:	ff 1c       	adc	r15, r15
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';
     a60:	e1 2f       	mov	r30, r17
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	e0 58       	subi	r30, 0x80	; 128
     a6e:	ff 4f       	sbci	r31, 0xFF	; 255
     a70:	80 80       	ld	r8, Z
     a72:	91 80       	ldd	r9, Z+1	; 0x01
     a74:	a2 80       	ldd	r10, Z+2	; 0x02
     a76:	b3 80       	ldd	r11, Z+3	; 0x03
     a78:	03 2f       	mov	r16, r19
     a7a:	e0 e0       	ldi	r30, 0x00	; 0
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	b1 cf       	rjmp	.-158    	; 0x9e2 <tetUpdate+0xaa>





	if(!noChange)
     a80:	aa 23       	and	r26, r26
     a82:	31 f4       	brne	.+12     	; 0xa90 <tetUpdate+0x158>
	{
		pieceOrientation = new_pieceOrientation;
     a84:	20 93 6f 00 	sts	0x006F, r18
		pieceLeftCol = new_pieceLeftCol;
     a88:	30 93 71 00 	sts	0x0071, r19
		pieceTopRow = new_pieceTopRow;
     a8c:	20 92 70 00 	sts	0x0070, r2
	}

	if(settle)
     a90:	88 23       	and	r24, r24
     a92:	09 f4       	brne	.+2      	; 0xa96 <tetUpdate+0x15e>
     a94:	64 c0       	rjmp	.+200    	; 0xb5e <tetUpdate+0x226>
	{
		// Check if we've hit on a new piece...
		if((pieceTopRow == PIECE_STARTROW) &&
     a96:	80 91 70 00 	lds	r24, 0x0070
     a9a:	88 23       	and	r24, r24
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <tetUpdate+0x168>
     a9e:	45 c0       	rjmp	.+138    	; 0xb2a <tetUpdate+0x1f2>
     aa0:	80 91 71 00 	lds	r24, 0x0071
     aa4:	83 30       	cpi	r24, 0x03	; 3
     aa6:	09 f0       	breq	.+2      	; 0xaaa <tetUpdate+0x172>
     aa8:	40 c0       	rjmp	.+128    	; 0xb2a <tetUpdate+0x1f2>
     aaa:	80 91 6f 00 	lds	r24, 0x006F
     aae:	88 23       	and	r24, r24
     ab0:	09 f0       	breq	.+2      	; 0xab4 <tetUpdate+0x17c>
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <tetUpdate+0x1f2>
		   (pieceLeftCol == PIECE_STARTCOL) &&
		   (pieceOrientation == 0))
		   newPieceHitCount++;
     ab4:	80 91 7e 00 	lds	r24, 0x007E
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	80 93 7e 00 	sts	0x007E, r24
     abe:	35 c0       	rjmp	.+106    	; 0xb2a <tetUpdate+0x1f2>

		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
			{
				if(getTetPieceBrick(pieceNum, pieceOrientation,
     ac0:	40 91 6e 00 	lds	r20, 0x006E
     ac4:	e4 2f       	mov	r30, r20
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	80 91 6f 00 	lds	r24, 0x006F
     ad4:	e8 0f       	add	r30, r24
     ad6:	f1 1d       	adc	r31, r1
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	e4 5b       	subi	r30, 0xB4	; 180
     ade:	fb 4f       	sbci	r31, 0xFB	; 251
     ae0:	85 91       	lpm	r24, Z+
     ae2:	94 91       	lpm	r25, Z
     ae4:	b7 01       	movw	r22, r14
     ae6:	62 0f       	add	r22, r18
     ae8:	73 1f       	adc	r23, r19
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <tetUpdate+0x1b8>
     aec:	96 95       	lsr	r25
     aee:	87 95       	ror	r24
     af0:	6a 95       	dec	r22
     af2:	e2 f7       	brpl	.-8      	; 0xaec <tetUpdate+0x1b4>
     af4:	80 ff       	sbrs	r24, 0
     af6:	0c c0       	rjmp	.+24     	; 0xb10 <tetUpdate+0x1d8>
										  pieceRow, pieceCol))
				setTetBrick(pieceTopRow+pieceRow,
     af8:	80 91 70 00 	lds	r24, 0x0070
     afc:	60 91 71 00 	lds	r22, 0x0071
     b00:	6e 0d       	add	r22, r14
     b02:	4f 5f       	subi	r20, 0xFF	; 255
     b04:	81 0f       	add	r24, r17
     b06:	29 83       	std	Y+1, r18	; 0x01
     b08:	3a 83       	std	Y+2, r19	; 0x02
     b0a:	b9 de       	rcall	.-654    	; 0x87e <setTetBrick>
     b0c:	3a 81       	ldd	r19, Y+2	; 0x02
     b0e:	29 81       	ldd	r18, Y+1	; 0x01
     b10:	08 94       	sec
     b12:	e1 1c       	adc	r14, r1
     b14:	f1 1c       	adc	r15, r1
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
     b16:	64 e0       	ldi	r22, 0x04	; 4
     b18:	e6 16       	cp	r14, r22
     b1a:	f1 04       	cpc	r15, r1
     b1c:	89 f6       	brne	.-94     	; 0xac0 <tetUpdate+0x188>
		   (pieceOrientation == 0))
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
     b1e:	1f 5f       	subi	r17, 0xFF	; 255
     b20:	2c 5f       	subi	r18, 0xFC	; 252
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	14 30       	cpi	r17, 0x04	; 4
     b26:	21 f4       	brne	.+8      	; 0xb30 <tetUpdate+0x1f8>
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <tetUpdate+0x1fe>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	ee 24       	eor	r14, r14
     b32:	ff 24       	eor	r15, r15
     b34:	c5 cf       	rjmp	.-118    	; 0xac0 <tetUpdate+0x188>
								pieceNum+1);
			}


		//Load a new piece...
		pieceNum++;
     b36:	80 91 6e 00 	lds	r24, 0x006E
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
     b3c:	80 93 6e 00 	sts	0x006E, r24
		if(pieceNum==NUM_PIECES)
     b40:	87 30       	cpi	r24, 0x07	; 7
     b42:	11 f4       	brne	.+4      	; 0xb48 <tetUpdate+0x210>
			pieceNum = 0;
     b44:	10 92 6e 00 	sts	0x006E, r1
		pieceLeftCol = PIECE_STARTCOL;
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	80 93 71 00 	sts	0x0071, r24
		pieceTopRow = PIECE_STARTROW;
     b4e:	10 92 70 00 	sts	0x0070, r1
		pieceOrientation = 0;
     b52:	10 92 6f 00 	sts	0x006F, r1
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <tetUpdate+0x226>
	}

}
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	34 2f       	mov	r19, r20
     b5c:	2a cf       	rjmp	.-428    	; 0x9b2 <tetUpdate+0x7a>
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	7f 90       	pop	r7
     b7c:	6f 90       	pop	r6
     b7e:	5f 90       	pop	r5
     b80:	4f 90       	pop	r4
     b82:	3f 90       	pop	r3
     b84:	2f 90       	pop	r2
     b86:	08 95       	ret

00000b88 <tetBrick_to_fb>:

uint8_t tetColorScheme = 0;

uint8_t tetBrick_to_fb(uint8_t tetBrick)
{
	if(!tetBrick)
     b88:	88 23       	and	r24, r24
     b8a:	a9 f0       	breq	.+42     	; 0xbb6 <tetBrick_to_fb+0x2e>
		return 0;

	switch(tetColorScheme)
     b8c:	90 91 72 00 	lds	r25, 0x0072
     b90:	81 50       	subi	r24, 0x01	; 1
     b92:	92 30       	cpi	r25, 0x02	; 2
     b94:	38 f4       	brcc	.+14     	; 0xba4 <tetBrick_to_fb+0x1c>
	}

}

#include "rowSegBuffer.c"
     b96:	87 30       	cpi	r24, 0x07	; 7
     b98:	68 f4       	brcc	.+26     	; 0xbb4 <tetBrick_to_fb+0x2c>
     b9a:	e8 2f       	mov	r30, r24
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	e0 5a       	subi	r30, 0xA0	; 160
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <tetBrick_to_fb+0x28>
     ba4:	87 30       	cpi	r24, 0x07	; 7
     ba6:	30 f4       	brcc	.+12     	; 0xbb4 <tetBrick_to_fb+0x2c>
     ba8:	e8 2f       	mov	r30, r24
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	e9 59       	subi	r30, 0x99	; 153
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	80 81       	ld	r24, Z
     bb2:	08 95       	ret
     bb4:	8f e3       	ldi	r24, 0x3F	; 63
			}
//		default:
//			return 0;
	}

}
     bb6:	08 95       	ret

00000bb8 <pll_enable>:
   // this is 64MHz/512=125kHz
   // The benefit of such high PWM frequency is the low RC values necessary
   //  for filtering to DC.
   // "To change Timer/Counter1 to the async mode follow this procedure"
   // 1: Enable the PLL
   setbit(PLLE, PLLCSR);
     bb8:	89 b5       	in	r24, 0x29	; 41
     bba:	82 60       	ori	r24, 0x02	; 2
     bbc:	89 bd       	out	0x29, r24	; 41
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bbe:	80 e9       	ldi	r24, 0x90	; 144
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <pll_enable+0xa>
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <pll_enable+0x12>
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
   {
      asm("nop");
     bc8:	00 00       	nop
   // 2: Wait 100us for the PLL to stabilize
   // (can't use dmsWait since the timer updating the dmsCount hasn't yet been started!)
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
     bca:	09 b4       	in	r0, 0x29	; 41
     bcc:	00 fe       	sbrs	r0, 0
     bce:	fc cf       	rjmp	.-8      	; 0xbc8 <pll_enable+0x10>
   {
      asm("nop");
   }
   // 4: Set the PCKE bit to enable async mode
   setbit(PCKE, PLLCSR);
     bd0:	89 b5       	in	r24, 0x29	; 41
     bd2:	84 60       	ori	r24, 0x04	; 4
     bd4:	89 bd       	out	0x29, r24	; 41

}
     bd6:	08 95       	ret

00000bd8 <lvds_timerInit>:
   //Timer1 is used for LVDS (in PLL clocking mode)
  
     //pll_enable();   
   
   //We want it to count 7 bits, 0-6 and reset at 7
   OCR1C = 6;
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	8b bd       	out	0x2b, r24	; 43

   //We want the clock to go low at TCNT=0 and high at TCNT=4
   CLOCK_OCR = 3; //2; //3;
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	8c bd       	out	0x2c, r24	; 44
   //PLL is 4MHz*8 = 32MHz
   // then TimerClockDivisor=8 gives 4MHz
   pll_enable();
   #define SLOW_LVDS_TEST TRUE
#elif (defined(OSCCAL_VAL))
   OSCCAL = OSCCAL_VAL;
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	81 bf       	out	0x31, r24	; 49
   //  (horizontally... pre LVDS_PRESCALER affecting DOTS_TO_CYC)
   //  so accessing *all* pixels in a row would make it even slower...
   // Further, it didn't seem to be paying attention to the fact that
   // the same pixels are drawn on multiple rows...
   // WTF? (the image was scaled, proportionately! 1pix x 1pix)
   pll_enable();
     be4:	e9 df       	rcall	.-46     	; 0xbb8 <pll_enable>
   pll_enable();
   //#warning "The PLL configuration code is not in here yet!"
#endif

   //Set the Timer1 clock prescaler...
   writeMasked(CSBITS, 
     be6:	8f b5       	in	r24, 0x2f	; 47
     be8:	80 7f       	andi	r24, 0xF0	; 240
     bea:	83 60       	ori	r24, 0x03	; 3
     bec:	8f bd       	out	0x2f, r24	; 47
               TCCR1B);

   //Set the DeadTime prescaler (no prescaling, same speed as TCNT1)...
   // Allegedly this is prescaled from the PCK (or CK)
   //    NOT from the Timer1 prescaler...
   writeMasked(DTPSBITS,
     bee:	8f b5       	in	r24, 0x2f	; 47
     bf0:	8f 7c       	andi	r24, 0xCF	; 207
     bf2:	80 62       	ori	r24, 0x20	; 32
     bf4:	8f bd       	out	0x2f, r24	; 47
 
   //FastPWM
//Now Handled in lvds_xxxOnCompare():

   //These are also written below (excluding PWM1D)
   setbit(PWM1A, TCCR1A);  //Enable PWM on OC1A for DVH
     bf6:	80 b7       	in	r24, 0x30	; 48
     bf8:	82 60       	ori	r24, 0x02	; 2
     bfa:	80 bf       	out	0x30, r24	; 48
                           //Need to do the same for other channels
  
   setbit(PWM1B, TCCR1A);  //Enable PWM on OC1B for CLOCK 
     bfc:	80 b7       	in	r24, 0x30	; 48
     bfe:	81 60       	ori	r24, 0x01	; 1
     c00:	80 bf       	out	0x30, r24	; 48

   setbit(PWM1D, TCCR1C);
     c02:	87 b5       	in	r24, 0x27	; 39
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	87 bd       	out	0x27, r24	; 39

   //PWM1D is not in TCCR1A...

   setoutPORT(PB1, PORTB);   //+OC1A, DVH/BLUE, MISO (usually heart)
     c08:	b9 9a       	sbi	0x17, 1	; 23
//   setoutPORT(PB0, PORTB);   //-OC1A    MOSI unused
   setoutPORT(PB2, PORTB); //-OC1B, -GREEN    (INVERTED) SCK
     c0a:	ba 9a       	sbi	0x17, 2	; 23
   setoutPORT(PB3, PORTB); //+OC1B Clock (OC1B, not inverted)
     c0c:	bb 9a       	sbi	0x17, 3	; 23
   setoutPORT(PB5, PORTB); //+OC1D, RED
     c0e:	bd 9a       	sbi	0x17, 5	; 23


   writeMasked(((0<<WGM11) | (0<<WGM10)), //FastPWM (combined with above)
     c10:	86 b5       	in	r24, 0x26	; 38
     c12:	8c 7f       	andi	r24, 0xFC	; 252
     c14:	86 bd       	out	0x26, r24	; 38
//            | (0<<COM1B1) | (1<<COM1B0) 
//            | (1<<PWM1A) | (1<<PWM1B) )
//#define lvds_ComplementaryClrOnCompare() \ //
   //Do TCCR1C first, because it contains shadow-bits of TCCR1A that I
   // don't want to have to rewrite...
   TCCR1C = ( (1<<COM1D1) | (0<<COM1D0)
     c16:	89 e0       	ldi	r24, 0x09	; 9
     c18:	87 bd       	out	0x27, r24	; 39
            | (1<<PWM1D) );

   TCCR1A = ( (0<<COM1A1) | (1<<COM1A0) 
     c1a:	83 e6       	ldi	r24, 0x63	; 99
     c1c:	80 bf       	out	0x30, r24	; 48
   // PWM inversion must be enabled:

   //inverted with PWM1X
//   setbit(PWM1X, TCCR1B);
 
    Nada_init();
     c1e:	80 e3       	ldi	r24, 0x30	; 48
     c20:	84 bd       	out	0x24, r24	; 36
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	8d bd       	out	0x2d, r24	; 45
}
     c26:	08 95       	ret

00000c28 <lcd_Init>:
//   (the fewer changes, the less likely we'll glitch...?)


void lcd_Init(void)
{
 	Nada_init();
     c28:	80 e3       	ldi	r24, 0x30	; 48
     c2a:	84 bd       	out	0x24, r24	; 36
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	8d bd       	out	0x2d, r24	; 45
}
     c30:	08 95       	ret

00000c32 <segClear>:
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     c32:	10 92 77 00 	sts	0x0077, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     c36:	86 e0       	ldi	r24, 0x06	; 6
     c38:	80 93 c8 00 	sts	0x00C8, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     c3c:	83 e6       	ldi	r24, 0x63	; 99
     c3e:	80 93 c9 00 	sts	0x00C9, r24
}
     c42:	08 95       	ret

00000c44 <segTerminate>:
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     c44:	80 91 77 00 	lds	r24, 0x0077
     c48:	8f 35       	cpi	r24, 0x5F	; 95
     c4a:	f8 f4       	brcc	.+62     	; 0xc8a <segTerminate+0x46>
     c4c:	e8 2f       	mov	r30, r24
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	e8 53       	subi	r30, 0x38	; 56
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	90 81       	ld	r25, Z
     c5a:	98 7f       	andi	r25, 0xF8	; 248
     c5c:	f1 f0       	breq	.+60     	; 0xc9a <segTerminate+0x56>
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	80 93 77 00 	sts	0x0077, r24

		rowSegBuffer[segPosition].red_length 
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
     c64:	a8 2f       	mov	r26, r24
     c66:	b0 e0       	ldi	r27, 0x00	; 0
	if((segPosition < NUM_SEGMENTS-1) 
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;

		rowSegBuffer[segPosition].red_length 
     c68:	fd 01       	movw	r30, r26
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	e8 53       	subi	r30, 0x38	; 56
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	aa 0f       	add	r26, r26
     c74:	bb 1f       	adc	r27, r27
     c76:	aa 53       	subi	r26, 0x3A	; 58
     c78:	bf 4f       	sbci	r27, 0xFF	; 255
     c7a:	8c 91       	ld	r24, X
     c7c:	87 70       	andi	r24, 0x07	; 7
     c7e:	80 83       	st	Z, r24
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
		rowSegBuffer[segPosition].green_blue
     c80:	11 96       	adiw	r26, 0x01	; 1
     c82:	8c 91       	ld	r24, X
     c84:	11 97       	sbiw	r26, 0x01	; 1
     c86:	81 83       	std	Z+1, r24	; 0x01
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     c88:	08 95       	ret
		rowSegBuffer[segPosition].green_blue
			= rowSegBuffer[segPosition-1].green_blue;
	}
	//We're already at the last segment, so we have to nullify it
	//This might terminate the last pixel early, but is necessary.
	else if(segPosition == NUM_SEGMENTS-1)
     c8a:	8f 35       	cpi	r24, 0x5F	; 95
     c8c:	31 f4       	brne	.+12     	; 0xc9a <segTerminate+0x56>
	{
		//Apparently white doesn't cause sync problems... so load it white
		rowSegBuffer[segPosition].red_length = fbRed_to_seg(_W);
     c8e:	87 e0       	ldi	r24, 0x07	; 7
     c90:	80 93 86 01 	sts	0x0186, r24
		rowSegBuffer[segPosition].green_blue = 
     c94:	83 e7       	ldi	r24, 0x73	; 115
     c96:	80 93 87 01 	sts	0x0187, r24
     c9a:	08 95       	ret

00000c9c <newSeg>:
// Returns TRUE if it had to be truncated
//  (out of segment memory, past the display edge...)
// length is the real length, not shifted for storage...
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{
     c9c:	20 91 77 00 	lds	r18, 0x0077
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     ca0:	56 2f       	mov	r21, r22
     ca2:	58 6f       	ori	r21, 0xF8	; 248
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     ca4:	15 c0       	rjmp	.+42     	; 0xcd0 <newSeg+0x34>
	{
		// No more segments available...	
		// The last segment must have a length of 0
		if(segPosition == NUM_SEGMENTS-1)
     ca6:	2f 35       	cpi	r18, 0x5F	; 95
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <newSeg+0x14>
     caa:	20 93 77 00 	sts	0x0077, r18
     cae:	1b c0       	rjmp	.+54     	; 0xce6 <newSeg+0x4a>
	
		//Check if the segment buffer is cleared...
		// then DON'T increment segPosition...
		//if(!((segPosition == 0) && 
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     cb0:	22 23       	and	r18, r18
     cb2:	21 f4       	brne	.+8      	; 0xcbc <newSeg+0x20>
     cb4:	30 91 c8 00 	lds	r19, 0x00C8
     cb8:	38 7f       	andi	r19, 0xF8	; 248
     cba:	09 f0       	breq	.+2      	; 0xcbe <newSeg+0x22>
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;
     cbc:	2f 5f       	subi	r18, 0xFF	; 255


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     cbe:	e2 2f       	mov	r30, r18
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e8 53       	subi	r30, 0x38	; 56
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	50 83       	st	Z, r21
			red | (SEG_MAXLENGTH<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     ccc:	41 83       	std	Z+1, r20	; 0x01

		length -= SEG_MAXLENGTH;
     cce:	4f 97       	sbiw	r24, 0x1f	; 31
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     cd0:	8f 31       	cpi	r24, 0x1F	; 31
     cd2:	91 05       	cpc	r25, r1
     cd4:	40 f7       	brcc	.-48     	; 0xca6 <newSeg+0xa>
     cd6:	20 93 77 00 	sts	0x0077, r18

	}

	//We can fit whatever's left (or the whole thing) into a single segment
	// Unless, of course, there's nothing left...
	if(length > 0) //< SEG_MAXLENGTH)//Guaranteed now...
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	11 f4       	brne	.+4      	; 0xce2 <newSeg+0x46>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	08 95       	ret
	{
		//Make sure there's another segment to write to!
		if(segPosition == NUM_SEGMENTS-1)
     ce2:	2f 35       	cpi	r18, 0x5F	; 95
     ce4:	19 f4       	brne	.+6      	; 0xcec <newSeg+0x50>
		{
			segTerminate();
     ce6:	ae df       	rcall	.-164    	; 0xc44 <segTerminate>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
     cea:	08 95       	ret
		}

		//if(!((segPosition == 0) &&
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     cec:	22 23       	and	r18, r18
     cee:	21 f4       	brne	.+8      	; 0xcf8 <newSeg+0x5c>
     cf0:	30 91 c8 00 	lds	r19, 0x00C8
     cf4:	38 7f       	andi	r19, 0xF8	; 248
     cf6:	19 f0       	breq	.+6      	; 0xcfe <newSeg+0x62>
	     ((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
  				segPosition++;
     cf8:	2f 5f       	subi	r18, 0xFF	; 255
     cfa:	20 93 77 00 	sts	0x0077, r18


		rowSegBuffer[segPosition].red_length = 
     cfe:	e0 91 77 00 	lds	r30, 0x0077
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e8 53       	subi	r30, 0x38	; 56
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	88 0f       	add	r24, r24
     d0e:	88 0f       	add	r24, r24
     d10:	88 0f       	add	r24, r24
     d12:	86 2b       	or	r24, r22
     d14:	80 83       	st	Z, r24
			red | (length<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     d16:	41 83       	std	Z+1, r20	; 0x01
     d18:	80 e0       	ldi	r24, 0x00	; 0
	}

	return FALSE;

}
     d1a:	08 95       	ret

00000d1c <stretchSeg>:
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     d1c:	e0 91 77 00 	lds	r30, 0x0077
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	df 01       	movw	r26, r30
     d24:	aa 0f       	add	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	a8 53       	subi	r26, 0x38	; 56
     d2a:	bf 4f       	sbci	r27, 0xFF	; 255
     d2c:	2c 91       	ld	r18, X

		if(!additionalLength)
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	11 f1       	breq	.+68     	; 0xd76 <stretchSeg+0x5a>
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     d32:	42 2f       	mov	r20, r18
     d34:	46 95       	lsr	r20
     d36:	46 95       	lsr	r20
     d38:	46 95       	lsr	r20

		if(!additionalLength)
			return FALSE;

		//We can stretch the current segment
		if(oldLength < SEG_MAXLENGTH)
     d3a:	4f 31       	cpi	r20, 0x1F	; 31
     d3c:	98 f4       	brcc	.+38     	; 0xd64 <stretchSeg+0x48>
		{
			uint8_t maxStretch = SEG_MAXLENGTH - oldLength;

			// Will the entire addition fit in the previous segment?
			if(additionalLength <= maxStretch)
     d3e:	3f e1       	ldi	r19, 0x1F	; 31
     d40:	34 1b       	sub	r19, r20
     d42:	43 2f       	mov	r20, r19
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	48 17       	cp	r20, r24
     d48:	59 07       	cpc	r21, r25
     d4a:	38 f0       	brcs	.+14     	; 0xd5a <stretchSeg+0x3e>
			{
				rowSegBuffer[segPosition].red_length += 
     d4c:	88 0f       	add	r24, r24
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
     d52:	82 0f       	add	r24, r18
     d54:	8c 93       	st	X, r24
     d56:	80 e0       	ldi	r24, 0x00	; 0
					(additionalLength << SEG_LENGTH_SHIFT);

				//Then we're done.
			//	additionalLength = 0;
			//	break;
				return FALSE;
     d58:	08 95       	ret
			else
			{
				uint8_t red = 
					rowSegBuffer[segPosition].red_length & RED_MASK;

				rowSegBuffer[segPosition].red_length =
     d5a:	28 6f       	ori	r18, 0xF8	; 248
     d5c:	2c 93       	st	X, r18
					red | (SEG_MAXLENGTH << SEG_LENGTH_SHIFT);

				additionalLength -= maxStretch;
     d5e:	84 1b       	sub	r24, r20
     d60:	95 0b       	sbc	r25, r21

		// We shouldn't ever get here if additionalLength = 0...

		//But we should test to make sure there's still lenth after
		// the stretch...
		if(additionalLength)
     d62:	49 f0       	breq	.+18     	; 0xd76 <stretchSeg+0x5a>
				rowSegBuffer[segPosition].green_blue;

			uint8_t retVal;

			//Create new segment(s) with the remaining length
			retVal = newSeg(additionalLength, red, green_blue);
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	e8 53       	subi	r30, 0x38	; 56
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	60 81       	ld	r22, Z
     d6e:	67 70       	andi	r22, 0x07	; 7
     d70:	41 81       	ldd	r20, Z+1	; 0x01
     d72:	94 df       	rcall	.-216    	; 0xc9c <newSeg>

			//Then we're done...
			//additionalLength = 0;
			//break;

			return retVal;
     d74:	08 95       	ret
     d76:	80 e0       	ldi	r24, 0x00	; 0
		}	

		//We shouldn't ever get here...
		// Well, maybe... if additionalLength == maxStretch...?
		return FALSE;
}
     d78:	08 95       	ret

00000d7a <addSeg>:
// the last segment...
uint8_t addSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Currently not smart enough to stretch the first segment...
	if(segPosition == 0)
     d7a:	e0 91 77 00 	lds	r30, 0x0077
     d7e:	ee 23       	and	r30, r30
     d80:	11 f4       	brne	.+4      	; 0xd86 <addSeg+0xc>
		return newSeg(length, red, green_blue);
     d82:	8c df       	rcall	.-232    	; 0xc9c <newSeg>
     d84:	08 95       	ret

	//Can we stretch?
	if(((rowSegBuffer[segPosition].red_length & RED_MASK) == red)
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	e8 53       	subi	r30, 0x38	; 56
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	20 81       	ld	r18, Z
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	27 70       	andi	r18, 0x07	; 7
     d96:	30 70       	andi	r19, 0x00	; 0
     d98:	a6 2f       	mov	r26, r22
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	2a 17       	cp	r18, r26
     d9e:	3b 07       	cpc	r19, r27
     da0:	29 f4       	brne	.+10     	; 0xdac <addSeg+0x32>
     da2:	21 81       	ldd	r18, Z+1	; 0x01
     da4:	24 17       	cp	r18, r20
     da6:	11 f4       	brne	.+4      	; 0xdac <addSeg+0x32>
		&& (rowSegBuffer[segPosition].green_blue == green_blue))
			return stretchSeg(length);
     da8:	b9 df       	rcall	.-142    	; 0xd1c <stretchSeg>
     daa:	08 95       	ret
	else
		return newSeg(length, red, green_blue);
     dac:	77 df       	rcall	.-274    	; 0xc9c <newSeg>

}
     dae:	08 95       	ret

00000db0 <rbpix_to_seg>:
//This is just an intermediate test, for now...
// for reloading the rowbuffer to a seg-buffer.
//This could easily be revised (and generalized) to be...
// addSegment or addPixel
void rbpix_to_seg(uint8_t rbValue, uint8_t col, uint8_t length)
{
     db0:	1f 93       	push	r17
     db2:	18 2f       	mov	r17, r24
     db4:	84 2f       	mov	r24, r20
	static uint8_t last_rbValue = 0;
	//uint8_t length = 1;

	if(col == 0)
     db6:	66 23       	and	r22, r22
     db8:	59 f4       	brne	.+22     	; 0xdd0 <rbpix_to_seg+0x20>
	{
		last_rbValue = 0;
     dba:	10 92 78 00 	sts	0x0078, r1
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     dbe:	10 92 77 00 	sts	0x0077, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     dc2:	96 e0       	ldi	r25, 0x06	; 6
     dc4:	90 93 c8 00 	sts	0x00C8, r25
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     dc8:	93 e6       	ldi	r25, 0x63	; 99
     dca:	90 93 c9 00 	sts	0x00C9, r25
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <rbpix_to_seg+0x36>
	{
		last_rbValue = 0;
		segClear();
	}
	//Same color as last pixel...
	else if(segPosition && (rbValue == last_rbValue))
     dd0:	90 91 77 00 	lds	r25, 0x0077
     dd4:	99 23       	and	r25, r25
     dd6:	39 f0       	breq	.+14     	; 0xde6 <rbpix_to_seg+0x36>
     dd8:	90 91 78 00 	lds	r25, 0x0078
     ddc:	19 17       	cp	r17, r25
     dde:	19 f4       	brne	.+6      	; 0xde6 <rbpix_to_seg+0x36>
	{
		stretchSeg(length);
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9c df       	rcall	.-200    	; 0xd1c <stretchSeg>
		return;
     de4:	16 c0       	rjmp	.+44     	; 0xe12 <rbpix_to_seg+0x62>

	uint8_t green = rbValue & 0x03;
	uint8_t red = (rbValue & 0x1C) >> 2;
	uint8_t blue = rbValue >> 5;

	newSeg(length, red, (blue<<4) | green);
     de6:	61 2f       	mov	r22, r17
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	6c 71       	andi	r22, 0x1C	; 28
     dec:	70 70       	andi	r23, 0x00	; 0
     dee:	75 95       	asr	r23
     df0:	67 95       	ror	r22
     df2:	75 95       	asr	r23
     df4:	67 95       	ror	r22
     df6:	21 2f       	mov	r18, r17
     df8:	22 95       	swap	r18
     dfa:	26 95       	lsr	r18
     dfc:	27 70       	andi	r18, 0x07	; 7
     dfe:	22 95       	swap	r18
     e00:	20 7f       	andi	r18, 0xF0	; 240
     e02:	91 2f       	mov	r25, r17
     e04:	93 70       	andi	r25, 0x03	; 3
     e06:	29 2b       	or	r18, r25
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	42 2f       	mov	r20, r18
     e0c:	47 df       	rcall	.-370    	; 0xc9c <newSeg>

	last_rbValue = rbValue;
     e0e:	10 93 78 00 	sts	0x0078, r17
}
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret

00000e16 <rsb_drawPix>:
void rsb_drawPix(uint8_t rowNum)
{
   //a/o v59-12ish: WTF, no comment about this?!
   // I believe this is to enable Green's output
   // which was disabled prior because...?
   TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
     e16:	83 e5       	ldi	r24, 0x53	; 83
     e18:	80 bf       	out	0x30, r24	; 48
		  "I"  (_SFR_IO_ADDR(DT1)),	//DT1: %6
		  "I"  (_SFR_IO_ADDR(OCR1A))	//OCR1A %7
	);
*/

__asm__ __volatile__
     e1a:	e8 ec       	ldi	r30, 0xC8	; 200
     e1c:	f0 e0       	ldi	r31, 0x00	; 0

00000e1e <LoadNext_921>:
     e1e:	41 91       	ld	r20, Z+
     e20:	54 2f       	mov	r21, r20
     e22:	57 70       	andi	r21, 0x07	; 7
     e24:	61 91       	ld	r22, Z+
     e26:	76 2f       	mov	r23, r22
     e28:	6f 70       	andi	r22, 0x0F	; 15
     e2a:	72 95       	swap	r23
     e2c:	7f 70       	andi	r23, 0x0F	; 15
     e2e:	5a bd       	out	0x2a, r21	; 42
     e30:	64 bd       	out	0x24, r22	; 36
     e32:	7d bd       	out	0x2d, r23	; 45
     e34:	48 7f       	andi	r20, 0xF8	; 248
     e36:	a9 f0       	breq	.+42     	; 0xe62 <Done_921>
     e38:	00 00       	nop
     e3a:	00 00       	nop

00000e3c <Counter_921>:
     e3c:	48 50       	subi	r20, 0x08	; 8
     e3e:	79 f3       	breq	.-34     	; 0xe1e <LoadNext_921>
     e40:	00 00       	nop
     e42:	00 00       	nop
     e44:	00 00       	nop
     e46:	00 00       	nop
     e48:	00 00       	nop
     e4a:	00 00       	nop
     e4c:	00 00       	nop
     e4e:	00 00       	nop
     e50:	00 00       	nop
     e52:	00 00       	nop
     e54:	00 00       	nop
     e56:	00 00       	nop
     e58:	00 00       	nop
     e5a:	00 00       	nop
     e5c:	00 00       	nop
     e5e:	00 00       	nop
     e60:	ed cf       	rjmp	.-38     	; 0xe3c <Counter_921>

00000e62 <Done_921>:
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <Done_921+0x4>
      // Actually, it's quite handy, because it shows where drawSegs has
      // completed... (I thought it stretched to the end of DE, but nope)
      // The "bug" with PLL_SYSCLK's white bars now appears to be quite
      // apparently due to carry-over from a previous line
      // rather than an Hsync problem, as now it appears cyan.
      OCR1D = 0;
     e6a:	1a bc       	out	0x2a, r1	; 42
      // green seems to be floating between the last pixel and the
      // delay_cyc (!)
      //Disable complementary-output for Green 
      //  (on /OC1B, where CLK is OC1B)
      // Since Nada, V, and H DT's might be bad for clocking.
      TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
     e6c:	83 e6       	ldi	r24, 0x63	; 99
     e6e:	80 bf       	out	0x30, r24	; 48
         | (1<<COM1B1) | (0<<COM1B0)
         | (1<<PWM1A) | (1<<PWM1B) );

      fullBlue();
     e70:	14 bc       	out	0x24, r1	; 36
     e72:	86 e0       	ldi	r24, 0x06	; 6
     e74:	8d bd       	out	0x2d, r24	; 45
      Nada_fromDEonly();
     e76:	80 e3       	ldi	r24, 0x30	; 48
     e78:	84 bd       	out	0x24, r24	; 36
}
     e7a:	08 95       	ret

00000e7c <updateLCD>:

	//Hsync and Actually draw the pixels... (when DE is active)
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);
     e7c:	80 91 75 00 	lds	r24, 0x0075
     e80:	90 91 73 00 	lds	r25, 0x0073
// rowNum is only used when DE is active...
//  and should be 0 at *drawn row* 0
void loadData(uint16_t rowNum, uint8_t dataEnable)
{
	//H Active pulse...
   if(vSync)
     e84:	20 91 74 00 	lds	r18, 0x0074
     e88:	22 23       	and	r18, r18
     e8a:	39 f0       	breq	.+14     	; 0xe9a <updateLCD+0x1e>
   {
		//Vsync_fromNada() is called at the end of the last interupt
      VplusH_fromVsync();
     e8c:	1d bc       	out	0x2d, r1	; 45
     e8e:	ef ea       	ldi	r30, 0xAF	; 175
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	31 97       	sbiw	r30, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <updateLCD+0x16>
      Hlow_Delay();
      Vsync_fromVplusH();
     e96:	25 e0       	ldi	r18, 0x05	; 5
     e98:	07 c0       	rjmp	.+14     	; 0xea8 <updateLCD+0x2c>
      HD_Delay();
   }
   else
   {
      Hsync_fromNada();
     e9a:	23 e0       	ldi	r18, 0x03	; 3
     e9c:	2d bd       	out	0x2d, r18	; 45
     e9e:	ef ea       	ldi	r30, 0xAF	; 175
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <updateLCD+0x26>
      Hlow_Delay();
      Nada_fromHsync();
     ea6:	24 e0       	ldi	r18, 0x04	; 4
     ea8:	2d bd       	out	0x2d, r18	; 45
     eaa:	e8 e5       	ldi	r30, 0x58	; 88
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	31 97       	sbiw	r30, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <updateLCD+0x32>
      HD_Delay();
   }

   if(dataEnable)
     eb2:	99 23       	and	r25, r25
     eb4:	11 f0       	breq	.+4      	; 0xeba <updateLCD+0x3e>
#if (defined(ROW_SEG_BUFFER) && ROW_SEG_BUFFER)
void drawPix(uint8_t rowNum)
{
	//Note that rowNum isn't really used here...
	// and it's only a uint8_t!
	rsb_drawPix(rowNum);
     eb6:	86 52       	subi	r24, 0x26	; 38
     eb8:	ae df       	rcall	.-164    	; 0xe16 <rsb_drawPix>
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);

	hsyncCount++;
     eba:	80 91 75 00 	lds	r24, 0x0075
     ebe:	90 91 76 00 	lds	r25, 0x0076
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	90 93 76 00 	sts	0x0076, r25
     ec8:	80 93 75 00 	sts	0x0075, r24

	switch(hsyncCount)
     ecc:	83 32       	cpi	r24, 0x23	; 35
     ece:	91 05       	cpc	r25, r1
     ed0:	c1 f0       	breq	.+48     	; 0xf02 <updateLCD+0x86>
     ed2:	84 32       	cpi	r24, 0x24	; 36
     ed4:	91 05       	cpc	r25, r1
     ed6:	20 f4       	brcc	.+8      	; 0xee0 <updateLCD+0x64>
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	e1 f4       	brne	.+56     	; 0xf16 <updateLCD+0x9a>
     ede:	08 c0       	rjmp	.+16     	; 0xef0 <updateLCD+0x74>
     ee0:	86 32       	cpi	r24, 0x26	; 38
     ee2:	91 05       	cpc	r25, r1
     ee4:	a9 f0       	breq	.+42     	; 0xf10 <updateLCD+0x94>
     ee6:	23 e0       	ldi	r18, 0x03	; 3
     ee8:	86 32       	cpi	r24, 0x26	; 38
     eea:	92 07       	cpc	r25, r18
     eec:	a1 f4       	brne	.+40     	; 0xf16 <updateLCD+0x9a>
     eee:	15 c0       	rjmp	.+42     	; 0xf1a <updateLCD+0x9e>
	{
		//V Front Porch, begins with initLCD

		//Vsync H->L (Begin V-Sync)
		case T_DV:
			dataEnable = FALSE;
     ef0:	10 92 73 00 	sts	0x0073, r1
			//clrpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = TRUE;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 74 00 	sts	0x0074, r24
			Vsync_fromNada();
     efa:	80 e4       	ldi	r24, 0x40	; 64
     efc:	84 bd       	out	0x24, r24	; 36
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <updateLCD+0x90>
		//	if(hfm_nextOutput(&modulator))
		//		colorOverride = 0xff;
		//	else
		//		colorOverride = 7;
			//setpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = FALSE;
     f02:	10 92 74 00 	sts	0x0074, r1
			Nada_fromVsync();
     f06:	80 e3       	ldi	r24, 0x30	; 48
     f08:	84 bd       	out	0x24, r24	; 36
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	8d bd       	out	0x2d, r24	; 45
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <updateLCD+0x9a>
			break;
		//Start of frame (DE active)
		case T_VD +(T_Vlow + T_DV):
			dataEnable = TRUE;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 73 00 	sts	0x0073, r24
     f16:	80 e0       	ldi	r24, 0x00	; 0
			break;
     f18:	08 95       	ret
		// All rows have been displayed
		// Return to V Front Porch
		case V_COUNT +(T_VD + T_Vlow + T_DV):
			dataEnable = FALSE;
     f1a:	10 92 73 00 	sts	0x0073, r1
		//	break;
		//Frame complete
		//case HSYNC_COUNT_FRAME_COMPLETE:
			//T_DV +(V_COUNT+T_VD+T_Vlow) + FRAME_UPDATE_DELAY:
			hsyncCount = 0;
     f1e:	10 92 76 00 	sts	0x0076, r1
     f22:	10 92 75 00 	sts	0x0075, r1
     f26:	81 e0       	ldi	r24, 0x01	; 1
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...

	return frameComplete;
}
     f28:	08 95       	ret

00000f2a <init_timer0Hsync>:
//Testing with values returned by timer0Calculator
//#define TIMER0_OCRVAL	65

void init_timer0Hsync(void)
{
   OCR0A = TIMER0_OCRVAL; //T_Hlow_CYC + T_HD_CYC + T_DE_CYC + T_DH_CYC;
     f2a:	84 e8       	ldi	r24, 0x84	; 132
     f2c:	83 bb       	out	0x13, r24	; 19
   timer_setWGM(0, WGM_CLR_ON_COMPARE);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	62 e0       	ldi	r22, 0x02	; 2
     f32:	73 db       	rcall	.-2330   	; 0x61a <timer_setWGM>
   timer_selectDivisor(0, TIMER0_CLKDIV); //CLKDIV1);
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	66 e0       	ldi	r22, 0x06	; 6
     f38:	47 db       	rcall	.-2418   	; 0x5c8 <timer_selectDivisor>
   timer_compareMatchIntEnable(0, OUT_CHANNELA);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	a0 db       	rcall	.-2240   	; 0x682 <timer_compareMatchIntSetup>
}
     f42:	08 95       	ret

00000f44 <main>:
#if(defined(SEG_RACER) && SEG_RACER)
	racer_init();
#endif

#if(defined(SEG_TET) && SEG_TET)
	tetInit(3);
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	d9 dc       	rcall	.-1614   	; 0x8fa <tetInit>
#endif
	init_timer0Hsync();
     f48:	f0 df       	rcall	.-32     	; 0xf2a <init_timer0Hsync>
	//This starts pretty late... watch out for WDT
	init_heartBeat();

	setHeartRate(0);

	lvds_timerInit();
     f4a:	46 de       	rcall	.-884    	; 0xbd8 <lvds_timerInit>
     f4c:	ff cf       	rjmp	.-2      	; 0xf4c <main+0x8>

00000f4e <__vector_14>:
//Nearly everything display-related happens in this interrupt
// It even calls the functions that load (and calculate!) the data for the
// next row.
// So basically, the entire project is running via timer-interrupt.
SIGNAL(TIMER0_COMPA_vect)
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	6f 92       	push	r6
     f5a:	7f 92       	push	r7
     f5c:	8f 92       	push	r8
     f5e:	9f 92       	push	r9
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
	// (otherwise there's not much guarantee that register-assignments
	//  later will align with the LVDS frame... though ALIGN should help)
	// see scopeHsync.c


	if(updateLCD())
     f8a:	78 df       	rcall	.-272    	; 0xe7c <updateLCD>
     f8c:	88 23       	and	r24, r24
     f8e:	29 f0       	breq	.+10     	; 0xf9a <__vector_14+0x4c>
	{
		frameCount++;
     f90:	80 91 79 00 	lds	r24, 0x0079
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 79 00 	sts	0x0079, r24
	//Load the next row into the row(seg)buffer
	//data is enabled after T_VD+T_Vlow...
	//a/o v60: Rereading this is confusing...
	// Basically, there's no reason to call loadRow for display-lines
	// which don't display data (e.g. V-Sync)
	if((hsyncCount >= T_VD+T_Vlow) && (hsyncCount < T_VD+T_Vlow+V_COUNT))
     f9a:	c0 91 75 00 	lds	r28, 0x0075
     f9e:	d0 91 76 00 	lds	r29, 0x0076
     fa2:	a3 97       	sbiw	r28, 0x23	; 35
     fa4:	23 e0       	ldi	r18, 0x03	; 3
     fa6:	c0 30       	cpi	r28, 0x00	; 0
     fa8:	d2 07       	cpc	r29, r18
     faa:	08 f0       	brcs	.+2      	; 0xfae <__vector_14+0x60>
     fac:	c9 c1       	rjmp	.+914    	; 0x1340 <__vector_14+0x3f2>
	//3-5 = white + cyan
	//6 = letters alternating with above
	//7-9 = ditto, stretched

#define TET_VSTRETCH	16
	if(rowNum == 0)
     fae:	20 97       	sbiw	r28, 0x00	; 0
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <__vector_14+0x66>
	{
		//Probably not best to put this here, as we're still in the interrupt
		// extra-long calculations might cause syncing issues with displays
		// that require rows to be a constant time
		tetUpdate();
     fb2:	c2 dc       	rcall	.-1660   	; 0x938 <tetUpdate>
	}
	if(rowNum % TET_VSTRETCH == 0)
     fb4:	ce 01       	movw	r24, r28
     fb6:	8f 70       	andi	r24, 0x0F	; 15
     fb8:	90 70       	andi	r25, 0x00	; 0
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <__vector_14+0x72>
     fbe:	2c c1       	rjmp	.+600    	; 0x1218 <__vector_14+0x2ca>
	{
		uint8_t i;
		for(i=0; i<RB_WIDTH; i++)
			rowBuffer[i] = fb_to_rb(_K);
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	23 dc       	rcall	.-1978   	; 0x80a <fb_to_rb>
     fc4:	d8 2e       	mov	r13, r24
     fc6:	ea e8       	ldi	r30, 0x8A	; 138
     fc8:	f1 e0       	ldi	r31, 0x01	; 1

//Nearly everything display-related happens in this interrupt
// It even calls the functions that load (and calculate!) the data for the
// next row.
// So basically, the entire project is running via timer-interrupt.
SIGNAL(TIMER0_COMPA_vect)
     fca:	7f 01       	movw	r14, r30
	}
	if(rowNum % TET_VSTRETCH == 0)
	{
		uint8_t i;
		for(i=0; i<RB_WIDTH; i++)
			rowBuffer[i] = fb_to_rb(_K);
     fcc:	d1 92       	st	Z+, r13
		tetUpdate();
	}
	if(rowNum % TET_VSTRETCH == 0)
	{
		uint8_t i;
		for(i=0; i<RB_WIDTH; i++)
     fce:	31 e0       	ldi	r19, 0x01	; 1
     fd0:	ea 3c       	cpi	r30, 0xCA	; 202
     fd2:	f3 07       	cpc	r31, r19
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <__vector_14+0x7e>
			rowBuffer[i] = fb_to_rb(_K);
		//	rowBuffer[i] = fb_to_rb((i+rowNum/TET_VSTRETCH)&0x3f);
		
		tet_drawRow(rowNum/TET_VSTRETCH, rowBuffer);
     fd6:	ce 01       	movw	r24, r28
     fd8:	64 e0       	ldi	r22, 0x04	; 4
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	6a 95       	dec	r22
     fe0:	e1 f7       	brne	.-8      	; 0xfda <__vector_14+0x8c>
     fe2:	18 2f       	mov	r17, r24
// (e.g. for brick separators...)
void tet_drawRow(uint8_t rowNum, uint8_t rowBuffer[])
{
	uint8_t i; 

	if( (rowNum >= TET_TOP_ROW) &&
     fe4:	82 31       	cpi	r24, 0x12	; 18
     fe6:	a8 f5       	brcc	.+106    	; 0x1052 <__vector_14+0x104>
		 (rowNum < TET_TOP_ROW+TET_HEIGHT) )
	{
		//left border:
		rowBuffer[0]=fb_to_rb(_W);
     fe8:	8f e3       	ldi	r24, 0x3F	; 63
     fea:	0f dc       	rcall	.-2018   	; 0x80a <fb_to_rb>
     fec:	08 2f       	mov	r16, r24
     fee:	80 93 8a 01 	sts	0x018A, r24
     ff2:	5a e8       	ldi	r21, 0x8A	; 138
     ff4:	65 2e       	mov	r6, r21
     ff6:	51 e0       	ldi	r21, 0x01	; 1
     ff8:	75 2e       	mov	r7, r21
     ffa:	88 24       	eor	r8, r8
     ffc:	99 24       	eor	r9, r9

		//Draw active (and inactive) bricks
		for(i=1; i<=TET_WIDTH; i++)
		{
			rowBuffer[i]=
				fb_to_rb(tetBrick_to_fb(
     ffe:	a1 2e       	mov	r10, r17
    1000:	bb 24       	eor	r11, r11
    1002:	aa 0c       	add	r10, r10
    1004:	bb 1c       	adc	r11, r11
    1006:	aa 0c       	add	r10, r10
    1008:	bb 1c       	adc	r11, r11
    100a:	80 e8       	ldi	r24, 0x80	; 128
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a8 0e       	add	r10, r24
    1010:	b9 1e       	adc	r11, r25
    1012:	f5 01       	movw	r30, r10
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	a2 81       	ldd	r26, Z+2	; 0x02
    101a:	b3 81       	ldd	r27, Z+3	; 0x03
    101c:	08 2c       	mov	r0, r8
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <__vector_14+0xda>
    1020:	b6 95       	lsr	r27
    1022:	a7 95       	ror	r26
    1024:	97 95       	ror	r25
    1026:	87 95       	ror	r24
    1028:	0a 94       	dec	r0
    102a:	d2 f7       	brpl	.-12     	; 0x1020 <__vector_14+0xd2>
    102c:	87 70       	andi	r24, 0x07	; 7
    102e:	ac dd       	rcall	.-1192   	; 0xb88 <tetBrick_to_fb>
    1030:	ec db       	rcall	.-2088   	; 0x80a <fb_to_rb>
		rowBuffer[0]=fb_to_rb(_W);

		//Draw active (and inactive) bricks
		for(i=1; i<=TET_WIDTH; i++)
		{
			rowBuffer[i]=
    1032:	f3 01       	movw	r30, r6
    1034:	81 83       	std	Z+1, r24	; 0x01
    1036:	23 e0       	ldi	r18, 0x03	; 3
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	82 0e       	add	r8, r18
    103c:	93 1e       	adc	r9, r19
    103e:	08 94       	sec
    1040:	61 1c       	adc	r6, r1
    1042:	71 1c       	adc	r7, r1
	{
		//left border:
		rowBuffer[0]=fb_to_rb(_W);

		//Draw active (and inactive) bricks
		for(i=1; i<=TET_WIDTH; i++)
    1044:	3e e1       	ldi	r19, 0x1E	; 30
    1046:	83 16       	cp	r8, r19
    1048:	91 04       	cpc	r9, r1
    104a:	19 f7       	brne	.-58     	; 0x1012 <__vector_14+0xc4>
				fb_to_rb(tetBrick_to_fb(
							getTetBrick(rowNum-TET_TOP_ROW,i-1)));
		}

		//right border:
		rowBuffer[i]=fb_to_rb(_W);
    104c:	00 93 95 01 	sts	0x0195, r16
    1050:	0b c0       	rjmp	.+22     	; 0x1068 <__vector_14+0x11a>

		//SEE NOTE in main.c re: _b and _c -> _W syncing...
	}
	//bottom border:
	else if(rowNum == TET_TOP_ROW+TET_HEIGHT)
    1052:	82 31       	cpi	r24, 0x12	; 18
    1054:	49 f4       	brne	.+18     	; 0x1068 <__vector_14+0x11a>
		for(i=0; i<=TET_WIDTH+1; i++)
			rowBuffer[i]=fb_to_rb(_W);
    1056:	8f e3       	ldi	r24, 0x3F	; 63
    1058:	d8 db       	rcall	.-2128   	; 0x80a <fb_to_rb>

//Nearly everything display-related happens in this interrupt
// It even calls the functions that load (and calculate!) the data for the
// next row.
// So basically, the entire project is running via timer-interrupt.
SIGNAL(TIMER0_COMPA_vect)
    105a:	ea e8       	ldi	r30, 0x8A	; 138
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	81 93       	st	Z+, r24

		//SEE NOTE in main.c re: _b and _c -> _W syncing...
	}
	//bottom border:
	else if(rowNum == TET_TOP_ROW+TET_HEIGHT)
		for(i=0; i<=TET_WIDTH+1; i++)
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	e6 39       	cpi	r30, 0x96	; 150
    1064:	f9 07       	cpc	r31, r25
    1066:	d9 f7       	brne	.-10     	; 0x105e <__vector_14+0x110>
//		return;


	//Active (falling) piece:

	if((rowNum >= pieceTopRow) &&
    1068:	80 90 70 00 	lds	r8, 0x0070
    106c:	18 15       	cp	r17, r8
    106e:	08 f4       	brcc	.+2      	; 0x1072 <__vector_14+0x124>
    1070:	41 c0       	rjmp	.+130    	; 0x10f4 <__vector_14+0x1a6>
    1072:	88 2d       	mov	r24, r8
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	03 96       	adiw	r24, 0x03	; 3
    1078:	21 2f       	mov	r18, r17
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	82 17       	cp	r24, r18
    107e:	93 07       	cpc	r25, r19
    1080:	cc f1       	brlt	.+114    	; 0x10f4 <__vector_14+0x1a6>
		uint8_t pieceRowNum = rowNum - pieceTopRow;

		for(i=0; i<PIECE_WIDTH; i++)
		{
			uint8_t pieceBrick = 
					getTetPieceBrick(pieceNum, pieceOrientation, 
    1082:	e1 2f       	mov	r30, r17
    1084:	e8 19       	sub	r30, r8
    1086:	8e 2e       	mov	r8, r30
    1088:	99 24       	eor	r9, r9
    108a:	88 0c       	add	r8, r8
    108c:	99 1c       	adc	r9, r9
    108e:	88 0c       	add	r8, r8
    1090:	99 1c       	adc	r9, r9
    1092:	aa 24       	eor	r10, r10
    1094:	bb 24       	eor	r11, r11
    1096:	80 91 6e 00 	lds	r24, 0x006E
    109a:	e8 2f       	mov	r30, r24
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	90 91 6f 00 	lds	r25, 0x006F
    10aa:	e9 0f       	add	r30, r25
    10ac:	f1 1d       	adc	r31, r1
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	e4 5b       	subi	r30, 0xB4	; 180
    10b4:	fb 4f       	sbci	r31, 0xFB	; 251
    10b6:	25 91       	lpm	r18, Z+
    10b8:	34 91       	lpm	r19, Z
										  pieceRowNum, i);

			//Only draw piece pixels (not black/empty pixels)
			// (we don't want to overwrite nearby bricks)
			if(pieceBrick)
    10ba:	a5 01       	movw	r20, r10
    10bc:	48 0d       	add	r20, r8
    10be:	59 1d       	adc	r21, r9
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <__vector_14+0x178>
    10c2:	36 95       	lsr	r19
    10c4:	27 95       	ror	r18
    10c6:	4a 95       	dec	r20
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <__vector_14+0x174>
    10ca:	20 ff       	sbrs	r18, 0
    10cc:	0c c0       	rjmp	.+24     	; 0x10e6 <__vector_14+0x198>
			//+1 for the left border...
				rowBuffer[i+1+pieceLeftCol] =
						fb_to_rb(tetBrick_to_fb(pieceNum+1));
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    10d0:	5b dd       	rcall	.-1354   	; 0xb88 <tetBrick_to_fb>
    10d2:	9b db       	rcall	.-2250   	; 0x80a <fb_to_rb>

			//Only draw piece pixels (not black/empty pixels)
			// (we don't want to overwrite nearby bricks)
			if(pieceBrick)
			//+1 for the left border...
				rowBuffer[i+1+pieceLeftCol] =
    10d4:	e0 91 71 00 	lds	r30, 0x0071
    10d8:	95 01       	movw	r18, r10
    10da:	2e 0f       	add	r18, r30
    10dc:	31 1d       	adc	r19, r1
    10de:	f9 01       	movw	r30, r18
    10e0:	e5 57       	subi	r30, 0x75	; 117
    10e2:	fe 4f       	sbci	r31, 0xFE	; 254
    10e4:	80 83       	st	Z, r24
    10e6:	08 94       	sec
    10e8:	a1 1c       	adc	r10, r1
    10ea:	b1 1c       	adc	r11, r1
	if((rowNum >= pieceTopRow) &&
		(rowNum < pieceTopRow+PIECE_HEIGHT) )
	{
		uint8_t pieceRowNum = rowNum - pieceTopRow;

		for(i=0; i<PIECE_WIDTH; i++)
    10ec:	34 e0       	ldi	r19, 0x04	; 4
    10ee:	a3 16       	cp	r10, r19
    10f0:	b1 04       	cpc	r11, r1
    10f2:	89 f6       	brne	.-94     	; 0x1096 <__vector_14+0x148>
   i=CHARACTER_START_COL;

   uint8_t charRow;
   uint8_t color;
   char character;
   switch(rowNum/8)
    10f4:	81 2f       	mov	r24, r17
    10f6:	86 95       	lsr	r24
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	b1 f0       	breq	.+44     	; 0x112c <__vector_14+0x1de>
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	28 f4       	brcc	.+10     	; 0x110e <__vector_14+0x1c0>
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	49 f0       	breq	.+18     	; 0x111a <__vector_14+0x1cc>
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	51 f4       	brne	.+20     	; 0x1120 <__vector_14+0x1d2>
    110c:	0c c0       	rjmp	.+24     	; 0x1126 <__vector_14+0x1d8>
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	09 f4       	brne	.+2      	; 0x1114 <__vector_14+0x1c6>
    1112:	47 c0       	rjmp	.+142    	; 0x11a2 <__vector_14+0x254>
    1114:	85 30       	cpi	r24, 0x05	; 5
    1116:	21 f4       	brne	.+8      	; 0x1120 <__vector_14+0x1d2>
    1118:	47 c0       	rjmp	.+142    	; 0x11a8 <__vector_14+0x25a>
    111a:	25 e4       	ldi	r18, 0x45	; 69
    111c:	07 e0       	ldi	r16, 0x07	; 7
    111e:	46 c0       	rjmp	.+140    	; 0x11ac <__vector_14+0x25e>
    1120:	24 e5       	ldi	r18, 0x54	; 84
    1122:	03 e0       	ldi	r16, 0x03	; 3
    1124:	43 c0       	rjmp	.+134    	; 0x11ac <__vector_14+0x25e>
    1126:	24 e5       	ldi	r18, 0x54	; 84
    1128:	0f e0       	ldi	r16, 0x0F	; 15
    112a:	40 c0       	rjmp	.+128    	; 0x11ac <__vector_14+0x25e>
            { 
               uint8_t z, temp;
               
               //Reverse the "R" to make it look Russian
               // And shift it one left...
               temp = getCharRow('R', rowNum%8);
    112c:	81 2f       	mov	r24, r17
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	87 70       	andi	r24, 0x07	; 7
    1132:	90 70       	andi	r25, 0x00	; 0
    1134:	60 e6       	ldi	r22, 0x60	; 96
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	30 d2       	rcall	.+1120   	; 0x159a <__mulhi3>
    113a:	fc 01       	movw	r30, r24
    113c:	e2 58       	subi	r30, 0x82	; 130
    113e:	fe 4f       	sbci	r31, 0xFE	; 254
    1140:	e4 91       	lpm	r30, Z
    1142:	27 e0       	ldi	r18, 0x07	; 7
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	80 e0       	ldi	r24, 0x00	; 0
               
               for(z=0; z<8; z++)
               {
                  writebit(7-z, charRow, getbit(z,temp));
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	67 e0       	ldi	r22, 0x07	; 7
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	db 01       	movw	r26, r22
    1154:	a2 1b       	sub	r26, r18
    1156:	b3 0b       	sbc	r27, r19
    1158:	5f 01       	movw	r10, r30
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <__vector_14+0x212>
    115c:	b5 94       	asr	r11
    115e:	a7 94       	ror	r10
    1160:	aa 95       	dec	r26
    1162:	e2 f7       	brpl	.-8      	; 0x115c <__vector_14+0x20e>
    1164:	a0 fe       	sbrs	r10, 0
    1166:	09 c0       	rjmp	.+18     	; 0x117a <__vector_14+0x22c>
    1168:	da 01       	movw	r26, r20
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <__vector_14+0x224>
    116e:	aa 0f       	add	r26, r26
    1170:	bb 1f       	adc	r27, r27
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <__vector_14+0x220>
    1176:	8a 2b       	or	r24, r26
    1178:	0a c0       	rjmp	.+20     	; 0x118e <__vector_14+0x240>
    117a:	da 01       	movw	r26, r20
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <__vector_14+0x236>
    1180:	aa 0f       	add	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <__vector_14+0x232>
    1188:	9a 2f       	mov	r25, r26
    118a:	90 95       	com	r25
    118c:	89 23       	and	r24, r25
    118e:	21 50       	subi	r18, 0x01	; 1
    1190:	30 40       	sbci	r19, 0x00	; 0
               
               //Reverse the "R" to make it look Russian
               // And shift it one left...
               temp = getCharRow('R', rowNum%8);
               
               for(z=0; z<8; z++)
    1192:	9f ef       	ldi	r25, 0xFF	; 255
    1194:	2f 3f       	cpi	r18, 0xFF	; 255
    1196:	39 07       	cpc	r19, r25
    1198:	e1 f6       	brne	.-72     	; 0x1152 <__vector_14+0x204>
                  writebit(7-z, charRow, getbit(z,temp));
               }  
               //Characters are reversed... bit 0 is far-left
               //So to shift a character left, I must shift its bits right
               // (right?)
               charRow >>= 1;
    119a:	86 95       	lsr	r24
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	0c e0       	ldi	r16, 0x0C	; 12
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <__vector_14+0x260>
    11a2:	29 e4       	ldi	r18, 0x49	; 73
    11a4:	0c e3       	ldi	r16, 0x3C	; 60
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <__vector_14+0x25e>
    11a8:	23 e5       	ldi	r18, 0x53	; 83
    11aa:	00 e3       	ldi	r16, 0x30	; 48
    11ac:	80 e0       	ldi	r24, 0x00	; 0
            break;
   }     

	//Load charRow for all cases except the backwards "R"
	// which is handled above...      
   if(rowNum/8 != 3)
    11ae:	91 2f       	mov	r25, r17
    11b0:	98 51       	subi	r25, 0x18	; 24
    11b2:	98 30       	cpi	r25, 0x08	; 8
    11b4:	98 f0       	brcs	.+38     	; 0x11dc <__vector_14+0x28e>
         charRow = getCharRow(character, rowNum%8);
    11b6:	81 2f       	mov	r24, r17
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	87 70       	andi	r24, 0x07	; 7
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	63 e0       	ldi	r22, 0x03	; 3
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	eb d1       	rcall	.+982    	; 0x159a <__mulhi3>
    11c4:	fc 01       	movw	r30, r24
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	85 e0       	ldi	r24, 0x05	; 5
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	8a 95       	dec	r24
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <__vector_14+0x27c>
    11d2:	e2 0f       	add	r30, r18
    11d4:	f1 1d       	adc	r31, r1
    11d6:	e4 5b       	subi	r30, 0xB4	; 180
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	84 91       	lpm	r24, Z
    11dc:	aa 24       	eor	r10, r10
    11de:	bb 24       	eor	r11, r11

   i++;

   uint8_t j;
   for(j=0; j<8; j++)
         if(getbit(j, charRow))
    11e0:	88 2e       	mov	r8, r24
    11e2:	99 24       	eor	r9, r9
    11e4:	c4 01       	movw	r24, r8
    11e6:	0a 2c       	mov	r0, r10
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <__vector_14+0x2a0>
    11ea:	95 95       	asr	r25
    11ec:	87 95       	ror	r24
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <__vector_14+0x29c>
    11f2:	80 ff       	sbrs	r24, 0
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <__vector_14+0x2b2>
            //frameBuffer[rowNum][j+i+1] = 0x25;
            rowBuffer[j+i] = fb_to_rb(color); //0x25);
    11f6:	80 2f       	mov	r24, r16
    11f8:	08 db       	rcall	.-2544   	; 0x80a <fb_to_rb>
    11fa:	f7 01       	movw	r30, r14
    11fc:	87 87       	std	Z+15, r24	; 0x0f
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <__vector_14+0x2b6>
         else
            //frameBuffer[rowNum][j+i+1] = 0x01;
            rowBuffer[j+i] = fb_to_rb(0x00);
    1200:	f7 01       	movw	r30, r14
    1202:	d7 86       	std	Z+15, r13	; 0x0f
    1204:	08 94       	sec
    1206:	a1 1c       	adc	r10, r1
    1208:	b1 1c       	adc	r11, r1
    120a:	08 94       	sec
    120c:	e1 1c       	adc	r14, r1
    120e:	f1 1c       	adc	r15, r1
         charRow = getCharRow(character, rowNum%8);

   i++;

   uint8_t j;
   for(j=0; j<8; j++)
    1210:	f8 e0       	ldi	r31, 0x08	; 8
    1212:	af 16       	cp	r10, r31
    1214:	b1 04       	cpc	r11, r1
    1216:	31 f7       	brne	.-52     	; 0x11e4 <__vector_14+0x296>
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
    1218:	10 92 77 00 	sts	0x0077, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	80 93 c8 00 	sts	0x00C8, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
    1222:	83 e6       	ldi	r24, 0x63	; 99
    1224:	80 93 c9 00 	sts	0x00C9, r24
		tet_drawRow(rowNum/TET_VSTRETCH, rowBuffer);
	}
	segClear();

	//Good for syncing to have white on both borders...
	newSeg(3, 0x06, (6<<4) | 3);
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	66 e0       	ldi	r22, 0x06	; 6
    122e:	43 e6       	ldi	r20, 0x63	; 99
    1230:	35 dd       	rcall	.-1430   	; 0xc9c <newSeg>
	// rows for the color-gradient... might work better over more gradual
	// color-changes
#define TET_GRADIENT TRUE

#if (defined(TET_OVERLAY) && TET_OVERLAY)
	if(rowNum & 0x01)
    1232:	c0 ff       	sbrs	r28, 0
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <__vector_14+0x304>
    1236:	c1 e0       	ldi	r28, 0x01	; 1
    1238:	d0 e0       	ldi	r29, 0x00	; 0
	{
#endif
	for(i=0; i<RB_WIDTH; i++)
	{
		//i+1 because we don't want to overwrite the white border...
		rbpix_to_seg(rowBuffer[i], i+1, SEG_STRETCH);
    123a:	fe 01       	movw	r30, r28
    123c:	e7 57       	subi	r30, 0x77	; 119
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	6c 2f       	mov	r22, r28
    1244:	45 e0       	ldi	r20, 0x05	; 5
    1246:	b4 dd       	rcall	.-1176   	; 0xdb0 <rbpix_to_seg>
    1248:	21 96       	adiw	r28, 0x01	; 1

#if (defined(TET_OVERLAY) && TET_OVERLAY)
	if(rowNum & 0x01)
	{
#endif
	for(i=0; i<RB_WIDTH; i++)
    124a:	c1 34       	cpi	r28, 0x41	; 65
    124c:	d1 05       	cpc	r29, r1
    124e:	a9 f7       	brne	.-22     	; 0x123a <__vector_14+0x2ec>
    1250:	71 c0       	rjmp	.+226    	; 0x1334 <__vector_14+0x3e6>

		uint8_t fbColor;

#if (defined(TET_GRADIENT) && TET_GRADIENT)
		static hfm_t hfmGradient;
		if(rowNum%ROWS_PER == 0)
    1252:	ce 01       	movw	r24, r28
    1254:	8f 73       	andi	r24, 0x3F	; 63
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	29 f4       	brne	.+10     	; 0x1266 <__vector_14+0x318>
			hfm_setup(&hfmGradient, 0, ROWS_PER/2-4);
    125c:	8a e7       	ldi	r24, 0x7A	; 122
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	4c e1       	ldi	r20, 0x1C	; 28
    1264:	37 d9       	rcall	.-3474   	; 0x4d4 <hfm_setup>
		// (e.g. power = 1, maxPower = 15, there'll be one bright row
		//  and 14 dark, it sticks out like a sore-thumb)
		//  These values are experimental, and entirely dependent on the
		//  values used...

		hfm_setPower(&hfmGradient, (rowNum/2)%(ROWS_PER/2)+4);
    1266:	be 01       	movw	r22, r28
    1268:	76 95       	lsr	r23
    126a:	67 95       	ror	r22
    126c:	6f 71       	andi	r22, 0x1F	; 31
    126e:	6c 5f       	subi	r22, 0xFC	; 252
    1270:	8a e7       	ldi	r24, 0x7A	; 122
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	3b d9       	rcall	.-3466   	; 0x4ec <hfm_setPower>

		if(hfm_nextOutput(&hfmGradient))
    1276:	8a e7       	ldi	r24, 0x7A	; 122
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	41 d9       	rcall	.-3454   	; 0x4fe <hfm_nextOutput>
    127c:	b6 e0       	ldi	r27, 0x06	; 6
    127e:	d6 95       	lsr	r29
    1280:	c7 95       	ror	r28
    1282:	ba 95       	dec	r27
    1284:	e1 f7       	brne	.-8      	; 0x127e <__vector_14+0x330>
    1286:	88 23       	and	r24, r24
    1288:	31 f0       	breq	.+12     	; 0x1296 <__vector_14+0x348>
			fbColor = rgbGradient(ROWS_PER-1 - rowNum/(ROWS_PER)+16-1);
    128a:	8e e4       	ldi	r24, 0x4E	; 78
    128c:	8c 1b       	sub	r24, r28
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    128e:	80 53       	subi	r24, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    1290:	80 33       	cpi	r24, 0x30	; 48
    1292:	e8 f7       	brcc	.-6      	; 0x128e <__vector_14+0x340>
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <__vector_14+0x352>
		else
#endif
			fbColor = rgbGradient(ROWS_PER-1 - rowNum/(ROWS_PER)+16);
    1296:	8f e4       	ldi	r24, 0x4F	; 79
    1298:	8c 1b       	sub	r24, r28
		value -= 0x30;
    129a:	80 53       	subi	r24, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    129c:	80 33       	cpi	r24, 0x30	; 48
    129e:	e8 f7       	brcc	.-6      	; 0x129a <__vector_14+0x34c>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
    12a0:	48 2f       	mov	r20, r24
    12a2:	43 70       	andi	r20, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    12a4:	68 2f       	mov	r22, r24
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	82 ff       	sbrs	r24, 2
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <__vector_14+0x364>
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	84 1b       	sub	r24, r20
    12b0:	48 2f       	mov	r20, r24
	uint8_t G = ((value)&0x0C)>>2; 
    12b2:	9b 01       	movw	r18, r22
    12b4:	2c 70       	andi	r18, 0x0C	; 12
    12b6:	30 70       	andi	r19, 0x00	; 0
    12b8:	35 95       	asr	r19
    12ba:	27 95       	ror	r18
    12bc:	35 95       	asr	r19
    12be:	27 95       	ror	r18
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
    12c0:	64 ff       	sbrs	r22, 4
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <__vector_14+0x37c>
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	82 1b       	sub	r24, r18
    12c8:	28 2f       	mov	r18, r24
	uint8_t B = ((value)&0x30) >> 4; 
    12ca:	cb 01       	movw	r24, r22
    12cc:	80 73       	andi	r24, 0x30	; 48
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	f4 e0       	ldi	r31, 0x04	; 4
    12d2:	95 95       	asr	r25
    12d4:	87 95       	ror	r24
    12d6:	fa 95       	dec	r31
    12d8:	e1 f7       	brne	.-8      	; 0x12d2 <__vector_14+0x384>
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    12da:	66 ff       	sbrs	r22, 6
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <__vector_14+0x396>
    12de:	93 e0       	ldi	r25, 0x03	; 3
    12e0:	98 1b       	sub	r25, r24
    12e2:	89 2f       	mov	r24, r25

	return rgb(r,g,b);
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	23 70       	andi	r18, 0x03	; 3
    12e8:	30 70       	andi	r19, 0x00	; 0
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	22 0f       	add	r18, r18
    12f0:	33 1f       	adc	r19, r19
    12f2:	43 70       	andi	r20, 0x03	; 3
    12f4:	42 2b       	or	r20, r18
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	83 70       	andi	r24, 0x03	; 3
    12fa:	90 70       	andi	r25, 0x00	; 0
    12fc:	74 e0       	ldi	r23, 0x04	; 4
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	7a 95       	dec	r23
    1304:	e1 f7       	brne	.-8      	; 0x12fe <__vector_14+0x3b0>
    1306:	48 2b       	or	r20, r24

		addSegfb(RB_WIDTH*SEG_STRETCH, (fbColor));
    1308:	84 2f       	mov	r24, r20
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 01       	movw	r18, r24
    130e:	23 70       	andi	r18, 0x03	; 3
    1310:	30 70       	andi	r19, 0x00	; 0
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	64 2f       	mov	r22, r20
    1318:	61 70       	andi	r22, 0x01	; 1
    131a:	62 2b       	or	r22, r18
    131c:	40 73       	andi	r20, 0x30	; 48
    131e:	40 64       	ori	r20, 0x40	; 64
    1320:	8c 70       	andi	r24, 0x0C	; 12
    1322:	90 70       	andi	r25, 0x00	; 0
    1324:	95 95       	asr	r25
    1326:	87 95       	ror	r24
    1328:	95 95       	asr	r25
    132a:	87 95       	ror	r24
    132c:	48 2b       	or	r20, r24
    132e:	80 e4       	ldi	r24, 0x40	; 64
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	23 dd       	rcall	.-1466   	; 0xd7a <addSeg>
		//newSeg(SEG_STRETCH, fb_to_seg((rowNum*64/768)&0x3f));

	}
#endif
	//white...
	newSeg(3, 0x06, (6<<4) | 3);
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	66 e0       	ldi	r22, 0x06	; 6
    133a:	43 e6       	ldi	r20, 0x63	; 99
    133c:	af dc       	rcall	.-1698   	; 0xc9c <newSeg>
	segTerminate();
    133e:	82 dc       	rcall	.-1788   	; 0xc44 <segTerminate>
	// to load a row to a row-buffer (as opposed to a frame-buffer)
	// thus, DE could gain more pixels because there would be fewer
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...
}
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	9f 90       	pop	r9
    136c:	8f 90       	pop	r8
    136e:	7f 90       	pop	r7
    1370:	6f 90       	pop	r6
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <vfprintf>:
    137c:	ab e0       	ldi	r26, 0x0B	; 11
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e3 ec       	ldi	r30, 0xC3	; 195
    1382:	f9 e0       	ldi	r31, 0x09	; 9
    1384:	33 c1       	rjmp	.+614    	; 0x15ec <__prologue_saves__+0x8>
    1386:	6c 01       	movw	r12, r24
    1388:	4b 01       	movw	r8, r22
    138a:	7a 01       	movw	r14, r20
    138c:	fc 01       	movw	r30, r24
    138e:	17 82       	std	Z+7, r1	; 0x07
    1390:	16 82       	std	Z+6, r1	; 0x06
    1392:	83 81       	ldd	r24, Z+3	; 0x03
    1394:	81 fd       	sbrc	r24, 1
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <vfprintf+0x2c>
    1398:	2f ef       	ldi	r18, 0xFF	; 255
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	fa c0       	rjmp	.+500    	; 0x1592 <vfprintf+0x216>
    139e:	22 e0       	ldi	r18, 0x02	; 2
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	e2 0e       	add	r14, r18
    13a4:	f3 1e       	adc	r15, r19
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <vfprintf+0x34>
    13a8:	5e 01       	movw	r10, r28
    13aa:	08 94       	sec
    13ac:	a1 1c       	adc	r10, r1
    13ae:	b1 1c       	adc	r11, r1
    13b0:	f6 01       	movw	r30, r12
    13b2:	73 80       	ldd	r7, Z+3	; 0x03
    13b4:	f4 01       	movw	r30, r8
    13b6:	73 fc       	sbrc	r7, 3
    13b8:	85 91       	lpm	r24, Z+
    13ba:	73 fe       	sbrs	r7, 3
    13bc:	81 91       	ld	r24, Z+
    13be:	4f 01       	movw	r8, r30
    13c0:	88 23       	and	r24, r24
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <vfprintf+0x4a>
    13c4:	e3 c0       	rjmp	.+454    	; 0x158c <vfprintf+0x210>
    13c6:	85 32       	cpi	r24, 0x25	; 37
    13c8:	51 f4       	brne	.+20     	; 0x13de <vfprintf+0x62>
    13ca:	73 fc       	sbrc	r7, 3
    13cc:	05 91       	lpm	r16, Z+
    13ce:	73 fe       	sbrs	r7, 3
    13d0:	01 91       	ld	r16, Z+
    13d2:	4f 01       	movw	r8, r30
    13d4:	05 32       	cpi	r16, 0x25	; 37
    13d6:	11 f0       	breq	.+4      	; 0x13dc <vfprintf+0x60>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	1a c0       	rjmp	.+52     	; 0x1410 <vfprintf+0x94>
    13dc:	85 e2       	ldi	r24, 0x25	; 37
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	29 c0       	rjmp	.+82     	; 0x1434 <vfprintf+0xb8>
    13e2:	00 23       	and	r16, r16
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <vfprintf+0x6c>
    13e6:	d2 c0       	rjmp	.+420    	; 0x158c <vfprintf+0x210>
    13e8:	8b e8       	ldi	r24, 0x8B	; 139
    13ea:	94 e0       	ldi	r25, 0x04	; 4
    13ec:	60 2f       	mov	r22, r16
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	44 d1       	rcall	.+648    	; 0x167a <strchr_P>
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	39 f4       	brne	.+14     	; 0x1404 <vfprintf+0x88>
    13f6:	03 32       	cpi	r16, 0x23	; 35
    13f8:	11 f4       	brne	.+4      	; 0x13fe <vfprintf+0x82>
    13fa:	10 61       	ori	r17, 0x10	; 16
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <vfprintf+0x88>
    13fe:	0c 36       	cpi	r16, 0x6C	; 108
    1400:	61 f4       	brne	.+24     	; 0x141a <vfprintf+0x9e>
    1402:	10 68       	ori	r17, 0x80	; 128
    1404:	f4 01       	movw	r30, r8
    1406:	73 fc       	sbrc	r7, 3
    1408:	05 91       	lpm	r16, Z+
    140a:	73 fe       	sbrs	r7, 3
    140c:	01 91       	ld	r16, Z+
    140e:	4f 01       	movw	r8, r30
    1410:	17 ff       	sbrs	r17, 7
    1412:	e7 cf       	rjmp	.-50     	; 0x13e2 <vfprintf+0x66>
    1414:	00 23       	and	r16, r16
    1416:	09 f4       	brne	.+2      	; 0x141a <vfprintf+0x9e>
    1418:	b9 c0       	rjmp	.+370    	; 0x158c <vfprintf+0x210>
    141a:	84 e8       	ldi	r24, 0x84	; 132
    141c:	94 e0       	ldi	r25, 0x04	; 4
    141e:	60 2f       	mov	r22, r16
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	2b d1       	rcall	.+598    	; 0x167a <strchr_P>
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	49 f0       	breq	.+18     	; 0x143a <vfprintf+0xbe>
    1428:	24 e0       	ldi	r18, 0x04	; 4
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	e2 0e       	add	r14, r18
    142e:	f3 1e       	adc	r15, r19
    1430:	8f e3       	ldi	r24, 0x3F	; 63
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	b6 01       	movw	r22, r12
    1436:	2c d1       	rcall	.+600    	; 0x1690 <fputc>
    1438:	bb cf       	rjmp	.-138    	; 0x13b0 <vfprintf+0x34>
    143a:	03 36       	cpi	r16, 0x63	; 99
    143c:	29 f0       	breq	.+10     	; 0x1448 <vfprintf+0xcc>
    143e:	03 37       	cpi	r16, 0x73	; 115
    1440:	71 f0       	breq	.+28     	; 0x145e <vfprintf+0xe2>
    1442:	03 35       	cpi	r16, 0x53	; 83
    1444:	e1 f4       	brne	.+56     	; 0x147e <vfprintf+0x102>
    1446:	0a c0       	rjmp	.+20     	; 0x145c <vfprintf+0xe0>
    1448:	87 01       	movw	r16, r14
    144a:	0e 5f       	subi	r16, 0xFE	; 254
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	f7 01       	movw	r30, r14
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	b6 01       	movw	r22, r12
    1456:	1c d1       	rcall	.+568    	; 0x1690 <fputc>
    1458:	78 01       	movw	r14, r16
    145a:	aa cf       	rjmp	.-172    	; 0x13b0 <vfprintf+0x34>
    145c:	11 60       	ori	r17, 0x01	; 1
    145e:	f7 01       	movw	r30, r14
    1460:	60 80       	ld	r6, Z
    1462:	71 80       	ldd	r7, Z+1	; 0x01
    1464:	03 c0       	rjmp	.+6      	; 0x146c <vfprintf+0xf0>
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	b6 01       	movw	r22, r12
    146a:	12 d1       	rcall	.+548    	; 0x1690 <fputc>
    146c:	f3 01       	movw	r30, r6
    146e:	10 fd       	sbrc	r17, 0
    1470:	85 91       	lpm	r24, Z+
    1472:	10 ff       	sbrs	r17, 0
    1474:	81 91       	ld	r24, Z+
    1476:	3f 01       	movw	r6, r30
    1478:	88 23       	and	r24, r24
    147a:	a9 f7       	brne	.-22     	; 0x1466 <vfprintf+0xea>
    147c:	90 cf       	rjmp	.-224    	; 0x139e <vfprintf+0x22>
    147e:	04 36       	cpi	r16, 0x64	; 100
    1480:	11 f0       	breq	.+4      	; 0x1486 <vfprintf+0x10a>
    1482:	09 36       	cpi	r16, 0x69	; 105
    1484:	29 f5       	brne	.+74     	; 0x14d0 <vfprintf+0x154>
    1486:	17 ff       	sbrs	r17, 7
    1488:	08 c0       	rjmp	.+16     	; 0x149a <vfprintf+0x11e>
    148a:	f7 01       	movw	r30, r14
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	24 e0       	ldi	r18, 0x04	; 4
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	0a c0       	rjmp	.+20     	; 0x14ae <vfprintf+0x132>
    149a:	f7 01       	movw	r30, r14
    149c:	20 81       	ld	r18, Z
    149e:	31 81       	ldd	r19, Z+1	; 0x01
    14a0:	b9 01       	movw	r22, r18
    14a2:	88 27       	eor	r24, r24
    14a4:	77 fd       	sbrc	r23, 7
    14a6:	80 95       	com	r24
    14a8:	98 2f       	mov	r25, r24
    14aa:	22 e0       	ldi	r18, 0x02	; 2
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	e2 0e       	add	r14, r18
    14b0:	f3 1e       	adc	r15, r19
    14b2:	1f 7e       	andi	r17, 0xEF	; 239
    14b4:	97 ff       	sbrs	r25, 7
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <vfprintf+0x14c>
    14b8:	90 95       	com	r25
    14ba:	80 95       	com	r24
    14bc:	70 95       	com	r23
    14be:	61 95       	neg	r22
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	10 64       	ori	r17, 0x40	; 64
    14c8:	a5 01       	movw	r20, r10
    14ca:	2a e0       	ldi	r18, 0x0A	; 10
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	33 c0       	rjmp	.+102    	; 0x1536 <vfprintf+0x1ba>
    14d0:	00 37       	cpi	r16, 0x70	; 112
    14d2:	a9 f0       	breq	.+42     	; 0x14fe <vfprintf+0x182>
    14d4:	01 37       	cpi	r16, 0x71	; 113
    14d6:	30 f4       	brcc	.+12     	; 0x14e4 <vfprintf+0x168>
    14d8:	08 35       	cpi	r16, 0x58	; 88
    14da:	b1 f0       	breq	.+44     	; 0x1508 <vfprintf+0x18c>
    14dc:	0f 36       	cpi	r16, 0x6F	; 111
    14de:	09 f0       	breq	.+2      	; 0x14e2 <vfprintf+0x166>
    14e0:	55 c0       	rjmp	.+170    	; 0x158c <vfprintf+0x210>
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <vfprintf+0x174>
    14e4:	05 37       	cpi	r16, 0x75	; 117
    14e6:	39 f0       	breq	.+14     	; 0x14f6 <vfprintf+0x17a>
    14e8:	08 37       	cpi	r16, 0x78	; 120
    14ea:	09 f0       	breq	.+2      	; 0x14ee <vfprintf+0x172>
    14ec:	4f c0       	rjmp	.+158    	; 0x158c <vfprintf+0x210>
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <vfprintf+0x184>
    14f0:	28 e0       	ldi	r18, 0x08	; 8
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	0c c0       	rjmp	.+24     	; 0x150e <vfprintf+0x192>
    14f6:	1f 7e       	andi	r17, 0xEF	; 239
    14f8:	2a e0       	ldi	r18, 0x0A	; 10
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	08 c0       	rjmp	.+16     	; 0x150e <vfprintf+0x192>
    14fe:	10 61       	ori	r17, 0x10	; 16
    1500:	14 62       	ori	r17, 0x24	; 36
    1502:	20 e1       	ldi	r18, 0x10	; 16
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	03 c0       	rjmp	.+6      	; 0x150e <vfprintf+0x192>
    1508:	14 60       	ori	r17, 0x04	; 4
    150a:	20 e1       	ldi	r18, 0x10	; 16
    150c:	32 e0       	ldi	r19, 0x02	; 2
    150e:	17 ff       	sbrs	r17, 7
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <vfprintf+0x1a6>
    1512:	f7 01       	movw	r30, r14
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	44 e0       	ldi	r20, 0x04	; 4
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <vfprintf+0x1b4>
    1522:	f7 01       	movw	r30, r14
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	42 e0       	ldi	r20, 0x02	; 2
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	e4 0e       	add	r14, r20
    1532:	f5 1e       	adc	r15, r21
    1534:	a5 01       	movw	r20, r10
    1536:	d8 d0       	rcall	.+432    	; 0x16e8 <__ultoa_invert>
    1538:	08 2f       	mov	r16, r24
    153a:	0a 19       	sub	r16, r10
    153c:	61 2e       	mov	r6, r17
    153e:	77 24       	eor	r7, r7
    1540:	16 ff       	sbrs	r17, 6
    1542:	04 c0       	rjmp	.+8      	; 0x154c <vfprintf+0x1d0>
    1544:	8d e2       	ldi	r24, 0x2D	; 45
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	b6 01       	movw	r22, r12
    154a:	a2 d0       	rcall	.+324    	; 0x1690 <fputc>
    154c:	64 fe       	sbrs	r6, 4
    154e:	13 c0       	rjmp	.+38     	; 0x1576 <vfprintf+0x1fa>
    1550:	fe 01       	movw	r30, r28
    1552:	e0 0f       	add	r30, r16
    1554:	f1 1d       	adc	r31, r1
    1556:	80 81       	ld	r24, Z
    1558:	80 33       	cpi	r24, 0x30	; 48
    155a:	69 f0       	breq	.+26     	; 0x1576 <vfprintf+0x1fa>
    155c:	80 e3       	ldi	r24, 0x30	; 48
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	b6 01       	movw	r22, r12
    1562:	96 d0       	rcall	.+300    	; 0x1690 <fputc>
    1564:	62 fe       	sbrs	r6, 2
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <vfprintf+0x1fa>
    1568:	c3 01       	movw	r24, r6
    156a:	80 72       	andi	r24, 0x20	; 32
    156c:	90 70       	andi	r25, 0x00	; 0
    156e:	88 5a       	subi	r24, 0xA8	; 168
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	b6 01       	movw	r22, r12
    1574:	8d d0       	rcall	.+282    	; 0x1690 <fputc>
    1576:	01 50       	subi	r16, 0x01	; 1
    1578:	f5 01       	movw	r30, r10
    157a:	e0 0f       	add	r30, r16
    157c:	f1 1d       	adc	r31, r1
    157e:	80 81       	ld	r24, Z
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	b6 01       	movw	r22, r12
    1584:	85 d0       	rcall	.+266    	; 0x1690 <fputc>
    1586:	00 23       	and	r16, r16
    1588:	b1 f7       	brne	.-20     	; 0x1576 <vfprintf+0x1fa>
    158a:	12 cf       	rjmp	.-476    	; 0x13b0 <vfprintf+0x34>
    158c:	f6 01       	movw	r30, r12
    158e:	26 81       	ldd	r18, Z+6	; 0x06
    1590:	37 81       	ldd	r19, Z+7	; 0x07
    1592:	c9 01       	movw	r24, r18
    1594:	2b 96       	adiw	r28, 0x0b	; 11
    1596:	ee e0       	ldi	r30, 0x0E	; 14
    1598:	45 c0       	rjmp	.+138    	; 0x1624 <__epilogue_restores__+0x8>

0000159a <__mulhi3>:
    159a:	55 27       	eor	r21, r21
    159c:	00 24       	eor	r0, r0

0000159e <__mulhi3_loop>:
    159e:	80 ff       	sbrs	r24, 0
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <__mulhi3_skip1>
    15a2:	06 0e       	add	r0, r22
    15a4:	57 1f       	adc	r21, r23

000015a6 <__mulhi3_skip1>:
    15a6:	66 0f       	add	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	61 15       	cp	r22, r1
    15ac:	71 05       	cpc	r23, r1
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <__mulhi3_exit>
    15b0:	96 95       	lsr	r25
    15b2:	87 95       	ror	r24
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	99 f7       	brne	.-26     	; 0x159e <__mulhi3_loop>

000015b8 <__mulhi3_exit>:
    15b8:	95 2f       	mov	r25, r21
    15ba:	80 2d       	mov	r24, r0
    15bc:	08 95       	ret

000015be <__divmodhi4>:
    15be:	97 fb       	bst	r25, 7
    15c0:	09 2e       	mov	r0, r25
    15c2:	07 26       	eor	r0, r23
    15c4:	0a d0       	rcall	.+20     	; 0x15da <__divmodhi4_neg1>
    15c6:	77 fd       	sbrc	r23, 7
    15c8:	04 d0       	rcall	.+8      	; 0x15d2 <__divmodhi4_neg2>
    15ca:	43 d0       	rcall	.+134    	; 0x1652 <__udivmodhi4>
    15cc:	06 d0       	rcall	.+12     	; 0x15da <__divmodhi4_neg1>
    15ce:	00 20       	and	r0, r0
    15d0:	1a f4       	brpl	.+6      	; 0x15d8 <__divmodhi4_exit>

000015d2 <__divmodhi4_neg2>:
    15d2:	70 95       	com	r23
    15d4:	61 95       	neg	r22
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255

000015d8 <__divmodhi4_exit>:
    15d8:	08 95       	ret

000015da <__divmodhi4_neg1>:
    15da:	f6 f7       	brtc	.-4      	; 0x15d8 <__divmodhi4_exit>
    15dc:	90 95       	com	r25
    15de:	81 95       	neg	r24
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	08 95       	ret

000015e4 <__prologue_saves__>:
    15e4:	2f 92       	push	r2
    15e6:	3f 92       	push	r3
    15e8:	4f 92       	push	r4
    15ea:	5f 92       	push	r5
    15ec:	6f 92       	push	r6
    15ee:	7f 92       	push	r7
    15f0:	8f 92       	push	r8
    15f2:	9f 92       	push	r9
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	cf 92       	push	r12
    15fa:	df 92       	push	r13
    15fc:	ef 92       	push	r14
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	ca 1b       	sub	r28, r26
    160e:	db 0b       	sbc	r29, r27
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	09 94       	ijmp

0000161c <__epilogue_restores__>:
    161c:	2a 88       	ldd	r2, Y+18	; 0x12
    161e:	39 88       	ldd	r3, Y+17	; 0x11
    1620:	48 88       	ldd	r4, Y+16	; 0x10
    1622:	5f 84       	ldd	r5, Y+15	; 0x0f
    1624:	6e 84       	ldd	r6, Y+14	; 0x0e
    1626:	7d 84       	ldd	r7, Y+13	; 0x0d
    1628:	8c 84       	ldd	r8, Y+12	; 0x0c
    162a:	9b 84       	ldd	r9, Y+11	; 0x0b
    162c:	aa 84       	ldd	r10, Y+10	; 0x0a
    162e:	b9 84       	ldd	r11, Y+9	; 0x09
    1630:	c8 84       	ldd	r12, Y+8	; 0x08
    1632:	df 80       	ldd	r13, Y+7	; 0x07
    1634:	ee 80       	ldd	r14, Y+6	; 0x06
    1636:	fd 80       	ldd	r15, Y+5	; 0x05
    1638:	0c 81       	ldd	r16, Y+4	; 0x04
    163a:	1b 81       	ldd	r17, Y+3	; 0x03
    163c:	aa 81       	ldd	r26, Y+2	; 0x02
    163e:	b9 81       	ldd	r27, Y+1	; 0x01
    1640:	ce 0f       	add	r28, r30
    1642:	d1 1d       	adc	r29, r1
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	ed 01       	movw	r28, r26
    1650:	08 95       	ret

00001652 <__udivmodhi4>:
    1652:	aa 1b       	sub	r26, r26
    1654:	bb 1b       	sub	r27, r27
    1656:	51 e1       	ldi	r21, 0x11	; 17
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <__udivmodhi4_ep>

0000165a <__udivmodhi4_loop>:
    165a:	aa 1f       	adc	r26, r26
    165c:	bb 1f       	adc	r27, r27
    165e:	a6 17       	cp	r26, r22
    1660:	b7 07       	cpc	r27, r23
    1662:	10 f0       	brcs	.+4      	; 0x1668 <__udivmodhi4_ep>
    1664:	a6 1b       	sub	r26, r22
    1666:	b7 0b       	sbc	r27, r23

00001668 <__udivmodhi4_ep>:
    1668:	88 1f       	adc	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	5a 95       	dec	r21
    166e:	a9 f7       	brne	.-22     	; 0x165a <__udivmodhi4_loop>
    1670:	80 95       	com	r24
    1672:	90 95       	com	r25
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	08 95       	ret

0000167a <strchr_P>:
    167a:	fc 01       	movw	r30, r24
    167c:	05 90       	lpm	r0, Z+
    167e:	06 16       	cp	r0, r22
    1680:	21 f0       	breq	.+8      	; 0x168a <strchr_P+0x10>
    1682:	00 20       	and	r0, r0
    1684:	d9 f7       	brne	.-10     	; 0x167c <strchr_P+0x2>
    1686:	c0 01       	movw	r24, r0
    1688:	08 95       	ret
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	cf 01       	movw	r24, r30
    168e:	08 95       	ret

00001690 <fputc>:
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	8c 01       	movw	r16, r24
    169a:	eb 01       	movw	r28, r22
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	81 ff       	sbrs	r24, 1
    16a0:	1b c0       	rjmp	.+54     	; 0x16d8 <fputc+0x48>
    16a2:	82 ff       	sbrs	r24, 2
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <fputc+0x30>
    16a6:	2e 81       	ldd	r18, Y+6	; 0x06
    16a8:	3f 81       	ldd	r19, Y+7	; 0x07
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	28 17       	cp	r18, r24
    16b0:	39 07       	cpc	r19, r25
    16b2:	64 f4       	brge	.+24     	; 0x16cc <fputc+0x3c>
    16b4:	e8 81       	ld	r30, Y
    16b6:	f9 81       	ldd	r31, Y+1	; 0x01
    16b8:	01 93       	st	Z+, r16
    16ba:	f9 83       	std	Y+1, r31	; 0x01
    16bc:	e8 83       	st	Y, r30
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <fputc+0x3c>
    16c0:	e8 85       	ldd	r30, Y+8	; 0x08
    16c2:	f9 85       	ldd	r31, Y+9	; 0x09
    16c4:	80 2f       	mov	r24, r16
    16c6:	09 95       	icall
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	31 f4       	brne	.+12     	; 0x16d8 <fputc+0x48>
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	9f 83       	std	Y+7, r25	; 0x07
    16d4:	8e 83       	std	Y+6, r24	; 0x06
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <fputc+0x4c>
    16d8:	0f ef       	ldi	r16, 0xFF	; 255
    16da:	1f ef       	ldi	r17, 0xFF	; 255
    16dc:	c8 01       	movw	r24, r16
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <__ultoa_invert>:
    16e8:	fa 01       	movw	r30, r20
    16ea:	aa 27       	eor	r26, r26
    16ec:	28 30       	cpi	r18, 0x08	; 8
    16ee:	61 f1       	breq	.+88     	; 0x1748 <__ultoa_invert+0x60>
    16f0:	20 31       	cpi	r18, 0x10	; 16
    16f2:	91 f1       	breq	.+100    	; 0x1758 <__ultoa_invert+0x70>
    16f4:	e8 94       	clt
    16f6:	6f 93       	push	r22
    16f8:	6e 7f       	andi	r22, 0xFE	; 254
    16fa:	6e 5f       	subi	r22, 0xFE	; 254
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	af 4f       	sbci	r26, 0xFF	; 255
    1704:	b1 e0       	ldi	r27, 0x01	; 1
    1706:	40 d0       	rcall	.+128    	; 0x1788 <__ultoa_invert+0xa0>
    1708:	b4 e0       	ldi	r27, 0x04	; 4
    170a:	3e d0       	rcall	.+124    	; 0x1788 <__ultoa_invert+0xa0>
    170c:	67 0f       	add	r22, r23
    170e:	78 1f       	adc	r23, r24
    1710:	89 1f       	adc	r24, r25
    1712:	9a 1f       	adc	r25, r26
    1714:	a1 1d       	adc	r26, r1
    1716:	68 0f       	add	r22, r24
    1718:	79 1f       	adc	r23, r25
    171a:	8a 1f       	adc	r24, r26
    171c:	91 1d       	adc	r25, r1
    171e:	a1 1d       	adc	r26, r1
    1720:	6a 0f       	add	r22, r26
    1722:	71 1d       	adc	r23, r1
    1724:	81 1d       	adc	r24, r1
    1726:	91 1d       	adc	r25, r1
    1728:	a1 1d       	adc	r26, r1
    172a:	22 d0       	rcall	.+68     	; 0x1770 <__ultoa_invert+0x88>
    172c:	09 f4       	brne	.+2      	; 0x1730 <__ultoa_invert+0x48>
    172e:	68 94       	set
    1730:	3f 91       	pop	r19
    1732:	06 2e       	mov	r0, r22
    1734:	00 0c       	add	r0, r0
    1736:	30 19       	sub	r19, r0
    1738:	00 0c       	add	r0, r0
    173a:	00 0c       	add	r0, r0
    173c:	30 19       	sub	r19, r0
    173e:	30 5d       	subi	r19, 0xD0	; 208
    1740:	31 93       	st	Z+, r19
    1742:	ce f6       	brtc	.-78     	; 0x16f6 <__ultoa_invert+0xe>
    1744:	cf 01       	movw	r24, r30
    1746:	08 95       	ret
    1748:	46 2f       	mov	r20, r22
    174a:	47 70       	andi	r20, 0x07	; 7
    174c:	40 5d       	subi	r20, 0xD0	; 208
    174e:	41 93       	st	Z+, r20
    1750:	b3 e0       	ldi	r27, 0x03	; 3
    1752:	0f d0       	rcall	.+30     	; 0x1772 <__ultoa_invert+0x8a>
    1754:	c9 f7       	brne	.-14     	; 0x1748 <__ultoa_invert+0x60>
    1756:	f6 cf       	rjmp	.-20     	; 0x1744 <__ultoa_invert+0x5c>
    1758:	46 2f       	mov	r20, r22
    175a:	4f 70       	andi	r20, 0x0F	; 15
    175c:	40 5d       	subi	r20, 0xD0	; 208
    175e:	4a 33       	cpi	r20, 0x3A	; 58
    1760:	18 f0       	brcs	.+6      	; 0x1768 <__ultoa_invert+0x80>
    1762:	49 5d       	subi	r20, 0xD9	; 217
    1764:	31 fd       	sbrc	r19, 1
    1766:	40 52       	subi	r20, 0x20	; 32
    1768:	41 93       	st	Z+, r20
    176a:	02 d0       	rcall	.+4      	; 0x1770 <__ultoa_invert+0x88>
    176c:	a9 f7       	brne	.-22     	; 0x1758 <__ultoa_invert+0x70>
    176e:	ea cf       	rjmp	.-44     	; 0x1744 <__ultoa_invert+0x5c>
    1770:	b4 e0       	ldi	r27, 0x04	; 4
    1772:	a6 95       	lsr	r26
    1774:	97 95       	ror	r25
    1776:	87 95       	ror	r24
    1778:	77 95       	ror	r23
    177a:	67 95       	ror	r22
    177c:	ba 95       	dec	r27
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__ultoa_invert+0x8a>
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	61 05       	cpc	r22, r1
    1784:	71 05       	cpc	r23, r1
    1786:	08 95       	ret
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
    178c:	0a 2e       	mov	r0, r26
    178e:	06 94       	lsr	r0
    1790:	57 95       	ror	r21
    1792:	47 95       	ror	r20
    1794:	37 95       	ror	r19
    1796:	27 95       	ror	r18
    1798:	ba 95       	dec	r27
    179a:	c9 f7       	brne	.-14     	; 0x178e <__ultoa_invert+0xa6>
    179c:	62 0f       	add	r22, r18
    179e:	73 1f       	adc	r23, r19
    17a0:	84 1f       	adc	r24, r20
    17a2:	95 1f       	adc	r25, r21
    17a4:	a0 1d       	adc	r26, r0
    17a6:	08 95       	ret

000017a8 <_exit>:
    17a8:	f8 94       	cli

000017aa <__stop_program>:
    17aa:	ff cf       	rjmp	.-2      	; 0x17aa <__stop_program>
