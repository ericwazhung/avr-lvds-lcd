
_BUILD/LCDdirectLVDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001a4a  00001ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000126  0080006e  0080006e  00001aec  2**0
                  ALLOC
  3 .stab         00004524  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021a7  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c3       	rjmp	.+1738   	; 0x6cc <__ctors_end>
       2:	7f c3       	rjmp	.+1790   	; 0x702 <__bad_interrupt>
       4:	7e c3       	rjmp	.+1788   	; 0x702 <__bad_interrupt>
       6:	7d c3       	rjmp	.+1786   	; 0x702 <__bad_interrupt>
       8:	7c c3       	rjmp	.+1784   	; 0x702 <__bad_interrupt>
       a:	7b c3       	rjmp	.+1782   	; 0x702 <__bad_interrupt>
       c:	7a c3       	rjmp	.+1780   	; 0x702 <__bad_interrupt>
       e:	79 c3       	rjmp	.+1778   	; 0x702 <__bad_interrupt>
      10:	78 c3       	rjmp	.+1776   	; 0x702 <__bad_interrupt>
      12:	77 c3       	rjmp	.+1774   	; 0x702 <__bad_interrupt>
      14:	76 c3       	rjmp	.+1772   	; 0x702 <__bad_interrupt>
      16:	75 c3       	rjmp	.+1770   	; 0x702 <__bad_interrupt>
      18:	74 c3       	rjmp	.+1768   	; 0x702 <__bad_interrupt>
      1a:	73 c3       	rjmp	.+1766   	; 0x702 <__bad_interrupt>
      1c:	c9 c8       	rjmp	.-3694   	; 0xfffff1b0 <__eeprom_end+0xff7ef1b0>
      1e:	71 c3       	rjmp	.+1762   	; 0x702 <__bad_interrupt>
      20:	70 c3       	rjmp	.+1760   	; 0x702 <__bad_interrupt>
      22:	6f c3       	rjmp	.+1758   	; 0x702 <__bad_interrupt>
      24:	6e c3       	rjmp	.+1756   	; 0x702 <__bad_interrupt>

00000026 <sineTable>:
      26:	00 00 92 01 24 03 b6 04 48 06 d9 07 6a 09 fb 0a     ....$...H...j...
      36:	8c 0c 1c 0e ab 0f 3a 11 c8 12 55 14 e2 15 6e 17     ......:...U...n.
      46:	f9 18 82 1a 0b 1c 93 1d 1a 1f 9f 20 23 22 a6 23     ........... #".#
      56:	28 25 a8 26 26 28 a3 29 1f 2b 99 2c 11 2e 87 2f     (%.&&(.).+.,.../
      66:	fb 30 6e 32 df 33 4d 35 ba 36 24 38 8c 39 f2 3a     .0n2.3M5.6$8.9.:
      76:	56 3c b8 3d 17 3f 73 40 ce 41 25 43 7a 44 cd 45     V<.=.?s@.A%CzD.E
      86:	1c 47 69 48 b4 49 fb 4a 3f 4c 81 4d bf 4e fb 4f     .GiH.I.J?L.M.N.O
      96:	33 51 68 52 9b 53 c9 54 f5 55 1d 57 42 58 64 59     3QhR.S.T.U.WBXdY
      a6:	82 5a 9c 5b b3 5c c7 5d d7 5e e3 5f eb 60 f0 61     .Z.[.\.].^._.`.a
      b6:	f1 62 ee 63 e8 64 dd 65 cf 66 bc 67 a6 68 8b 69     .b.c.d.e.f.g.h.i
      c6:	6d 6a 4a 6b 23 6c f8 6c c9 6d 96 6e 5e 6f 22 70     mjJk#l.l.m.n^o"p
      d6:	e2 70 9d 71 54 72 07 73 b5 73 5f 74 04 75 a5 75     .p.qTr.s.s_t.u.u
      e6:	41 76 d8 76 6b 77 fa 77 84 78 09 79 89 79 05 7a     Av.vkw.w.x.y.y.z
      f6:	7c 7a ee 7a 5c 7b c5 7b 29 7c 88 7c e3 7c 39 7d     |z.z\{.{)|.|.|9}
     106:	89 7d d5 7d 1d 7e 5f 7e 9c 7e d5 7e 09 7f 37 7f     .}.}.~_~.~.~..7.
     116:	61 7f 86 7f a6 7f c1 7f d8 7f e9 7f f5 7f fd 7f     a...............
     126:	ff 7f                                               ..

00000128 <header>:
     128:	4c 43 44 64 69 72 65 63 74 4c 56 44 53 35 39 20     LCDdirectLVDS59 
     138:	32 30 31 33 2d 31 32 2d 31 34 20 30 37 3a 30 34     2013-12-14 07:04
     148:	3a 35 39 00                                         :59.

0000014c <characters>:
     14c:	00 0c 36 36 0c 00 1c 06 18 06 00 00 00 00 00 60     ..66...........`
     15c:	1e 0c 1e 1e 38 3f 1c 3f 1e 1e 00 00 18 00 06 1e     ....8?.?........
     16c:	3e 0c 3f 3c 3f 7f 7f 3c 33 1e 78 67 0f 63 63 1c     >.?<?..<3.xg.cc.
     17c:	3f 1e 3f 1e 3f 33 33 63 63 33 7f 1e 03 1e 08 00     ?.?.?33cc3......
     18c:	0c 00 07 00 38 00 1c 00 07 0c 18 07 0e 00 00 00     ....8...........
     19c:	00 00 00 00 08 00 00 00 00 00 00 38 18 07 6e 0e     ...........8..n.
     1ac:	00 1e 36 36 3e 63 36 06 0c 0c 66 0c 00 00 00 30     ..66>c6...f....0
     1bc:	33 0f 33 33 3c 03 06 33 33 33 00 00 0c 00 0c 33     3.33<..333.....3
     1cc:	63 1e 66 66 36 46 46 66 33 0c 30 66 06 77 67 36     c.ff6FFf3.0f.wg6
     1dc:	66 33 66 33 2d 33 33 63 63 33 33 06 06 18 1c 00     f3f3-33cc33.....
     1ec:	0c 00 06 00 30 00 36 00 06 00 00 06 0c 00 00 00     ....0.6.........
     1fc:	00 00 00 00 0c 00 00 00 00 00 00 0c 18 0c 3b 13     ..............;.
     20c:	00 1e 36 7f 03 33 1c 03 06 18 3c 0c 00 00 00 18     ..6..3....<.....
     21c:	3b 0c 30 30 36 1f 03 30 33 33 0c 0c 06 3f 18 30     ;.006..033...?.0
     22c:	7b 33 66 03 66 16 16 03 33 0c 30 36 06 7f 6f 63     {3f.f...3.06..oc
     23c:	66 33 66 07 0c 33 33 63 36 33 19 06 0c 18 36 00     f3f..33c63....6.
     24c:	18 1e 3e 1e 30 1e 06 6e 36 0e 1e 66 0c 37 1f 1e     ..>.0..n6..f.7..
     25c:	3b 6e 1b 3e 3e 33 33 63 63 33 3f 0c 18 0c 00 39     ;n.>>33cc3?....9
     26c:	00 0c 00 36 1e 18 6e 00 06 18 ff 3f 00 3f 00 0c     ...6..n....?.?..
     27c:	3f 0c 1c 1c 33 30 1f 18 1e 3e 0c 0c 03 00 30 18     ?...30...>....0.
     28c:	7b 33 3e 03 66 1e 1e 03 3f 0c 30 1e 06 6b 7b 63     {3>.f...?.0..k{c
     29c:	3e 33 3e 1c 0c 33 33 6b 1c 1e 0c 06 18 18 63 00     >3>..33k......c.
     2ac:	00 30 66 33 3e 33 0f 33 6e 0c 18 36 0c 7f 33 33     .0f3>3.3n..6..33
     2bc:	66 33 36 03 0c 33 33 63 36 33 19 07 00 38 00 69     f36..33c63...8.i
     2cc:	00 0c 00 7f 30 0c 3b 00 06 18 3c 0c 00 00 00 06     ....0.;...<.....
     2dc:	37 0c 06 30 7f 30 33 0c 33 30 00 00 06 3f 18 0c     7..0.03.30...?..
     2ec:	7b 3f 66 03 66 16 16 73 33 0c 33 36 46 63 73 63     {?f.f..s3.36Fcsc
     2fc:	06 3b 1e 38 0c 33 33 7f 36 0c 46 06 30 18 00 00     .;.8.33.6.F.0...
     30c:	00 3e 66 03 33 3f 06 33 66 0c 18 1e 0c 6b 33 33     .>f.3?.3f....k33
     31c:	66 33 36 1e 0c 33 33 6b 1c 33 0c 0c 18 0c 00 0e     f36..33k.3......
     32c:	00 00 00 36 1f 66 33 00 0c 0c 66 0c 0e 00 0c 03     ...6.f3...f.....
     33c:	33 0c 33 33 30 33 33 06 33 18 0c 0e 0c 00 0c 00     3.33033.3.......
     34c:	03 33 66 66 36 46 06 66 33 0c 33 66 66 63 63 36     .3ff6F.f3.3ffcc6
     35c:	06 1e 36 33 0c 33 1e 77 63 0c 63 06 60 18 00 00     ..63.3.wc.c.`...
     36c:	00 33 66 33 33 03 06 3e 66 0c 18 36 0c 63 33 33     .3f33..>f..6.c33
     37c:	3e 3e 06 30 2c 33 1e 7f 36 3e 26 0c 18 0c 00 f3     >>.0,3..6>&.....
     38c:	00 0c 00 36 0c 63 6e 00 18 06 00 00 0c 00 0c 01     ...6.cn.........
     39c:	1e 3f 3f 1e 30 1e 1e 06 1e 0e 0c 0c 18 00 06 0c     .??.0...........
     3ac:	1e 33 3f 3c 3f 7f 0f 7c 33 1e 1e 67 7f 63 63 1c     .3?<?..|3..g.cc.
     3bc:	0f 38 67 1e 1e 3f 0c 63 63 1e 7f 1e 40 1e 00 00     .8g..?.cc...@...
     3cc:	00 6e 3d 1e 6e 1e 0f 30 67 1e 1b 67 1e 63 33 1e     .n=.n..0g..g.c3.
     3dc:	06 30 0f 1f 18 6e 0c 36 63 30 3f 38 18 07 00 46     .0...n.6c0?8...F
     3ec:	00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00     ................
     3fc:	00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00     ................
     40c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     41c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
     42c:	00 00 00 00 00 00 00 1f 00 00 0e 00 00 00 00 00     ................
     43c:	0f 78 00 00 00 00 00 00 00 1f 00 00 00 00 00 f4     .x..............

0000044c <pgm_tetPiece>:
     44c:	f0 00 22 22 f0 00 22 22 60 0c 64 02 60 0c 64 02     ..""..""`.d.`.d.
     45c:	c0 06 40 8c c0 06 40 8c e0 04 c4 04 e4 00 64 04     ..@...@.......d.
     46c:	e0 08 4c 04 e2 00 44 06 e0 02 44 0c e8 00 46 04     ..L...D...D...F.
     47c:	60 06 60 06 60 06 60 06                             `.`.`.`.

00000484 <pgm_image1>:
     484:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................
     494:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     4a4:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     4b4:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     4c4:	c0 00 0f 0f 0f 00 0f 0f 0f 0f 00 0f 0f 0f 00 c0     ................
     4d4:	00 0f 0f 0f 00 00 00 0f 0f 00 00 00 0f 0f 0f 00     ................
     4e4:	00 0f 0f 0f 0f 00 0f 0f 0f 0f 00 0f 0f 0f 0f 00     ................
     4f4:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     504:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     514:	00 0f 0f 00 00 0f 0f 0f 0f 0f 0f 00 00 0f 0f 00     ................
     524:	00 0f 0f 0f 00 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     534:	c0 00 0f 0f 0f 00 00 00 00 00 00 0f 0f 0f 00 c0     ................
     544:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     554:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     564:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     574:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................

00000584 <pgm_image2>:
     584:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................
     594:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     5a4:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     5b4:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     5c4:	c0 00 0f 0f 0f 00 0f 0f 0f 0f 0f 0f 0f 0f 00 c0     ................
     5d4:	00 0f 0f 0f 00 00 00 0f 0f 00 0f 0f 0f 0f 0f 00     ................
     5e4:	00 0f 0f 0f 0f 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     5f4:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     604:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     614:	00 0f 0f 00 00 0f 0f 0f 0f 0f 0f 00 00 0f 0f 00     ................
     624:	00 0f 0f 0f 00 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     634:	c0 00 0f 0f 0f 00 00 00 00 00 00 0f 0f 0f 00 c0     ................
     644:	c0 00 00 0f 0f 0f 00 03 00 03 00 0f 0f 00 00 c0     ................
     654:	c0 c0 00 00 0f 0f 00 03 03 03 00 0f 00 00 c0 c0     ................
     664:	c0 c0 c0 00 00 0f 0f 00 00 00 0f 00 00 c0 c0 c0     ................
     674:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................

00000684 <__c.2313>:
     684:	20 54 68 65 20 51 75 69 63 6b 20 42 72 6f 77 6e      The Quick Brown
     694:	20 46 6f 78 20 4a 75 6d 70 65 64 20 4f 76 65 72      Fox Jumped Over
     6a4:	20 54 68 65 20 4c 61 7a 79 20 44 6f 67 21 20 7f      The Lazy Dog! .
     6b4:	00                                                  .

000006b5 <__c.1838>:
     6b5:	45 46 47 65 66 67 00                                EFGefg.

000006bc <__c.1832>:
     6bc:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000006cc <__ctors_end>:
     6cc:	11 24       	eor	r1, r1
     6ce:	1f be       	out	0x3f, r1	; 63
     6d0:	cf e5       	ldi	r28, 0x5F	; 95
     6d2:	d2 e0       	ldi	r29, 0x02	; 2
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	cd bf       	out	0x3d, r28	; 61

000006d8 <__do_copy_data>:
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	a0 e6       	ldi	r26, 0x60	; 96
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ea e4       	ldi	r30, 0x4A	; 74
     6e0:	fa e1       	ldi	r31, 0x1A	; 26
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <__do_copy_data+0x10>
     6e4:	05 90       	lpm	r0, Z+
     6e6:	0d 92       	st	X+, r0
     6e8:	ae 36       	cpi	r26, 0x6E	; 110
     6ea:	b1 07       	cpc	r27, r17
     6ec:	d9 f7       	brne	.-10     	; 0x6e4 <__do_copy_data+0xc>

000006ee <__do_clear_bss>:
     6ee:	11 e0       	ldi	r17, 0x01	; 1
     6f0:	ae e6       	ldi	r26, 0x6E	; 110
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <.do_clear_bss_start>

000006f6 <.do_clear_bss_loop>:
     6f6:	1d 92       	st	X+, r1

000006f8 <.do_clear_bss_start>:
     6f8:	a4 39       	cpi	r26, 0x94	; 148
     6fa:	b1 07       	cpc	r27, r17
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <.do_clear_bss_loop>
     6fe:	48 d5       	rcall	.+2704   	; 0x1190 <main>
     700:	a2 c9       	rjmp	.-3260   	; 0xfffffa46 <__eeprom_end+0xff7efa46>

00000702 <__bad_interrupt>:
     702:	7e cc       	rjmp	.-1796   	; 0x0 <__vectors>

00000704 <adc_select>:
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     704:	97 b1       	in	r25, 0x07	; 7
     706:	8f 71       	andi	r24, 0x1F	; 31
     708:	90 7e       	andi	r25, 0xE0	; 224
     70a:	89 2b       	or	r24, r25
     70c:	87 b9       	out	0x07, r24	; 7
}
     70e:	08 95       	ret

00000710 <adc_startConversion>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     710:	86 b1       	in	r24, 0x06	; 6

//Return TRUE on error (if there was a previous conversion in progress...)
uint8_t adc_startConversion(void)
{
	//Check if a conversion is already in progress...
	if(adc_isBusy())
     712:	80 74       	andi	r24, 0x40	; 64
     714:	11 f0       	breq	.+4      	; 0x71a <adc_startConversion+0xa>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	08 95       	ret
	// until a conversion is started. Once the conversion starts, the channel and 
	// reference selection is locked to ensure a sufficient sampling time for the ADC."
	
	//"In Single Conversion mode, write this bit to one to start each conversion."
	// BEWARE: calling this will CLEAR the conversion-complete indicator
	setbit(ADSC, ADCSRA);
     71a:	36 9a       	sbi	0x06, 6	; 6
     71c:	80 e0       	ldi	r24, 0x00	; 0
	return FALSE;
}
     71e:	08 95       	ret

00000720 <adc_init>:
	// (i.e. a 3.3V voltage regulator output)
	//Technically, these values are reset-defaults, but just make sure
	//!!!According to attiny861, these values set VCC as the voltage ref
	//   NOT an external reference. So the above note seems odd...
	// This IS what I want on the Tiny861 threePinIDer...
	clrbit(REFS0, ADMUX);
     720:	3e 98       	cbi	0x07, 6	; 7
	clrbit(REFS1, ADMUX);
     722:	3f 98       	cbi	0x07, 7	; 7
	
	//Use right-adjusted output
	// so values read from the 2-byte register are:
	//	8-bits in the Low reg, and 2 in the High reg
	clrbit(ADLAR, ADMUX);
     724:	3d 98       	cbi	0x07, 5	; 7

	//Enable the ADC
	// (see description for noise cancelling techniques)
	setbit(ADEN, ADCSRA);
     726:	37 9a       	sbi	0x06, 7	; 6
	
	//Don't use Auto Triggering
	// (@@@ could use a timer, etc.)
	clrbit(ADATE, ADCSRA);
     728:	35 98       	cbi	0x06, 5	; 6
	// "ADIF is cleared by writing a logical one to the flag."
	// " BEWARE that if doing a Read-Modify-Write on ADCSRA, a pending interrupt can be disabled. "
	//   because the flag may be 1 when read, and re-writing 1 clears it.
	//   ???could get around this by using a special set/clrbit instruction which would always write 0
	//   to this bit...
	setbit(ADIF, ADCSRA);
     72a:	34 9a       	sbi	0x06, 4	; 6
	
	//make sure the interrupt is not enabled...
	clrbit(ADIE, ADCSRA);
     72c:	33 98       	cbi	0x06, 3	; 6
}

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     72e:	86 b1       	in	r24, 0x06	; 6
     730:	87 60       	ori	r24, 0x07	; 7
     732:	86 b9       	out	0x06, r24	; 6
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     734:	87 b1       	in	r24, 0x07	; 7
     736:	8f 61       	ori	r24, 0x1F	; 31
     738:	87 b9       	out	0x07, r24	; 7
	//Start a conversion so it will be initialized for the next...
	//"The first conversion after ADSC has been written 
	// after the ADC has been enabled ... 
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();
     73a:	ea df       	rcall	.-44     	; 0x710 <adc_startConversion>
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     73c:	86 b1       	in	r24, 0x06	; 6
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();

	//Wait for the initialization to complete for lockstepping...
	while(adc_isBusy())
     73e:	80 74       	andi	r24, 0x40	; 64
     740:	e9 f7       	brne	.-6      	; 0x73c <adc_init+0x1c>
	{}
}
     742:	08 95       	ret

00000744 <adc_getValue>:
//Return the last value read by the ADC
// check if adc_isBusy is true before reading, in lockstep...
// Since ADLAR is cleared, it will be the low ten bits 
uint16_t adc_getValue(void)
{
	return ADC;
     744:	24 b1       	in	r18, 0x04	; 4
     746:	35 b1       	in	r19, 0x05	; 5
	//reading both values takes longer and some other things mentioned in the manual
	// (i.e. it might be more efficient to only read one byte if acceptable)
	// unless only reading ADCH: "ADCL must be read first, then ADCH"
	//!!! Might want to verify this occurs properly in the assembly code
	
}
     748:	c9 01       	movw	r24, r18
     74a:	08 95       	ret

0000074c <adc_isBusy>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     74c:	86 b1       	in	r24, 0x06	; 6
     74e:	82 95       	swap	r24
     750:	86 95       	lsr	r24
     752:	86 95       	lsr	r24
}
     754:	81 70       	andi	r24, 0x01	; 1
     756:	08 95       	ret

00000758 <adc_setPrescaler>:

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     758:	96 b1       	in	r25, 0x06	; 6
     75a:	87 70       	andi	r24, 0x07	; 7
     75c:	98 7f       	andi	r25, 0xF8	; 248
     75e:	89 2b       	or	r24, r25
     760:	86 b9       	out	0x06, r24	; 6
}
     762:	08 95       	ret

00000764 <adc_takeInput>:
	uint8_t bitNum = inputNum;

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
     764:	83 30       	cpi	r24, 0x03	; 3
     766:	80 f0       	brcs	.+32     	; 0x788 <adc_takeInput+0x24>

	//Analog inputs 7-10 are selected in DIDR1 and shifted...
	// 7 is bit 4, 10 is bit 7...
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
     768:	87 30       	cpi	r24, 0x07	; 7
     76a:	10 f4       	brcc	.+4      	; 0x770 <adc_takeInput+0xc>

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
		bitNum = inputNum + 1;
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	0c c0       	rjmp	.+24     	; 0x788 <adc_takeInput+0x24>
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
	{
		bitNum = inputNum - 3;
		setbit(bitNum, DIDR1);
     770:	92 b1       	in	r25, 0x02	; 2
     772:	83 50       	subi	r24, 0x03	; 3
     774:	21 e0       	ldi	r18, 0x01	; 1
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	02 c0       	rjmp	.+4      	; 0x77e <adc_takeInput+0x1a>
     77a:	22 0f       	add	r18, r18
     77c:	33 1f       	adc	r19, r19
     77e:	8a 95       	dec	r24
     780:	e2 f7       	brpl	.-8      	; 0x77a <adc_takeInput+0x16>
     782:	92 2b       	or	r25, r18
     784:	92 b9       	out	0x02, r25	; 2
		return;
     786:	08 95       	ret
	}
#endif

	if(bitNum <= 7)
		setbit(bitNum, DIDR0);
     788:	91 b1       	in	r25, 0x01	; 1
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	02 c0       	rjmp	.+4      	; 0x794 <adc_takeInput+0x30>
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	8a 95       	dec	r24
     796:	e2 f7       	brpl	.-8      	; 0x790 <adc_takeInput+0x2c>
     798:	92 2b       	or	r25, r18
     79a:	91 b9       	out	0x01, r25	; 1
     79c:	08 95       	ret

0000079e <timer_selectDivisor>:
	uint8_t csbits;
	
  #if defined(CSOBS)
	if(timerNum == 0 || timerNum == 1 || timerNum == 3)//IS_CSTYP(timerNum) || IS_CSOBS(timerNum))
  #else
	if(IS_CSTYP(timerNum))
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	28 f5       	brcc	.+74     	; 0x7ec <timer_selectDivisor+0x4e>
  #endif
	{
		switch(clockDiv)
     7a2:	66 30       	cpi	r22, 0x06	; 6
     7a4:	81 f0       	breq	.+32     	; 0x7c6 <timer_selectDivisor+0x28>
     7a6:	67 30       	cpi	r22, 0x07	; 7
     7a8:	28 f4       	brcc	.+10     	; 0x7b4 <timer_selectDivisor+0x16>
     7aa:	66 23       	and	r22, r22
     7ac:	51 f0       	breq	.+20     	; 0x7c2 <timer_selectDivisor+0x24>
     7ae:	63 30       	cpi	r22, 0x03	; 3
     7b0:	e9 f4       	brne	.+58     	; 0x7ec <timer_selectDivisor+0x4e>
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <timer_selectDivisor+0x20>
     7b4:	68 30       	cpi	r22, 0x08	; 8
     7b6:	49 f0       	breq	.+18     	; 0x7ca <timer_selectDivisor+0x2c>
     7b8:	6a 30       	cpi	r22, 0x0A	; 10
     7ba:	c1 f4       	brne	.+48     	; 0x7ec <timer_selectDivisor+0x4e>
     7bc:	08 c0       	rjmp	.+16     	; 0x7ce <timer_selectDivisor+0x30>
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <timer_selectDivisor+0x32>
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <timer_selectDivisor+0x32>
     7c6:	93 e0       	ldi	r25, 0x03	; 3
			case CLKDIV8:
				csbits = CSTYP_DIV8;
				break;
			case CLKDIV64:
				csbits = CSTYP_DIV64;	
				break;
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <timer_selectDivisor+0x32>
     7ca:	94 e0       	ldi	r25, 0x04	; 4
			case CLKDIV256:
				csbits = CSTYP_DIV256;	
				break;
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <timer_selectDivisor+0x32>
     7ce:	95 e0       	ldi	r25, 0x05	; 5
     7d0:	97 70       	andi	r25, 0x07	; 7
	}
  #endif
	else 
		return 1;	

	switch(timerNum)
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	29 f0       	breq	.+10     	; 0x7e0 <timer_selectDivisor+0x42>
	{
		//Assume Timer0 and Timer1 exist (see setWGM)
		case 0:
			writeMasked(csbits, CSMASK, T0_CSReg);
     7d6:	83 b7       	in	r24, 0x33	; 51
     7d8:	88 7f       	andi	r24, 0xF8	; 248
     7da:	89 2b       	or	r24, r25
     7dc:	83 bf       	out	0x33, r24	; 51
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <timer_selectDivisor+0x4a>
			break;
		case 1:
			writeMasked(csbits, CSMASK, T1_CSReg);
     7e0:	8f b5       	in	r24, 0x2f	; 47
     7e2:	88 7f       	andi	r24, 0xF8	; 248
     7e4:	89 2b       	or	r24, r25
     7e6:	8f bd       	out	0x2f, r24	; 47
     7e8:	80 e0       	ldi	r24, 0x00	; 0
			break;
     7ea:	08 95       	ret
     7ec:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     7ee:	08 95       	ret

000007f0 <timer_setWGM>:
//	wgmLb *= 0xff;
//	wgmHb *= 0xff;

	//Make sure the chosen WGM will be written to the WGM bits properly, as implemented below...
	// Only modes 0-3 are implemented...
	if(wgm > 0x03)
     7f0:	64 30       	cpi	r22, 0x04	; 4
     7f2:	f0 f4       	brcc	.+60     	; 0x830 <timer_setWGM+0x40>
		return 1;
	
	switch(timerNum)
     7f4:	88 23       	and	r24, r24
     7f6:	19 f0       	breq	.+6      	; 0x7fe <timer_setWGM+0xe>
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	d1 f4       	brne	.+52     	; 0x830 <timer_setWGM+0x40>
     7fc:	0a c0       	rjmp	.+20     	; 0x812 <timer_setWGM+0x22>
#ifdef _AVR_IOTNx61_H_
			//TinyX61s' Timer0 is an exception...
			// It only has WGM00, which serves the same functionality as
			// most others' WGM01 (when their WGM00 == 0)
			// (No PWM)
			if(wgmLb)
     7fe:	86 2f       	mov	r24, r22
     800:	81 70       	andi	r24, 0x01	; 1
     802:	b1 f4       	brne	.+44     	; 0x830 <timer_setWGM+0x40>
				return 1;

			//Whatever .stab is, this single change reduces it by 36Bytes
			writebit(WGM00, T0_WGMReg, wgmHb);
     804:	62 70       	andi	r22, 0x02	; 2
     806:	11 f0       	breq	.+4      	; 0x80c <timer_setWGM+0x1c>
     808:	a8 9a       	sbi	0x15, 0	; 21
     80a:	01 c0       	rjmp	.+2      	; 0x80e <timer_setWGM+0x1e>
     80c:	a8 98       	cbi	0x15, 0	; 21
     80e:	85 b3       	in	r24, 0x15	; 21
     810:	0d c0       	rjmp	.+26     	; 0x82c <timer_setWGM+0x3c>
     812:	61 30       	cpi	r22, 0x01	; 1
     814:	19 f4       	brne	.+6      	; 0x81c <timer_setWGM+0x2c>
					wgmHb = 0;
					break;
			}

			//NOTE: TinyX61s' WGM bits are both in TCCR1D (very unusual)
			writebit(WGM10, TCCR1D, wgmLb);
     816:	86 b5       	in	r24, 0x26	; 38
     818:	81 60       	ori	r24, 0x01	; 1
     81a:	02 c0       	rjmp	.+4      	; 0x820 <timer_setWGM+0x30>
     81c:	86 b5       	in	r24, 0x26	; 38
     81e:	8e 7f       	andi	r24, 0xFE	; 254
     820:	86 bd       	out	0x26, r24	; 38
     822:	86 b5       	in	r24, 0x26	; 38
			writebit(WGM11, TCCR1D, wgmHb);
     824:	86 b5       	in	r24, 0x26	; 38
     826:	8d 7f       	andi	r24, 0xFD	; 253
     828:	86 bd       	out	0x26, r24	; 38
     82a:	86 b5       	in	r24, 0x26	; 38
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	08 95       	ret
     830:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     832:	08 95       	ret

00000834 <timer_init>:

//Roughly equivalent to the ol' Init_timerX(clkDiv, wgm)
//Return 0 if no error...
#if (!defined(TIMER_INIT_UNUSED) || !TIMER_INIT_UNUSED)
uint8_t timer_init(uint8_t timerNum, uint8_t clockDiv, uint8_t wgm)
{
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	18 2f       	mov	r17, r24
     83a:	06 2f       	mov	r16, r22
	//set the waveform mode
	ERR_HANDLE_NUM(1,				\
     83c:	64 2f       	mov	r22, r20
     83e:	d8 df       	rcall	.-80     	; 0x7f0 <timer_setWGM>
     840:	88 23       	and	r24, r24
     842:	11 f0       	breq	.+4      	; 0x848 <timer_init+0x14>
     844:	80 61       	ori	r24, 0x10	; 16
     846:	05 c0       	rjmp	.+10     	; 0x852 <timer_init+0x1e>
		timer_setWGM(timerNum, wgm)	);

	//select the clock
	ERR_HANDLE_NUM(2,							\
     848:	81 2f       	mov	r24, r17
     84a:	60 2f       	mov	r22, r16
     84c:	a8 df       	rcall	.-176    	; 0x79e <timer_selectDivisor>
     84e:	81 11       	cpse	r24, r1
     850:	80 62       	ori	r24, 0x20	; 32
		timer_selectDivisor(timerNum, clockDiv)	);
		
	return 0;
}
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	08 95       	ret

00000858 <timer_compareMatchIntSetup>:
uint8_t timer_compareMatchIntSetup(uint8_t timerNum, uint8_t outputChannel,\
	  												uint8_t enable)
{
	uint8_t channelNum;

	if(timerNum >= MAXTIMERS)
     858:	84 30       	cpi	r24, 0x04	; 4
     85a:	10 f0       	brcs	.+4      	; 0x860 <timer_compareMatchIntSetup+0x8>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	08 95       	ret
		return 1;

	if(outputChannel >= 2) //MAXCHANNELSPERTIMER)
     860:	62 30       	cpi	r22, 0x02	; 2
     862:	10 f0       	brcs	.+4      	; 0x868 <timer_compareMatchIntSetup+0x10>
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	08 95       	ret
     868:	44 23       	and	r20, r20
     86a:	11 f0       	breq	.+4      	; 0x870 <timer_compareMatchIntSetup+0x18>
     86c:	41 e0       	ldi	r20, 0x01	; 1
	channelNum = (timerNum<<4) + outputChannel;

	//Don't clear interrupts before disabling this one, or that defeats the purpose!
	// But do clear so we don't get unexpected overflows on init
	if(enable)
		cli();
     86e:	f8 94       	cli
	
	switch(channelNum)
     870:	82 95       	swap	r24
     872:	80 7f       	andi	r24, 0xF0	; 240
     874:	86 0f       	add	r24, r22
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	a1 f0       	breq	.+40     	; 0x8a2 <timer_compareMatchIntSetup+0x4a>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	30 f0       	brcs	.+12     	; 0x88a <timer_compareMatchIntSetup+0x32>
     87e:	80 31       	cpi	r24, 0x10	; 16
     880:	e1 f0       	breq	.+56     	; 0x8ba <timer_compareMatchIntSetup+0x62>
     882:	81 31       	cpi	r24, 0x11	; 17
     884:	31 f1       	breq	.+76     	; 0x8d2 <timer_compareMatchIntSetup+0x7a>
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	08 95       	ret
			break;
	   #endif
	   #if defined(OCIE0A)
		case 0x00:
//			setbit(OCIE0A, T0_TIMSK);
			writebit(OCIE0A, T0_TIMSK, enable);
     88a:	44 23       	and	r20, r20
     88c:	19 f0       	breq	.+6      	; 0x894 <timer_compareMatchIntSetup+0x3c>
     88e:	89 b7       	in	r24, 0x39	; 57
     890:	80 61       	ori	r24, 0x10	; 16
     892:	02 c0       	rjmp	.+4      	; 0x898 <timer_compareMatchIntSetup+0x40>
     894:	89 b7       	in	r24, 0x39	; 57
     896:	8f 7e       	andi	r24, 0xEF	; 239
     898:	89 bf       	out	0x39, r24	; 57
     89a:	89 b7       	in	r24, 0x39	; 57
			// My OCD bit me in the ass, this was set to TIMSK by mistake(?)
			setbit(OCF0A, T0_TIFR);
     89c:	88 b7       	in	r24, 0x38	; 56
     89e:	80 61       	ori	r24, 0x10	; 16
     8a0:	23 c0       	rjmp	.+70     	; 0x8e8 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE0B)
		case 0x01:
//			setbit(OCIE0B, T0_TIMSK);
			writebit(OCIE0B, T0_TIMSK, enable);
     8a2:	44 23       	and	r20, r20
     8a4:	19 f0       	breq	.+6      	; 0x8ac <timer_compareMatchIntSetup+0x54>
     8a6:	89 b7       	in	r24, 0x39	; 57
     8a8:	88 60       	ori	r24, 0x08	; 8
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <timer_compareMatchIntSetup+0x58>
     8ac:	89 b7       	in	r24, 0x39	; 57
     8ae:	87 7f       	andi	r24, 0xF7	; 247
     8b0:	89 bf       	out	0x39, r24	; 57
     8b2:	89 b7       	in	r24, 0x39	; 57
			// As was this...
			setbit(OCF0B, T0_TIFR);
     8b4:	88 b7       	in	r24, 0x38	; 56
     8b6:	88 60       	ori	r24, 0x08	; 8
     8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1A)
		case 0x10:
//			setbit(OCIE1A, T1_TIMSK);
			writebit(OCIE1A, T1_TIMSK, enable);
     8ba:	44 23       	and	r20, r20
     8bc:	19 f0       	breq	.+6      	; 0x8c4 <timer_compareMatchIntSetup+0x6c>
     8be:	89 b7       	in	r24, 0x39	; 57
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <timer_compareMatchIntSetup+0x70>
     8c4:	89 b7       	in	r24, 0x39	; 57
     8c6:	8f 7b       	andi	r24, 0xBF	; 191
     8c8:	89 bf       	out	0x39, r24	; 57
     8ca:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1A, T1_TIFR);
     8cc:	88 b7       	in	r24, 0x38	; 56
     8ce:	80 64       	ori	r24, 0x40	; 64
     8d0:	0b c0       	rjmp	.+22     	; 0x8e8 <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1B)
		case 0x11:
//			setbit(OCIE1B, T1_TIMSK);
			writebit(OCIE1B, T1_TIMSK, enable);
     8d2:	44 23       	and	r20, r20
     8d4:	19 f0       	breq	.+6      	; 0x8dc <timer_compareMatchIntSetup+0x84>
     8d6:	89 b7       	in	r24, 0x39	; 57
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <timer_compareMatchIntSetup+0x88>
     8dc:	89 b7       	in	r24, 0x39	; 57
     8de:	8f 7d       	andi	r24, 0xDF	; 223
     8e0:	89 bf       	out	0x39, r24	; 57
     8e2:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1B, T1_TIFR);
     8e4:	88 b7       	in	r24, 0x38	; 56
     8e6:	80 62       	ori	r24, 0x20	; 32
     8e8:	88 bf       	out	0x38, r24	; 56
			break;
	}
	
	//Don't reenable interrupts here if disabling... just leave them as they were....
	// but do enable for init...
	if(enable)
     8ea:	44 23       	and	r20, r20
     8ec:	11 f4       	brne	.+4      	; 0x8f2 <timer_compareMatchIntSetup+0x9a>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 95       	ret
		sei();
     8f2:	78 94       	sei
     8f4:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     8f6:	08 95       	ret

000008f8 <hfm_setup>:

//Mainly just for setting up the maxPower (divisor)
// [can] use hfm_setPower otherwise...
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
     8f8:	fc 01       	movw	r30, r24
	modulator->maxPower = maxPower;
     8fa:	44 83       	std	Z+4, r20	; 0x04
{
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     8fc:	84 81       	ldd	r24, Z+4	; 0x04
     8fe:	86 17       	cp	r24, r22
     900:	10 f0       	brcs	.+4      	; 0x906 <hfm_setup+0xe>
		modulator->power = power;
     902:	65 83       	std	Z+5, r22	; 0x05
     904:	02 c0       	rjmp	.+4      	; 0x90a <hfm_setup+0x12>
	else
		modulator->power = modulator->maxPower;
     906:	84 81       	ldd	r24, Z+4	; 0x04
     908:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     90a:	11 82       	std	Z+1, r1	; 0x01
     90c:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     90e:	13 82       	std	Z+3, r1	; 0x03
     910:	12 82       	std	Z+2, r1	; 0x02
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
	modulator->maxPower = maxPower;
	hfm_setPower(modulator, power);
}
     912:	08 95       	ret

00000914 <hfm_setPower>:
// This needs to be set, initially! 
//   either init it in the hfm variable declaration
//   or use hfm_setup (ideal)
// however, sometimes it needs to be variable, thus hfm_setup (above)
void hfm_setPower(hfm_t	*modulator, uint8_t power)
{
     914:	fc 01       	movw	r30, r24
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     916:	84 81       	ldd	r24, Z+4	; 0x04
     918:	86 17       	cp	r24, r22
     91a:	10 f0       	brcs	.+4      	; 0x920 <hfm_setPower+0xc>
		modulator->power = power;
     91c:	65 83       	std	Z+5, r22	; 0x05
     91e:	02 c0       	rjmp	.+4      	; 0x924 <hfm_setPower+0x10>
	else
		modulator->power = modulator->maxPower;
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     924:	11 82       	std	Z+1, r1	; 0x01
     926:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     928:	13 82       	std	Z+3, r1	; 0x03
     92a:	12 82       	std	Z+2, r1	; 0x02
}
     92c:	08 95       	ret

0000092e <hfm_nextOutput>:

//Returns 0 if the "output" should be "off" in this cycle
//		  1 if the "output" should be "on"  in this cycle
uint8_t hfm_nextOutput(hfm_t *modulator)
{
     92e:	fc 01       	movw	r30, r24
	//Instead of dividing the average by the stepNumber (slow!),
	//just add the current to the avg and add desired to itself and compare the two
	
	
	//The first time, this will be == desired*1... (and runningSum will be zero)
	(modulator->desiredSum) += (modulator->power);
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	93 81       	ldd	r25, Z+3	; 0x03
     934:	25 81       	ldd	r18, Z+5	; 0x05
     936:	82 0f       	add	r24, r18
     938:	91 1d       	adc	r25, r1
     93a:	93 83       	std	Z+3, r25	; 0x03
     93c:	82 83       	std	Z+2, r24	; 0x02
	
	// IF desired == 255, we want it never to clr...
	//		but running will be 0 the first time
	//		and we'll therefore if... set == good
	//		and later we'll runningSum == desiredSum (above) and reset and if again
	if(modulator->desiredSum > modulator->runningSum)
     93e:	22 81       	ldd	r18, Z+2	; 0x02
     940:	33 81       	ldd	r19, Z+3	; 0x03
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	82 17       	cp	r24, r18
     948:	93 07       	cpc	r25, r19
     94a:	10 f0       	brcs	.+4      	; 0x950 <hfm_nextOutput+0x22>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	08 c0       	rjmp	.+16     	; 0x960 <hfm_nextOutput+0x32>
	{
		(modulator->runningSum) += (modulator->maxPower); //0xff;
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	24 81       	ldd	r18, Z+4	; 0x04
     956:	82 0f       	add	r24, r18
     958:	91 1d       	adc	r25, r1
     95a:	91 83       	std	Z+1, r25	; 0x01
     95c:	80 83       	st	Z, r24
     95e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
//	(modulator->stepNumber)++;
	
	//Restart the cycle if the output average = the desired
	if(modulator->runningSum == modulator->desiredSum)
     960:	40 81       	ld	r20, Z
     962:	51 81       	ldd	r21, Z+1	; 0x01
     964:	22 81       	ldd	r18, Z+2	; 0x02
     966:	33 81       	ldd	r19, Z+3	; 0x03
     968:	42 17       	cp	r20, r18
     96a:	53 07       	cpc	r21, r19
     96c:	21 f4       	brne	.+8      	; 0x976 <hfm_nextOutput+0x48>
	{
		//Handled below...
//		modulator->stepNumber = 0;
		modulator->runningSum = 0;
     96e:	11 82       	std	Z+1, r1	; 0x01
     970:	10 82       	st	Z, r1
		modulator->desiredSum = 0;
     972:	13 82       	std	Z+3, r1	; 0x03
     974:	12 82       	std	Z+2, r1	; 0x02
	}
	
	return toReturn;
}
     976:	08 95       	ret

00000978 <sineRaw>:
//   rollover/wraparound should work fine... (e.g. Sine(coord_t))
//output is a value between -INT32_MAX and INT32_MAX (representing sin values -1 to 1)
sine_t sineRaw(theta_t theta)
{
//	theta %= 512;
	theta %= SINE_2PI;
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	72 e0       	ldi	r23, 0x02	; 2
     97c:	6b d7       	rcall	.+3798   	; 0x1854 <__divmodhi4>

	if(theta < 0)
     97e:	97 ff       	sbrs	r25, 7
     980:	02 c0       	rjmp	.+4      	; 0x986 <sineRaw+0xe>
		theta = SINE_2PI + theta;
     982:	80 50       	subi	r24, 0x00	; 0
     984:	9e 4f       	sbci	r25, 0xFE	; 254

//For more accurate realtimeishness, it might be worthwhile to reverse this order...
	
	//in the first quadrant, just take the sine value from the table
	if(theta < SINE_SIZE-1) //128)
     986:	80 38       	cpi	r24, 0x80	; 128
     988:	91 05       	cpc	r25, r1
     98a:	44 f4       	brge	.+16     	; 0x99c <sineRaw+0x24>
		return pgm_read_sine(sineTable[theta]);
     98c:	fc 01       	movw	r30, r24
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	ea 5d       	subi	r30, 0xDA	; 218
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	25 91       	lpm	r18, Z+
     998:	34 91       	lpm	r19, Z
     99a:	29 c0       	rjmp	.+82     	; 0x9ee <sineRaw+0x76>
	//in the second quadrant, mirror theta and subtract the offset
	else if(theta < SINE_SIZE2) //256)
     99c:	8f 3f       	cpi	r24, 0xFF	; 255
     99e:	91 05       	cpc	r25, r1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <sineRaw+0x2c>
     9a2:	5c f4       	brge	.+22     	; 0x9ba <sineRaw+0x42>
		return pgm_read_sine(sineTable[SINE_SIZE2-theta]); //256-theta]);
     9a4:	e0 e0       	ldi	r30, 0x00	; 0
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	e8 1b       	sub	r30, r24
     9aa:	f9 0b       	sbc	r31, r25
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	ea 5d       	subi	r30, 0xDA	; 218
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	25 91       	lpm	r18, Z+
     9b6:	34 91       	lpm	r19, Z
     9b8:	1a c0       	rjmp	.+52     	; 0x9ee <sineRaw+0x76>
	//in the third quadrant, mirror the value and subtract the offset
	else if(theta < SINE_SIZE3) //384)
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	80 38       	cpi	r24, 0x80	; 128
     9be:	92 07       	cpc	r25, r18
     9c0:	44 f4       	brge	.+16     	; 0x9d2 <sineRaw+0x5a>
		return -(sine_t)pgm_read_sine(sineTable[theta-SINE_SIZE2]); //256]);
     9c2:	fc 01       	movw	r30, r24
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	ea 5d       	subi	r30, 0xDA	; 218
     9ca:	f1 40       	sbci	r31, 0x01	; 1
     9cc:	85 91       	lpm	r24, Z+
     9ce:	94 91       	lpm	r25, Z
     9d0:	0a c0       	rjmp	.+20     	; 0x9e6 <sineRaw+0x6e>
	//in the fourth quadrant, mirror both theta and the value and subtract the offset...
	else
		return -(sine_t)pgm_read_sine(sineTable[SINE_SIZE4-theta]); //512-theta]);
     9d2:	e0 e0       	ldi	r30, 0x00	; 0
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	e8 1b       	sub	r30, r24
     9d8:	f9 0b       	sbc	r31, r25
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	ea 5d       	subi	r30, 0xDA	; 218
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	85 91       	lpm	r24, Z+
     9e4:	94 91       	lpm	r25, Z
     9e6:	22 27       	eor	r18, r18
     9e8:	33 27       	eor	r19, r19
     9ea:	28 1b       	sub	r18, r24
     9ec:	39 0b       	sbc	r19, r25
}
     9ee:	c9 01       	movw	r24, r18
     9f0:	08 95       	ret

000009f2 <sineRaw8>:


#if ( defined(SINE_RAW8) && SINE_RAW8 )
int8_t sineRaw8(theta_t theta)
{
	theta %= SINE_2PI;
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	72 e0       	ldi	r23, 0x02	; 2
     9f6:	2e d7       	rcall	.+3676   	; 0x1854 <__divmodhi4>
     9f8:	9c 01       	movw	r18, r24

	if(theta < 0)
     9fa:	37 ff       	sbrs	r19, 7
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <sineRaw8+0x10>
		theta = SINE_2PI + theta;
     9fe:	20 50       	subi	r18, 0x00	; 0
     a00:	3e 4f       	sbci	r19, 0xFE	; 254

	if(theta < SINE_SIZE-1)
     a02:	20 38       	cpi	r18, 0x80	; 128
     a04:	31 05       	cpc	r19, r1
     a06:	3c f4       	brge	.+14     	; 0xa16 <sineRaw8+0x24>
		return pgm_read_sine8(sineTable[theta]);
     a08:	f9 01       	movw	r30, r18
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e9 5d       	subi	r30, 0xD9	; 217
     a10:	ff 4f       	sbci	r31, 0xFF	; 255
     a12:	84 91       	lpm	r24, Z
     a14:	08 95       	ret
   else if(theta < SINE_SIZE2) //256)
     a16:	2f 3f       	cpi	r18, 0xFF	; 255
     a18:	31 05       	cpc	r19, r1
     a1a:	09 f0       	breq	.+2      	; 0xa1e <sineRaw8+0x2c>
     a1c:	54 f4       	brge	.+20     	; 0xa32 <sineRaw8+0x40>
		return pgm_read_sine8(sineTable[SINE_SIZE2-theta]); //256-theta]);
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	e2 1b       	sub	r30, r18
     a24:	f3 0b       	sbc	r31, r19
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	e9 5d       	subi	r30, 0xD9	; 217
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	84 91       	lpm	r24, Z
     a30:	08 95       	ret
	else if(theta < SINE_SIZE3) //384)
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	20 38       	cpi	r18, 0x80	; 128
     a36:	38 07       	cpc	r19, r24
     a38:	44 f4       	brge	.+16     	; 0xa4a <sineRaw8+0x58>
		return -(int8_t)pgm_read_sine8(sineTable[theta-SINE_SIZE2]); //256]);
     a3a:	f9 01       	movw	r30, r18
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	e9 5d       	subi	r30, 0xD9	; 217
     a42:	f1 40       	sbci	r31, 0x01	; 1
     a44:	84 91       	lpm	r24, Z
     a46:	81 95       	neg	r24
     a48:	08 95       	ret
	else
	   return -(int8_t)pgm_read_sine8(sineTable[SINE_SIZE4-theta]); 
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f2 e0       	ldi	r31, 0x02	; 2
     a4e:	e2 1b       	sub	r30, r18
     a50:	f3 0b       	sbc	r31, r19
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	e9 5d       	subi	r30, 0xD9	; 217
     a58:	ff 4f       	sbci	r31, 0xFF	; 255
     a5a:	84 91       	lpm	r24, Z
     a5c:	81 95       	neg	r24

}
     a5e:	08 95       	ret

00000a60 <getTetBrick>:

//returns a 3-bit value
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
     a60:	e8 2f       	mov	r30, r24
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	e0 58       	subi	r30, 0x80	; 128
     a6e:	ff 4f       	sbci	r31, 0xFF	; 255
     a70:	86 2f       	mov	r24, r22
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	c7 d6       	rcall	.+3470   	; 0x1808 <__mulhi3>
     a7a:	20 81       	ld	r18, Z
     a7c:	31 81       	ldd	r19, Z+1	; 0x01
     a7e:	42 81       	ldd	r20, Z+2	; 0x02
     a80:	53 81       	ldd	r21, Z+3	; 0x03
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <getTetBrick+0x2c>
     a84:	56 95       	lsr	r21
     a86:	47 95       	ror	r20
     a88:	37 95       	ror	r19
     a8a:	27 95       	ror	r18
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <getTetBrick+0x24>
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';

}
     a90:	82 2f       	mov	r24, r18
     a92:	87 70       	andi	r24, 0x07	; 7
     a94:	08 95       	ret

00000a96 <setTetBrick>:

//val should only be 0-7
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
void setTetBrick(uint8_t row, uint8_t col, uint8_t val)
{
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
	//Clear the old value...
	tetRow[row] &= ~(((uint32_t)'\007')<<(3*col));
     a9a:	e8 2f       	mov	r30, r24
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	86 2f       	mov	r24, r22
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	63 e0       	ldi	r22, 0x03	; 3
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	b0 d6       	rcall	.+3424   	; 0x1808 <__mulhi3>
     aa8:	a8 2f       	mov	r26, r24
	//Write the new value...
	tetRow[row] |= (((uint32_t)val)<<(3*col));
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	e0 58       	subi	r30, 0x80	; 128
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	67 e0       	ldi	r22, 0x07	; 7
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0a 2e       	mov	r0, r26
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <setTetBrick+0x34>
     ac2:	66 0f       	add	r22, r22
     ac4:	77 1f       	adc	r23, r23
     ac6:	88 1f       	adc	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <setTetBrick+0x2c>
     ace:	60 95       	com	r22
     ad0:	70 95       	com	r23
     ad2:	80 95       	com	r24
     ad4:	90 95       	com	r25
     ad6:	00 81       	ld	r16, Z
     ad8:	11 81       	ldd	r17, Z+1	; 0x01
     ada:	22 81       	ldd	r18, Z+2	; 0x02
     adc:	33 81       	ldd	r19, Z+3	; 0x03
     ade:	60 23       	and	r22, r16
     ae0:	71 23       	and	r23, r17
     ae2:	82 23       	and	r24, r18
     ae4:	93 23       	and	r25, r19
     ae6:	24 2f       	mov	r18, r20
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <setTetBrick+0x62>
     af0:	22 0f       	add	r18, r18
     af2:	33 1f       	adc	r19, r19
     af4:	44 1f       	adc	r20, r20
     af6:	55 1f       	adc	r21, r21
     af8:	aa 95       	dec	r26
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <setTetBrick+0x5a>
     afc:	62 2b       	or	r22, r18
     afe:	73 2b       	or	r23, r19
     b00:	84 2b       	or	r24, r20
     b02:	95 2b       	or	r25, r21
     b04:	60 83       	st	Z, r22
     b06:	71 83       	std	Z+1, r23	; 0x01
     b08:	82 83       	std	Z+2, r24	; 0x02
     b0a:	93 83       	std	Z+3, r25	; 0x03
}
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <tetInit>:
//For now, let's just test that it works...
// (This could be implemented with bitfields?)
uint32_t tetRow[TET_HEIGHT];

void tetInit(uint8_t filledRows)
{
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	e0 e8       	ldi	r30, 0x80	; 128
     b18:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
     b1a:	11 92       	st	Z+, r1
     b1c:	11 92       	st	Z+, r1
     b1e:	11 92       	st	Z+, r1
     b20:	11 92       	st	Z+, r1
void tetInit(uint8_t filledRows)
{
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	e8 3c       	cpi	r30, 0xC8	; 200
     b26:	f9 07       	cpc	r31, r25
     b28:	c1 f7       	brne	.-16     	; 0xb1a <tetInit+0x8>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     b2a:	12 e1       	ldi	r17, 0x12	; 18
     b2c:	18 1b       	sub	r17, r24
     b2e:	0b c0       	rjmp	.+22     	; 0xb46 <tetInit+0x34>
     b30:	00 e0       	ldi	r16, 0x00	; 0
		for(col=0; col<TET_WIDTH; col++)
			setTetBrick(row, col, (row+col)&0x07);
     b32:	40 2f       	mov	r20, r16
     b34:	41 0f       	add	r20, r17
     b36:	47 70       	andi	r20, 0x07	; 7
     b38:	81 2f       	mov	r24, r17
     b3a:	60 2f       	mov	r22, r16
     b3c:	ac df       	rcall	.-168    	; 0xa96 <setTetBrick>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
		for(col=0; col<TET_WIDTH; col++)
     b3e:	0f 5f       	subi	r16, 0xFF	; 255
     b40:	0a 30       	cpi	r16, 0x0A	; 10
     b42:	b9 f7       	brne	.-18     	; 0xb32 <tetInit+0x20>
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     b44:	1f 5f       	subi	r17, 0xFF	; 255
     b46:	12 31       	cpi	r17, 0x12	; 18
     b48:	98 f3       	brcs	.-26     	; 0xb30 <tetInit+0x1e>

		row+=4;

	}
#endif
}
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <tetUpdate>:


}

void tetUpdate(void)
{
     b50:	2f 92       	push	r2
     b52:	3f 92       	push	r3
     b54:	4f 92       	push	r4
     b56:	5f 92       	push	r5
     b58:	6f 92       	push	r6
     b5a:	7f 92       	push	r7
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	00 d0       	rcall	.+0      	; 0xb76 <tetUpdate+0x26>
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	uint8_t pieceCol;

	uint8_t noChange = FALSE;
	uint8_t settle = FALSE;

	if(newPieceHitCount == 5)
     b7a:	80 91 7e 00 	lds	r24, 0x007E
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	21 f4       	brne	.+8      	; 0xb8a <tetUpdate+0x3a>
	{
		newPieceHitCount = 0;
     b82:	10 92 7e 00 	sts	0x007E, r1
		tetInit(0);
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	c4 df       	rcall	.-120    	; 0xb12 <tetInit>
	}

	new_pieceOrientation = pieceOrientation;
     b8a:	30 90 6f 00 	lds	r3, 0x006F
	new_pieceLeftCol = pieceLeftCol;
     b8e:	40 91 71 00 	lds	r20, 0x0071
	new_pieceTopRow = pieceTopRow;
     b92:	20 90 70 00 	lds	r2, 0x0070

	if(callCount%4 == 2)
     b96:	50 91 7f 00 	lds	r21, 0x007F
     b9a:	85 2f       	mov	r24, r21
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	83 70       	andi	r24, 0x03	; 3
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	91 05       	cpc	r25, r1
     ba6:	31 f4       	brne	.+12     	; 0xbb4 <tetUpdate+0x64>
   {
		new_pieceOrientation=pieceOrientation+1;
     ba8:	23 2d       	mov	r18, r3
     baa:	2f 5f       	subi	r18, 0xFF	; 255
      if (new_pieceOrientation==4)
     bac:	24 30       	cpi	r18, 0x04	; 4
     bae:	09 f0       	breq	.+2      	; 0xbb2 <tetUpdate+0x62>
     bb0:	e0 c0       	rjmp	.+448    	; 0xd72 <tetUpdate+0x222>
     bb2:	de c0       	rjmp	.+444    	; 0xd70 <tetUpdate+0x220>
			new_pieceOrientation=0;
	}

      if(callCount%4==0)
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	19 f4       	brne	.+6      	; 0xbbe <tetUpdate+0x6e>
      {  
         new_pieceLeftCol=pieceLeftCol+1;
     bb8:	34 2f       	mov	r19, r20
     bba:	3f 5f       	subi	r19, 0xFF	; 255
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <tetUpdate+0x78>
		}

		if(callCount%4==3)
     bbe:	83 30       	cpi	r24, 0x03	; 3
     bc0:	91 05       	cpc	r25, r1
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <tetUpdate+0x76>
		{
			new_pieceTopRow=pieceTopRow+1;
     bc4:	23 94       	inc	r2
     bc6:	34 2f       	mov	r19, r20
     bc8:	23 2d       	mov	r18, r3
      }

	callCount++;
     bca:	5f 5f       	subi	r21, 0xFF	; 255
     bcc:	50 93 7f 00 	sts	0x007F, r21
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     bd0:	80 91 6e 00 	lds	r24, 0x006E
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	82 0f       	add	r24, r18
     be0:	91 1d       	adc	r25, r1
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	84 5b       	subi	r24, 0xB4	; 180
     be8:	9b 4f       	sbci	r25, 0xFB	; 251
     bea:	12 2d       	mov	r17, r2
     bec:	1d 5f       	subi	r17, 0xFD	; 253
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b3 e0       	ldi	r27, 0x03	; 3
     bf2:	fc 01       	movw	r30, r24
     bf4:	c5 90       	lpm	r12, Z+
     bf6:	d4 90       	lpm	r13, Z
     bf8:	36 c0       	rjmp	.+108    	; 0xc66 <tetUpdate+0x116>
			uint8_t boardCol = new_pieceLeftCol + pieceCol;

			uint8_t boardBrick = getTetBrick(boardRow, boardCol);


			if(pieceBrick)
     bfa:	cf 01       	movw	r24, r30
     bfc:	8e 0d       	add	r24, r14
     bfe:	9f 1d       	adc	r25, r15
     c00:	26 01       	movw	r4, r12
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <tetUpdate+0xb8>
     c04:	56 94       	lsr	r5
     c06:	47 94       	ror	r4
     c08:	8a 95       	dec	r24
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <tetUpdate+0xb4>
     c0c:	40 fe       	sbrs	r4, 0
     c0e:	1a c0       	rjmp	.+52     	; 0xc44 <tetUpdate+0xf4>
			{
				if(boardRow >= TET_HEIGHT)
     c10:	12 31       	cpi	r17, 0x12	; 18
     c12:	f8 f4       	brcc	.+62     	; 0xc52 <tetUpdate+0x102>
					break;
				}

				//There's some plausibility for some oddities here...
				// revisit 41-15.zip
				if(boardCol >= TET_WIDTH)
     c14:	0a 30       	cpi	r16, 0x0A	; 10
     c16:	f8 f4       	brcc	.+62     	; 0xc56 <tetUpdate+0x106>
				   noChange = TRUE;
				   break;
				}


				if(boardBrick)
     c18:	80 2f       	mov	r24, r16
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	63 e0       	ldi	r22, 0x03	; 3
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	f3 d5       	rcall	.+3046   	; 0x1808 <__mulhi3>
     c22:	24 01       	movw	r4, r8
     c24:	35 01       	movw	r6, r10
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <tetUpdate+0xe0>
     c28:	76 94       	lsr	r7
     c2a:	67 94       	ror	r6
     c2c:	57 94       	ror	r5
     c2e:	47 94       	ror	r4
     c30:	8a 95       	dec	r24
     c32:	d2 f7       	brpl	.-12     	; 0xc28 <tetUpdate+0xd8>
     c34:	84 2d       	mov	r24, r4
     c36:	87 70       	andi	r24, 0x07	; 7
     c38:	29 f0       	breq	.+10     	; 0xc44 <tetUpdate+0xf4>
				{
					//Must be a settle...
					if((new_pieceOrientation == pieceOrientation) &&
     c3a:	23 15       	cp	r18, r3
     c3c:	61 f4       	brne	.+24     	; 0xc56 <tetUpdate+0x106>
     c3e:	34 17       	cp	r19, r20
     c40:	51 f4       	brne	.+20     	; 0xc56 <tetUpdate+0x106>
     c42:	07 c0       	rjmp	.+14     	; 0xc52 <tetUpdate+0x102>
     c44:	31 96       	adiw	r30, 0x01	; 1
     c46:	0f 5f       	subi	r16, 0xFF	; 255


	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
     c48:	e4 30       	cpi	r30, 0x04	; 4
     c4a:	f1 05       	cpc	r31, r1
     c4c:	b1 f6       	brne	.-84     	; 0xbfa <tetUpdate+0xaa>
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <tetUpdate+0x10a>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <tetUpdate+0x108>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	a1 e0       	ldi	r26, 0x01	; 1



	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
     c5a:	b1 50       	subi	r27, 0x01	; 1
     c5c:	11 50       	subi	r17, 0x01	; 1
     c5e:	bf 3f       	cpi	r27, 0xFF	; 255
     c60:	d9 f0       	breq	.+54     	; 0xc98 <tetUpdate+0x148>
     c62:	88 23       	and	r24, r24
     c64:	c9 f4       	brne	.+50     	; 0xc98 <tetUpdate+0x148>
     c66:	aa 23       	and	r26, r26
     c68:	09 f0       	breq	.+2      	; 0xc6c <tetUpdate+0x11c>
     c6a:	85 c0       	rjmp	.+266    	; 0xd76 <tetUpdate+0x226>
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     c6c:	eb 2e       	mov	r14, r27
     c6e:	ff 24       	eor	r15, r15
     c70:	ee 0c       	add	r14, r14
     c72:	ff 1c       	adc	r15, r15
     c74:	ee 0c       	add	r14, r14
     c76:	ff 1c       	adc	r15, r15
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';
     c78:	e1 2f       	mov	r30, r17
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	e0 58       	subi	r30, 0x80	; 128
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 80       	ld	r8, Z
     c8a:	91 80       	ldd	r9, Z+1	; 0x01
     c8c:	a2 80       	ldd	r10, Z+2	; 0x02
     c8e:	b3 80       	ldd	r11, Z+3	; 0x03
     c90:	03 2f       	mov	r16, r19
     c92:	e0 e0       	ldi	r30, 0x00	; 0
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	b1 cf       	rjmp	.-158    	; 0xbfa <tetUpdate+0xaa>





	if(!noChange)
     c98:	aa 23       	and	r26, r26
     c9a:	31 f4       	brne	.+12     	; 0xca8 <tetUpdate+0x158>
	{
		pieceOrientation = new_pieceOrientation;
     c9c:	20 93 6f 00 	sts	0x006F, r18
		pieceLeftCol = new_pieceLeftCol;
     ca0:	30 93 71 00 	sts	0x0071, r19
		pieceTopRow = new_pieceTopRow;
     ca4:	20 92 70 00 	sts	0x0070, r2
	}

	if(settle)
     ca8:	88 23       	and	r24, r24
     caa:	09 f4       	brne	.+2      	; 0xcae <tetUpdate+0x15e>
     cac:	64 c0       	rjmp	.+200    	; 0xd76 <tetUpdate+0x226>
	{
		// Check if we've hit on a new piece...
		if((pieceTopRow == PIECE_STARTROW) &&
     cae:	80 91 70 00 	lds	r24, 0x0070
     cb2:	88 23       	and	r24, r24
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <tetUpdate+0x168>
     cb6:	45 c0       	rjmp	.+138    	; 0xd42 <tetUpdate+0x1f2>
     cb8:	80 91 71 00 	lds	r24, 0x0071
     cbc:	83 30       	cpi	r24, 0x03	; 3
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <tetUpdate+0x172>
     cc0:	40 c0       	rjmp	.+128    	; 0xd42 <tetUpdate+0x1f2>
     cc2:	80 91 6f 00 	lds	r24, 0x006F
     cc6:	88 23       	and	r24, r24
     cc8:	09 f0       	breq	.+2      	; 0xccc <tetUpdate+0x17c>
     cca:	3b c0       	rjmp	.+118    	; 0xd42 <tetUpdate+0x1f2>
		   (pieceLeftCol == PIECE_STARTCOL) &&
		   (pieceOrientation == 0))
		   newPieceHitCount++;
     ccc:	80 91 7e 00 	lds	r24, 0x007E
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	80 93 7e 00 	sts	0x007E, r24
     cd6:	35 c0       	rjmp	.+106    	; 0xd42 <tetUpdate+0x1f2>

		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
			{
				if(getTetPieceBrick(pieceNum, pieceOrientation,
     cd8:	40 91 6e 00 	lds	r20, 0x006E
     cdc:	e4 2f       	mov	r30, r20
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	80 91 6f 00 	lds	r24, 0x006F
     cec:	e8 0f       	add	r30, r24
     cee:	f1 1d       	adc	r31, r1
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	e4 5b       	subi	r30, 0xB4	; 180
     cf6:	fb 4f       	sbci	r31, 0xFB	; 251
     cf8:	85 91       	lpm	r24, Z+
     cfa:	94 91       	lpm	r25, Z
     cfc:	b7 01       	movw	r22, r14
     cfe:	62 0f       	add	r22, r18
     d00:	73 1f       	adc	r23, r19
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <tetUpdate+0x1b8>
     d04:	96 95       	lsr	r25
     d06:	87 95       	ror	r24
     d08:	6a 95       	dec	r22
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <tetUpdate+0x1b4>
     d0c:	80 ff       	sbrs	r24, 0
     d0e:	0c c0       	rjmp	.+24     	; 0xd28 <tetUpdate+0x1d8>
										  pieceRow, pieceCol))
				setTetBrick(pieceTopRow+pieceRow,
     d10:	80 91 70 00 	lds	r24, 0x0070
     d14:	60 91 71 00 	lds	r22, 0x0071
     d18:	6e 0d       	add	r22, r14
     d1a:	4f 5f       	subi	r20, 0xFF	; 255
     d1c:	81 0f       	add	r24, r17
     d1e:	29 83       	std	Y+1, r18	; 0x01
     d20:	3a 83       	std	Y+2, r19	; 0x02
     d22:	b9 de       	rcall	.-654    	; 0xa96 <setTetBrick>
     d24:	3a 81       	ldd	r19, Y+2	; 0x02
     d26:	29 81       	ldd	r18, Y+1	; 0x01
     d28:	08 94       	sec
     d2a:	e1 1c       	adc	r14, r1
     d2c:	f1 1c       	adc	r15, r1
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
     d2e:	64 e0       	ldi	r22, 0x04	; 4
     d30:	e6 16       	cp	r14, r22
     d32:	f1 04       	cpc	r15, r1
     d34:	89 f6       	brne	.-94     	; 0xcd8 <tetUpdate+0x188>
		   (pieceOrientation == 0))
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
     d36:	1f 5f       	subi	r17, 0xFF	; 255
     d38:	2c 5f       	subi	r18, 0xFC	; 252
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	14 30       	cpi	r17, 0x04	; 4
     d3e:	21 f4       	brne	.+8      	; 0xd48 <tetUpdate+0x1f8>
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <tetUpdate+0x1fe>
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	ee 24       	eor	r14, r14
     d4a:	ff 24       	eor	r15, r15
     d4c:	c5 cf       	rjmp	.-118    	; 0xcd8 <tetUpdate+0x188>
								pieceNum+1);
			}


		//Load a new piece...
		pieceNum++;
     d4e:	80 91 6e 00 	lds	r24, 0x006E
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	80 93 6e 00 	sts	0x006E, r24
		if(pieceNum==NUM_PIECES)
     d58:	87 30       	cpi	r24, 0x07	; 7
     d5a:	11 f4       	brne	.+4      	; 0xd60 <tetUpdate+0x210>
			pieceNum = 0;
     d5c:	10 92 6e 00 	sts	0x006E, r1
		pieceLeftCol = PIECE_STARTCOL;
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	80 93 71 00 	sts	0x0071, r24
		pieceTopRow = PIECE_STARTROW;
     d66:	10 92 70 00 	sts	0x0070, r1
		pieceOrientation = 0;
     d6a:	10 92 6f 00 	sts	0x006F, r1
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <tetUpdate+0x226>
	}

}
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	34 2f       	mov	r19, r20
     d74:	2a cf       	rjmp	.-428    	; 0xbca <tetUpdate+0x7a>
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	8f 90       	pop	r8
     d92:	7f 90       	pop	r7
     d94:	6f 90       	pop	r6
     d96:	5f 90       	pop	r5
     d98:	4f 90       	pop	r4
     d9a:	3f 90       	pop	r3
     d9c:	2f 90       	pop	r2
     d9e:	08 95       	ret

00000da0 <tetBrick_to_fb>:

uint8_t tetColorScheme = 0;

uint8_t tetBrick_to_fb(uint8_t tetBrick)
{
	if(!tetBrick)
     da0:	88 23       	and	r24, r24
     da2:	a9 f0       	breq	.+42     	; 0xdce <tetBrick_to_fb+0x2e>
		return 0;

	switch(tetColorScheme)
     da4:	90 91 72 00 	lds	r25, 0x0072
     da8:	81 50       	subi	r24, 0x01	; 1
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	38 f4       	brcc	.+14     	; 0xdbc <tetBrick_to_fb+0x1c>
	{
		heartUpdate();
	}
#endif

}
     dae:	87 30       	cpi	r24, 0x07	; 7
     db0:	68 f4       	brcc	.+26     	; 0xdcc <tetBrick_to_fb+0x2c>
     db2:	e8 2f       	mov	r30, r24
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	e0 5a       	subi	r30, 0xA0	; 160
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <tetBrick_to_fb+0x28>
     dbc:	87 30       	cpi	r24, 0x07	; 7
     dbe:	30 f4       	brcc	.+12     	; 0xdcc <tetBrick_to_fb+0x2c>
     dc0:	e8 2f       	mov	r30, r24
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	e9 59       	subi	r30, 0x99	; 153
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	08 95       	ret
     dcc:	8f e3       	ldi	r24, 0x3F	; 63
			}
//		default:
//			return 0;
	}

}
     dce:	08 95       	ret

00000dd0 <segClear>:
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     dd0:	10 92 73 00 	sts	0x0073, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     dd4:	86 e0       	ldi	r24, 0x06	; 6
     dd6:	80 93 c8 00 	sts	0x00C8, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     dda:	83 e6       	ldi	r24, 0x63	; 99
     ddc:	80 93 c9 00 	sts	0x00C9, r24
}
     de0:	08 95       	ret

00000de2 <segTerminate>:
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     de2:	80 91 73 00 	lds	r24, 0x0073
     de6:	83 34       	cpi	r24, 0x43	; 67
     de8:	f8 f4       	brcc	.+62     	; 0xe28 <segTerminate+0x46>
     dea:	e8 2f       	mov	r30, r24
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	e8 53       	subi	r30, 0x38	; 56
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	90 81       	ld	r25, Z
     df8:	98 7f       	andi	r25, 0xF8	; 248
     dfa:	f1 f0       	breq	.+60     	; 0xe38 <segTerminate+0x56>
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 73 00 	sts	0x0073, r24

		rowSegBuffer[segPosition].red_length 
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
     e02:	a8 2f       	mov	r26, r24
     e04:	b0 e0       	ldi	r27, 0x00	; 0
	if((segPosition < NUM_SEGMENTS-1) 
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;

		rowSegBuffer[segPosition].red_length 
     e06:	fd 01       	movw	r30, r26
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	e8 53       	subi	r30, 0x38	; 56
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	aa 0f       	add	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	aa 53       	subi	r26, 0x3A	; 58
     e16:	bf 4f       	sbci	r27, 0xFF	; 255
     e18:	8c 91       	ld	r24, X
     e1a:	87 70       	andi	r24, 0x07	; 7
     e1c:	80 83       	st	Z, r24
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
		rowSegBuffer[segPosition].green_blue
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	8c 91       	ld	r24, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	81 83       	std	Z+1, r24	; 0x01
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     e26:	08 95       	ret
		rowSegBuffer[segPosition].green_blue
			= rowSegBuffer[segPosition-1].green_blue;
	}
	//We're already at the last segment, so we have to nullify it
	//This might terminate the last pixel early, but is necessary.
	else if(segPosition == NUM_SEGMENTS-1)
     e28:	83 34       	cpi	r24, 0x43	; 67
     e2a:	31 f4       	brne	.+12     	; 0xe38 <segTerminate+0x56>
	{
		//Apparently white doesn't cause sync problems... so load it white
		rowSegBuffer[segPosition].red_length = fbRed_to_seg(_W);
     e2c:	87 e0       	ldi	r24, 0x07	; 7
     e2e:	80 93 4e 01 	sts	0x014E, r24
		rowSegBuffer[segPosition].green_blue = 
     e32:	83 e7       	ldi	r24, 0x73	; 115
     e34:	80 93 4f 01 	sts	0x014F, r24
     e38:	08 95       	ret

00000e3a <newSeg>:
// Returns TRUE if it had to be truncated
//  (out of segment memory, past the display edge...)
// length is the real length, not shifted for storage...
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{
     e3a:	20 91 73 00 	lds	r18, 0x0073
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     e3e:	56 2f       	mov	r21, r22
     e40:	58 6f       	ori	r21, 0xF8	; 248
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <newSeg+0x34>
	{
		// No more segments available...	
		// The last segment must have a length of 0
		if(segPosition == NUM_SEGMENTS-1)
     e44:	23 34       	cpi	r18, 0x43	; 67
     e46:	19 f4       	brne	.+6      	; 0xe4e <newSeg+0x14>
     e48:	20 93 73 00 	sts	0x0073, r18
     e4c:	1b c0       	rjmp	.+54     	; 0xe84 <newSeg+0x4a>
	
		//Check if the segment buffer is cleared...
		// then DON'T increment segPosition...
		//if(!((segPosition == 0) && 
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     e4e:	22 23       	and	r18, r18
     e50:	21 f4       	brne	.+8      	; 0xe5a <newSeg+0x20>
     e52:	30 91 c8 00 	lds	r19, 0x00C8
     e56:	38 7f       	andi	r19, 0xF8	; 248
     e58:	09 f0       	breq	.+2      	; 0xe5c <newSeg+0x22>
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;
     e5a:	2f 5f       	subi	r18, 0xFF	; 255


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
     e5c:	e2 2f       	mov	r30, r18
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	e8 53       	subi	r30, 0x38	; 56
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	50 83       	st	Z, r21
			red | (SEG_MAXLENGTH<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     e6a:	41 83       	std	Z+1, r20	; 0x01

		length -= SEG_MAXLENGTH;
     e6c:	4f 97       	sbiw	r24, 0x1f	; 31
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
     e6e:	8f 31       	cpi	r24, 0x1F	; 31
     e70:	91 05       	cpc	r25, r1
     e72:	40 f7       	brcc	.-48     	; 0xe44 <newSeg+0xa>
     e74:	20 93 73 00 	sts	0x0073, r18

	}

	//We can fit whatever's left (or the whole thing) into a single segment
	// Unless, of course, there's nothing left...
	if(length > 0) //< SEG_MAXLENGTH)//Guaranteed now...
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	11 f4       	brne	.+4      	; 0xe80 <newSeg+0x46>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	08 95       	ret
	{
		//Make sure there's another segment to write to!
		if(segPosition == NUM_SEGMENTS-1)
     e80:	23 34       	cpi	r18, 0x43	; 67
     e82:	19 f4       	brne	.+6      	; 0xe8a <newSeg+0x50>
		{
			segTerminate();
     e84:	ae df       	rcall	.-164    	; 0xde2 <segTerminate>
     e86:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
     e88:	08 95       	ret
		}

		//if(!((segPosition == 0) &&
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
     e8a:	22 23       	and	r18, r18
     e8c:	21 f4       	brne	.+8      	; 0xe96 <newSeg+0x5c>
     e8e:	30 91 c8 00 	lds	r19, 0x00C8
     e92:	38 7f       	andi	r19, 0xF8	; 248
     e94:	19 f0       	breq	.+6      	; 0xe9c <newSeg+0x62>
	     ((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
  				segPosition++;
     e96:	2f 5f       	subi	r18, 0xFF	; 255
     e98:	20 93 73 00 	sts	0x0073, r18


		rowSegBuffer[segPosition].red_length = 
     e9c:	e0 91 73 00 	lds	r30, 0x0073
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	e8 53       	subi	r30, 0x38	; 56
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	88 0f       	add	r24, r24
     eac:	88 0f       	add	r24, r24
     eae:	88 0f       	add	r24, r24
     eb0:	86 2b       	or	r24, r22
     eb2:	80 83       	st	Z, r24
			red | (length<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
     eb4:	41 83       	std	Z+1, r20	; 0x01
     eb6:	80 e0       	ldi	r24, 0x00	; 0
	}

	return FALSE;

}
     eb8:	08 95       	ret

00000eba <stretchSeg>:
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     eba:	e0 91 73 00 	lds	r30, 0x0073
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	df 01       	movw	r26, r30
     ec2:	aa 0f       	add	r26, r26
     ec4:	bb 1f       	adc	r27, r27
     ec6:	a8 53       	subi	r26, 0x38	; 56
     ec8:	bf 4f       	sbci	r27, 0xFF	; 255
     eca:	2c 91       	ld	r18, X

		if(!additionalLength)
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	11 f1       	breq	.+68     	; 0xf14 <stretchSeg+0x5a>
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
     ed0:	42 2f       	mov	r20, r18
     ed2:	46 95       	lsr	r20
     ed4:	46 95       	lsr	r20
     ed6:	46 95       	lsr	r20

		if(!additionalLength)
			return FALSE;

		//We can stretch the current segment
		if(oldLength < SEG_MAXLENGTH)
     ed8:	4f 31       	cpi	r20, 0x1F	; 31
     eda:	98 f4       	brcc	.+38     	; 0xf02 <stretchSeg+0x48>
		{
			uint8_t maxStretch = SEG_MAXLENGTH - oldLength;

			// Will the entire addition fit in the previous segment?
			if(additionalLength <= maxStretch)
     edc:	3f e1       	ldi	r19, 0x1F	; 31
     ede:	34 1b       	sub	r19, r20
     ee0:	43 2f       	mov	r20, r19
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	48 17       	cp	r20, r24
     ee6:	59 07       	cpc	r21, r25
     ee8:	38 f0       	brcs	.+14     	; 0xef8 <stretchSeg+0x3e>
			{
				rowSegBuffer[segPosition].red_length += 
     eea:	88 0f       	add	r24, r24
     eec:	88 0f       	add	r24, r24
     eee:	88 0f       	add	r24, r24
     ef0:	82 0f       	add	r24, r18
     ef2:	8c 93       	st	X, r24
     ef4:	80 e0       	ldi	r24, 0x00	; 0
					(additionalLength << SEG_LENGTH_SHIFT);

				//Then we're done.
			//	additionalLength = 0;
			//	break;
				return FALSE;
     ef6:	08 95       	ret
			else
			{
				uint8_t red = 
					rowSegBuffer[segPosition].red_length & RED_MASK;

				rowSegBuffer[segPosition].red_length =
     ef8:	28 6f       	ori	r18, 0xF8	; 248
     efa:	2c 93       	st	X, r18
					red | (SEG_MAXLENGTH << SEG_LENGTH_SHIFT);

				additionalLength -= maxStretch;
     efc:	84 1b       	sub	r24, r20
     efe:	95 0b       	sbc	r25, r21

		// We shouldn't ever get here if additionalLength = 0...

		//But we should test to make sure there's still lenth after
		// the stretch...
		if(additionalLength)
     f00:	49 f0       	breq	.+18     	; 0xf14 <stretchSeg+0x5a>
				rowSegBuffer[segPosition].green_blue;

			uint8_t retVal;

			//Create new segment(s) with the remaining length
			retVal = newSeg(additionalLength, red, green_blue);
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	e8 53       	subi	r30, 0x38	; 56
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	67 70       	andi	r22, 0x07	; 7
     f0e:	41 81       	ldd	r20, Z+1	; 0x01
     f10:	94 df       	rcall	.-216    	; 0xe3a <newSeg>

			//Then we're done...
			//additionalLength = 0;
			//break;

			return retVal;
     f12:	08 95       	ret
     f14:	80 e0       	ldi	r24, 0x00	; 0
		}	

		//We shouldn't ever get here...
		// Well, maybe... if additionalLength == maxStretch...?
		return FALSE;
}
     f16:	08 95       	ret

00000f18 <addSeg>:
// the last segment...
uint8_t addSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Currently not smart enough to stretch the first segment...
	if(segPosition == 0)
     f18:	e0 91 73 00 	lds	r30, 0x0073
     f1c:	ee 23       	and	r30, r30
     f1e:	11 f4       	brne	.+4      	; 0xf24 <addSeg+0xc>
		return newSeg(length, red, green_blue);
     f20:	8c df       	rcall	.-232    	; 0xe3a <newSeg>
     f22:	08 95       	ret

	//Can we stretch?
	if(((rowSegBuffer[segPosition].red_length & RED_MASK) == red)
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e8 53       	subi	r30, 0x38	; 56
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	20 81       	ld	r18, Z
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	27 70       	andi	r18, 0x07	; 7
     f34:	30 70       	andi	r19, 0x00	; 0
     f36:	a6 2f       	mov	r26, r22
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	2a 17       	cp	r18, r26
     f3c:	3b 07       	cpc	r19, r27
     f3e:	29 f4       	brne	.+10     	; 0xf4a <addSeg+0x32>
     f40:	21 81       	ldd	r18, Z+1	; 0x01
     f42:	24 17       	cp	r18, r20
     f44:	11 f4       	brne	.+4      	; 0xf4a <addSeg+0x32>
		&& (rowSegBuffer[segPosition].green_blue == green_blue))
			return stretchSeg(length);
     f46:	b9 df       	rcall	.-142    	; 0xeba <stretchSeg>
     f48:	08 95       	ret
	else
		return newSeg(length, red, green_blue);
     f4a:	77 df       	rcall	.-274    	; 0xe3a <newSeg>

}
     f4c:	08 95       	ret

00000f4e <rbpix_to_seg>:
//This is just an intermediate test, for now...
// for reloading the rowbuffer to a seg-buffer.
//This could easily be revised (and generalized) to be...
// addSegment or addPixel
void rbpix_to_seg(uint8_t rbValue, uint8_t col, uint8_t length)
{
     f4e:	1f 93       	push	r17
     f50:	18 2f       	mov	r17, r24
     f52:	84 2f       	mov	r24, r20
	static uint8_t last_rbValue = 0;
	//uint8_t length = 1;

	if(col == 0)
     f54:	66 23       	and	r22, r22
     f56:	59 f4       	brne	.+22     	; 0xf6e <rbpix_to_seg+0x20>
	{
		last_rbValue = 0;
     f58:	10 92 7d 00 	sts	0x007D, r1
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     f5c:	10 92 73 00 	sts	0x0073, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     f60:	96 e0       	ldi	r25, 0x06	; 6
     f62:	90 93 c8 00 	sts	0x00C8, r25
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     f66:	93 e6       	ldi	r25, 0x63	; 99
     f68:	90 93 c9 00 	sts	0x00C9, r25
     f6c:	0b c0       	rjmp	.+22     	; 0xf84 <rbpix_to_seg+0x36>
	{
		last_rbValue = 0;
		segClear();
	}
	//Same color as last pixel...
	else if(segPosition && (rbValue == last_rbValue))
     f6e:	90 91 73 00 	lds	r25, 0x0073
     f72:	99 23       	and	r25, r25
     f74:	39 f0       	breq	.+14     	; 0xf84 <rbpix_to_seg+0x36>
     f76:	90 91 7d 00 	lds	r25, 0x007D
     f7a:	19 17       	cp	r17, r25
     f7c:	19 f4       	brne	.+6      	; 0xf84 <rbpix_to_seg+0x36>
	{
		stretchSeg(length);
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9c df       	rcall	.-200    	; 0xeba <stretchSeg>
		return;
     f82:	16 c0       	rjmp	.+44     	; 0xfb0 <rbpix_to_seg+0x62>

	uint8_t green = rbValue & 0x03;
	uint8_t red = (rbValue & 0x1C) >> 2;
	uint8_t blue = rbValue >> 5;

	newSeg(length, red, (blue<<4) | green);
     f84:	61 2f       	mov	r22, r17
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	6c 71       	andi	r22, 0x1C	; 28
     f8a:	70 70       	andi	r23, 0x00	; 0
     f8c:	75 95       	asr	r23
     f8e:	67 95       	ror	r22
     f90:	75 95       	asr	r23
     f92:	67 95       	ror	r22
     f94:	21 2f       	mov	r18, r17
     f96:	22 95       	swap	r18
     f98:	26 95       	lsr	r18
     f9a:	27 70       	andi	r18, 0x07	; 7
     f9c:	22 95       	swap	r18
     f9e:	20 7f       	andi	r18, 0xF0	; 240
     fa0:	91 2f       	mov	r25, r17
     fa2:	93 70       	andi	r25, 0x03	; 3
     fa4:	29 2b       	or	r18, r25
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	42 2f       	mov	r20, r18
     faa:	47 df       	rcall	.-370    	; 0xe3a <newSeg>

	last_rbValue = rbValue;
     fac:	10 93 7d 00 	sts	0x007D, r17
}
     fb0:	1f 91       	pop	r17
     fb2:	08 95       	ret

00000fb4 <fb_to_rb>:
   //         |   Blue Value (0-3)
   //         Alpha... only partially implemented

#warning "This isn't at all optimized..."
   // Blue setting = Blue Value | 0x04
   uint8_t blueValue = (fbColor & 0x30) >> 4;
     fb4:	68 2f       	mov	r22, r24
     fb6:	70 e0       	ldi	r23, 0x00	; 0
   rb = (blueValue << 5) | 0x80;

   // Red setting = redVal << 1 | redVal & 0x01
   uint8_t redValue = (fbColor & 0x03);
   rb |= ((redValue << 1) | (redValue & 0x01)) << 2;
     fb8:	83 70       	andi	r24, 0x03	; 3
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9c 01       	movw	r18, r24
     fbe:	21 70       	andi	r18, 0x01	; 1
     fc0:	30 70       	andi	r19, 0x00	; 0
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	28 2b       	or	r18, r24
     fc8:	39 2b       	or	r19, r25
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	22 0f       	add	r18, r18
     fd0:	33 1f       	adc	r19, r19
     fd2:	20 68       	ori	r18, 0x80	; 128
     fd4:	ab 01       	movw	r20, r22
     fd6:	40 73       	andi	r20, 0x30	; 48
     fd8:	50 70       	andi	r21, 0x00	; 0
     fda:	44 0f       	add	r20, r20
     fdc:	55 1f       	adc	r21, r21
     fde:	24 2b       	or	r18, r20
     fe0:	cb 01       	movw	r24, r22
     fe2:	8c 70       	andi	r24, 0x0C	; 12
     fe4:	90 70       	andi	r25, 0x00	; 0
     fe6:	95 95       	asr	r25
     fe8:	87 95       	ror	r24
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
   // Green Setting = Green Value...
   uint8_t greenValue = (fbColor & 0x0C) >> 2;
   rb |= greenValue;

   return rb;
}
     fee:	82 2b       	or	r24, r18
     ff0:	08 95       	ret

00000ff2 <pll_enable>:
   // this is 64MHz/512=125kHz
   // The benefit of such high PWM frequency is the low RC values necessary
   //  for filtering to DC.
   // "To change Timer/Counter1 to the async mode follow this procedure"
   // 1: Enable the PLL
   setbit(PLLE, PLLCSR);
     ff2:	89 b5       	in	r24, 0x29	; 41
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	89 bd       	out	0x29, r24	; 41
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ff8:	88 ec       	ldi	r24, 0xC8	; 200
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <pll_enable+0xa>
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <pll_enable+0x12>
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
   {
      asm("nop");
    1002:	00 00       	nop
   // 2: Wait 100us for the PLL to stabilize
   // (can't use dmsWait since the timer updating the dmsCount hasn't yet been started!)
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
    1004:	09 b4       	in	r0, 0x29	; 41
    1006:	00 fe       	sbrs	r0, 0
    1008:	fc cf       	rjmp	.-8      	; 0x1002 <pll_enable+0x10>
   {
      asm("nop");
   }
   // 4: Set the PCKE bit to enable async mode
   setbit(PCKE, PLLCSR);
    100a:	89 b5       	in	r24, 0x29	; 41
    100c:	84 60       	ori	r24, 0x04	; 4
    100e:	89 bd       	out	0x29, r24	; 41

}
    1010:	08 95       	ret

00001012 <lvds_timerInit>:
   //Timer1 is used for LVDS (in PLL clocking mode)
  
  	//pll_enable();	
   
   //We want it to count 7 bits, 0-6 and reset at 7
   OCR1C = 6;
    1012:	86 e0       	ldi	r24, 0x06	; 6
    1014:	8b bd       	out	0x2b, r24	; 43

	//We want the clock to go low at TCNT=0 and high at TCNT=4
	CLOCK_OCR = 3; //2; //3;
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	8c bd       	out	0x2c, r24	; 44
	//PLL is 4MHz*8 = 32MHz
	// then TimerClockDivisor=8 gives 4MHz
	pll_enable();
	#define SLOW_LVDS_TEST TRUE
#elif (defined(OSCCAL_VAL))
   OSCCAL = OSCCAL_VAL;
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	81 bf       	out	0x31, r24	; 49
	//  (horizontally... pre LVDS_PRESCALER affecting DOTS_TO_CYC)
	//  so accessing *all* pixels in a row would make it even slower...
	// Further, it didn't seem to be paying attention to the fact that
	// the same pixels are drawn on multiple rows...
	// WTF? (the image was scaled, proportionately! 1pix x 1pix)
	pll_enable();
    101e:	e9 df       	rcall	.-46     	; 0xff2 <pll_enable>
	pll_enable();
	//#warning "The PLL configuration code is not in here yet!"
#endif

	//Set the Timer1 clock prescaler...
	writeMasked(CSBITS, 
    1020:	8f b5       	in	r24, 0x2f	; 47
    1022:	80 7f       	andi	r24, 0xF0	; 240
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	8f bd       	out	0x2f, r24	; 47
					TCCR1B);

	//Set the DeadTime prescaler (no prescaling, same speed as TCNT1)...
	// Allegedly this is prescaled from the PCK (or CK)
	// 	NOT from the Timer1 prescaler...
	writeMasked(DTPSBITS,
    1028:	8f b5       	in	r24, 0x2f	; 47
    102a:	80 63       	ori	r24, 0x30	; 48
    102c:	8f bd       	out	0x2f, r24	; 47
 
   //FastPWM
//Now Handled in lvds_xxxOnCompare():

	//These are also written below (excluding PWM1D)
	setbit(PWM1A, TCCR1A);  //Enable PWM on OC1A for DVH
    102e:	80 b7       	in	r24, 0x30	; 48
    1030:	82 60       	ori	r24, 0x02	; 2
    1032:	80 bf       	out	0x30, r24	; 48
                           //Need to do the same for other channels
  
	setbit(PWM1B, TCCR1A);  //Enable PWM on OC1B for CLOCK 
    1034:	80 b7       	in	r24, 0x30	; 48
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	80 bf       	out	0x30, r24	; 48

	setbit(PWM1D, TCCR1C);
    103a:	87 b5       	in	r24, 0x27	; 39
    103c:	81 60       	ori	r24, 0x01	; 1
    103e:	87 bd       	out	0x27, r24	; 39

	//PWM1D is not in TCCR1A...

	setoutPORT(PB1, PORTB);	//+OC1A, DVH/BLUE, MISO (usually heart)
    1040:	b9 9a       	sbi	0x17, 1	; 23
//	setoutPORT(PB0, PORTB);	//-OC1A 	MOSI unused
	setoutPORT(PB2, PORTB); //-OC1B, -GREEN	 (INVERTED) SCK
    1042:	ba 9a       	sbi	0x17, 2	; 23
	setoutPORT(PB3, PORTB); //+OC1B Clock (OC1B, not inverted)
    1044:	bb 9a       	sbi	0x17, 3	; 23
	setoutPORT(PB5, PORTB); //+OC1D, RED
    1046:	bd 9a       	sbi	0x17, 5	; 23


   writeMasked(((0<<WGM11) | (0<<WGM10)), //FastPWM (combined with above)
    1048:	86 b5       	in	r24, 0x26	; 38
    104a:	8c 7f       	andi	r24, 0xFC	; 252
    104c:	86 bd       	out	0x26, r24	; 38
//			   | (0<<COM1B1) | (1<<COM1B0) 
//			   | (1<<PWM1A) | (1<<PWM1B) )
//#define lvds_ComplementaryClrOnCompare() \ //
	//Do TCCR1C first, because it contains shadow-bits of TCCR1A that I
	// don't want to have to rewrite...
	TCCR1C = ( (1<<COM1D1) | (0<<COM1D0)
    104e:	89 e0       	ldi	r24, 0x09	; 9
    1050:	87 bd       	out	0x27, r24	; 39
				| (1<<PWM1D) );

	TCCR1A = ( (0<<COM1A1) | (1<<COM1A0) 
    1052:	83 e6       	ldi	r24, 0x63	; 99
    1054:	80 bf       	out	0x30, r24	; 48
   // PWM inversion must be enabled:

	//inverted with PWM1X
//   setbit(PWM1X, TCCR1B);
 
 	Nada_init();
    1056:	80 e3       	ldi	r24, 0x30	; 48
    1058:	84 bd       	out	0x24, r24	; 36
    105a:	84 e0       	ldi	r24, 0x04	; 4
    105c:	8d bd       	out	0x2d, r24	; 45
}
    105e:	08 95       	ret

00001060 <lcd_Init>:
//   (the fewer changes, the less likely we'll glitch...?)


void lcd_Init(void)
{
 	Nada_init();
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	84 bd       	out	0x24, r24	; 36
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	8d bd       	out	0x2d, r24	; 45
}
    1068:	08 95       	ret

0000106a <updateLCD>:

	//Hsync and Actually draw the pixels... (when DE is active)
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);
    106a:	20 91 74 00 	lds	r18, 0x0074
// rowNum is only used when DE is active...
//  and should be 0 at *drawn row* 0
void loadData(uint16_t rowNum, uint8_t dataEnable)
{
	//H Active pulse...
   if(vSync)
    106e:	80 91 75 00 	lds	r24, 0x0075
    1072:	88 23       	and	r24, r24
    1074:	39 f0       	breq	.+14     	; 0x1084 <updateLCD+0x1a>
   {
		//Vsync_fromNada() is called at the end of the last interupt
      VplusH_fromVsync();
    1076:	1d bc       	out	0x2d, r1	; 45
    1078:	8f ea       	ldi	r24, 0xAF	; 175
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <updateLCD+0x12>
      Hlow_Delay();
      Vsync_fromVplusH();
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	07 c0       	rjmp	.+14     	; 0x1092 <updateLCD+0x28>
      HD_Delay();
   }
   else
   {
      Hsync_fromNada();
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	8d bd       	out	0x2d, r24	; 45
    1088:	8f ea       	ldi	r24, 0xAF	; 175
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <updateLCD+0x22>
      Hlow_Delay();
      Nada_fromHsync();
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	8d bd       	out	0x2d, r24	; 45
    1094:	88 e5       	ldi	r24, 0x58	; 88
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <updateLCD+0x2e>
      HD_Delay();
   }

   if(dataEnable)
    109c:	22 23       	and	r18, r18
    109e:	09 f4       	brne	.+2      	; 0x10a2 <updateLCD+0x38>
    10a0:	32 c0       	rjmp	.+100    	; 0x1106 <Done_974+0x18>
void drawPix(uint8_t rowNum)
{
	//a/o v59-12ish: WTF, no comment about this?!
	// I believe this is to enable Green's output
	// which was disabled prior because...?
	TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
    10a2:	83 e5       	ldi	r24, 0x53	; 83
    10a4:	80 bf       	out	0x30, r24	; 48
		  "I"  (_SFR_IO_ADDR(DT1)),	//DT1: %6
		  "I"  (_SFR_IO_ADDR(OCR1A))	//OCR1A %7
	);
*/

__asm__ __volatile__
    10a6:	e8 ec       	ldi	r30, 0xC8	; 200
    10a8:	f0 e0       	ldi	r31, 0x00	; 0

000010aa <LoadNext_974>:
    10aa:	41 91       	ld	r20, Z+
    10ac:	54 2f       	mov	r21, r20
    10ae:	57 70       	andi	r21, 0x07	; 7
    10b0:	61 91       	ld	r22, Z+
    10b2:	76 2f       	mov	r23, r22
    10b4:	6f 70       	andi	r22, 0x0F	; 15
    10b6:	72 95       	swap	r23
    10b8:	7f 70       	andi	r23, 0x0F	; 15
    10ba:	5a bd       	out	0x2a, r21	; 42
    10bc:	64 bd       	out	0x24, r22	; 36
    10be:	7d bd       	out	0x2d, r23	; 45
    10c0:	48 7f       	andi	r20, 0xF8	; 248
    10c2:	a9 f0       	breq	.+42     	; 0x10ee <Done_974>
    10c4:	00 00       	nop
    10c6:	00 00       	nop

000010c8 <Counter_974>:
    10c8:	48 50       	subi	r20, 0x08	; 8
    10ca:	79 f3       	breq	.-34     	; 0x10aa <LoadNext_974>
    10cc:	00 00       	nop
    10ce:	00 00       	nop
    10d0:	00 00       	nop
    10d2:	00 00       	nop
    10d4:	00 00       	nop
    10d6:	00 00       	nop
    10d8:	00 00       	nop
    10da:	00 00       	nop
    10dc:	00 00       	nop
    10de:	00 00       	nop
    10e0:	00 00       	nop
    10e2:	00 00       	nop
    10e4:	00 00       	nop
    10e6:	00 00       	nop
    10e8:	00 00       	nop
    10ea:	00 00       	nop
    10ec:	ed cf       	rjmp	.-38     	; 0x10c8 <Counter_974>

000010ee <Done_974>:
    10ee:	80 e8       	ldi	r24, 0x80	; 128
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <Done_974+0x4>
		// Actually, it's quite handy, because it shows where drawSegs has
		// completed... (I thought it stretched to the end of DE, but nope)
		// The "bug" with PLL_SYSCLK's white bars now appears to be quite
		// apparently due to carry-over from a previous line
		// rather than an Hsync problem, as now it appears cyan.
		OCR1D = 0;
    10f6:	1a bc       	out	0x2a, r1	; 42
		// green seems to be floating between the last pixel and the
		// delay_cyc (!)
		//Disable complementary-output for Green 
		//  (on /OC1B, where CLK is OC1B)
		// Since Nada, V, and H DT's might be bad for clocking.
		TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
    10f8:	83 e6       	ldi	r24, 0x63	; 99
    10fa:	80 bf       	out	0x30, r24	; 48
         | (1<<COM1B1) | (0<<COM1B0)
         | (1<<PWM1A) | (1<<PWM1B) );

		fullBlue();
    10fc:	14 bc       	out	0x24, r1	; 36
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	8d bd       	out	0x2d, r24	; 45
		Nada_fromDEonly();
    1102:	80 e3       	ldi	r24, 0x30	; 48
    1104:	84 bd       	out	0x24, r24	; 36
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);

	hsyncCount++;
    1106:	80 91 76 00 	lds	r24, 0x0076
    110a:	90 91 77 00 	lds	r25, 0x0077
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	90 93 77 00 	sts	0x0077, r25
    1114:	80 93 76 00 	sts	0x0076, r24

	switch(hsyncCount)
    1118:	83 32       	cpi	r24, 0x23	; 35
    111a:	91 05       	cpc	r25, r1
    111c:	c1 f0       	breq	.+48     	; 0x114e <Done_974+0x60>
    111e:	84 32       	cpi	r24, 0x24	; 36
    1120:	91 05       	cpc	r25, r1
    1122:	20 f4       	brcc	.+8      	; 0x112c <Done_974+0x3e>
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	e1 f4       	brne	.+56     	; 0x1162 <Done_974+0x74>
    112a:	08 c0       	rjmp	.+16     	; 0x113c <Done_974+0x4e>
    112c:	86 32       	cpi	r24, 0x26	; 38
    112e:	91 05       	cpc	r25, r1
    1130:	a9 f0       	breq	.+42     	; 0x115c <Done_974+0x6e>
    1132:	23 e0       	ldi	r18, 0x03	; 3
    1134:	86 32       	cpi	r24, 0x26	; 38
    1136:	92 07       	cpc	r25, r18
    1138:	a1 f4       	brne	.+40     	; 0x1162 <Done_974+0x74>
    113a:	15 c0       	rjmp	.+42     	; 0x1166 <Done_974+0x78>
	{
		//V Front Porch, begins with initLCD

		//Vsync H->L (Begin V-Sync)
		case T_DV:
			dataEnable = FALSE;
    113c:	10 92 74 00 	sts	0x0074, r1
			//clrpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = TRUE;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 75 00 	sts	0x0075, r24
			Vsync_fromNada();
    1146:	80 e4       	ldi	r24, 0x40	; 64
    1148:	84 bd       	out	0x24, r24	; 36
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <Done_974+0x6a>
		//	if(hfm_nextOutput(&modulator))
		//		colorOverride = 0xff;
		//	else
		//		colorOverride = 7;
			//setpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = FALSE;
    114e:	10 92 75 00 	sts	0x0075, r1
			Nada_fromVsync();
    1152:	80 e3       	ldi	r24, 0x30	; 48
    1154:	84 bd       	out	0x24, r24	; 36
    1156:	84 e0       	ldi	r24, 0x04	; 4
    1158:	8d bd       	out	0x2d, r24	; 45
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <Done_974+0x74>
			break;
		//Start of frame (DE active)
		case T_VD +(T_Vlow + T_DV):
			dataEnable = TRUE;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 74 00 	sts	0x0074, r24
    1162:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1164:	08 95       	ret
		// All rows have been displayed
		// Return to V Front Porch
		case V_COUNT +(T_VD + T_Vlow + T_DV):
			dataEnable = FALSE;
    1166:	10 92 74 00 	sts	0x0074, r1
		//	break;
		//Frame complete
		//case HSYNC_COUNT_FRAME_COMPLETE:
			//T_DV +(V_COUNT+T_VD+T_Vlow) + FRAME_UPDATE_DELAY:
			hsyncCount = 0;
    116a:	10 92 77 00 	sts	0x0077, r1
    116e:	10 92 76 00 	sts	0x0076, r1
    1172:	81 e0       	ldi	r24, 0x01	; 1
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...

	return frameComplete;
}
    1174:	08 95       	ret

00001176 <init_timer0Hsync>:
//Testing with values returned by timer0Calculator
//#define TIMER0_OCRVAL	65

void init_timer0Hsync(void)
{
   OCR0A = TIMER0_OCRVAL; //T_Hlow_CYC + T_HD_CYC + T_DE_CYC + T_DH_CYC;
    1176:	89 e9       	ldi	r24, 0x99	; 153
    1178:	83 bb       	out	0x13, r24	; 19
   timer_setWGM(0, WGM_CLR_ON_COMPARE);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	38 db       	rcall	.-2448   	; 0x7f0 <timer_setWGM>
   timer_selectDivisor(0, TIMER0_CLKDIV); //CLKDIV1);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	68 e0       	ldi	r22, 0x08	; 8
    1184:	0c db       	rcall	.-2536   	; 0x79e <timer_selectDivisor>
   timer_compareMatchIntEnable(0, OUT_CHANNELA);
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	41 e0       	ldi	r20, 0x01	; 1
    118c:	65 db       	rcall	.-2358   	; 0x858 <timer_compareMatchIntSetup>
}
    118e:	08 95       	ret

00001190 <main>:
	adc_takeInput(6);
	adc_init();
	adc_select(6);
#endif

	tetInit(7);
    1190:	87 e0       	ldi	r24, 0x07	; 7
    1192:	bf dc       	rcall	.-1666   	; 0xb12 <tetInit>

	init_timer0Hsync();
    1194:	f0 df       	rcall	.-32     	; 0x1176 <init_timer0Hsync>
	//This starts pretty late... watch out for WDT
	init_heartBeat();

	setHeartRate(0);

	lvds_timerInit();
    1196:	3d df       	rcall	.-390    	; 0x1012 <lvds_timerInit>
	uint8_t imageNum = 0;
	uint8_t colorShift = 0;
	while(1)
	{
 #if (defined(FRAME_SYNC) && FRAME_SYNC)
		if(frameCount==0 && !getbit(OCIE0A, T0_TIMSK))
    1198:	80 91 78 00 	lds	r24, 0x0078
    119c:	88 23       	and	r24, r24
    119e:	39 f4       	brne	.+14     	; 0x11ae <main+0x1e>
    11a0:	89 b7       	in	r24, 0x39	; 57
    11a2:	80 71       	andi	r24, 0x10	; 16
    11a4:	e9 f7       	brne	.-6      	; 0x11a0 <main+0x10>
 #if (defined(LIFE) && LIFE)
			lifeRound();
 #endif //LIFE
 
 #if (FRAME_COUNT_TO_DELAY != 0)
			timer_compareMatchIntEnable(0, OUT_CHANNELA);
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	56 db       	rcall	.-2388   	; 0x858 <timer_compareMatchIntSetup>
    11ac:	f5 cf       	rjmp	.-22     	; 0x1198 <main+0x8>
    11ae:	ff cf       	rjmp	.-2      	; 0x11ae <main+0x1e>

000011b0 <__vector_14>:
#include _LCDSTUFF_CFILE_
//#include "../../../_commonCode/lcdStuff/0.50ncf/lcdStuff.c"
//#include "lcdUpdate.c"

SIGNAL(TIMER0_COMPA_vect)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	9f 92       	push	r9
    11bc:	af 92       	push	r10
    11be:	bf 92       	push	r11
    11c0:	cf 92       	push	r12
    11c2:	df 92       	push	r13
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <__vector_14+0x3a>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	setpinPORT(PB2, PORTB);
	clrpinPORT(PB2, PORTB);
#endif


	if(updateLCD())
    11ee:	3d df       	rcall	.-390    	; 0x106a <updateLCD>
    11f0:	88 23       	and	r24, r24
    11f2:	69 f0       	breq	.+26     	; 0x120e <__vector_14+0x5e>
	{
#if (FRAME_COUNT_TO_DELAY != 0)
			//static uint8_t frameCount = 0;
			frameCount++;
    11f4:	80 91 79 00 	lds	r24, 0x0079
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	80 93 79 00 	sts	0x0079, r24
			if(frameCount == FRAME_COUNT_TO_DELAY)
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	31 f4       	brne	.+12     	; 0x120e <__vector_14+0x5e>
			{
				frameCount = 0;
    1202:	10 92 79 00 	sts	0x0079, r1
				timer_compareMatchIntSetup(0, OUT_CHANNELA, FALSE);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	25 db       	rcall	.-2486   	; 0x858 <timer_compareMatchIntSetup>
	}

#if(defined(LOADROW) && LOADROW)
	//Load the next row into the row(seg)buffer
	//data is enabled after T_VD+T_Vlow...
	if((hsyncCount >= T_VD+T_Vlow) && (hsyncCount < T_VD+T_Vlow+V_COUNT))
    120e:	00 91 76 00 	lds	r16, 0x0076
    1212:	10 91 77 00 	lds	r17, 0x0077
    1216:	03 52       	subi	r16, 0x23	; 35
    1218:	10 40       	sbci	r17, 0x00	; 0
    121a:	23 e0       	ldi	r18, 0x03	; 3
    121c:	00 30       	cpi	r16, 0x00	; 0
    121e:	12 07       	cpc	r17, r18
    1220:	08 f0       	brcs	.+2      	; 0x1224 <__vector_14+0x74>
    1222:	c5 c1       	rjmp	.+906    	; 0x15ae <__vector_14+0x3fe>

 #elif (defined(SEG_SINE) && SEG_SINE)
	static uint16_t lastThetaOffset = 0;
	static uint8_t frameCount = 0;

	if(rowNum == 0)
    1224:	01 15       	cp	r16, r1
    1226:	11 05       	cpc	r17, r1
    1228:	71 f4       	brne	.+28     	; 0x1246 <__vector_14+0x96>
	{
		lastThetaOffset+=16;
    122a:	80 91 7b 00 	lds	r24, 0x007B
    122e:	90 91 7c 00 	lds	r25, 0x007C
    1232:	40 96       	adiw	r24, 0x10	; 16
    1234:	90 93 7c 00 	sts	0x007C, r25
    1238:	80 93 7b 00 	sts	0x007B, r24
		frameCount++;
    123c:	80 91 7a 00 	lds	r24, 0x007A
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	80 93 7a 00 	sts	0x007A, r24
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
    1246:	10 92 73 00 	sts	0x0073, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
    124a:	86 e0       	ldi	r24, 0x06	; 6
    124c:	80 93 c8 00 	sts	0x00C8, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
    1250:	83 e6       	ldi	r24, 0x63	; 99
    1252:	80 93 c9 00 	sts	0x00C9, r24
// I think I've seen this before.
#if(defined(PLL_SYSCLK) && PLL_SYSCLK)
	//This doesn't seem to matter...
	addSegfb(12, _W);
#else
	addSegfb(3, _W);
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	67 e0       	ldi	r22, 0x07	; 7
    125c:	43 e7       	ldi	r20, 0x73	; 115
    125e:	5c de       	rcall	.-840    	; 0xf18 <addSeg>
#endif

	uint8_t sineVal = (uint8_t)((int8_t)128 + 
    1260:	80 91 7b 00 	lds	r24, 0x007B
    1264:	90 91 7c 00 	lds	r25, 0x007C
    1268:	80 0f       	add	r24, r16
    126a:	91 1f       	adc	r25, r17
    126c:	c2 db       	rcall	.-2172   	; 0x9f2 <sineRaw8>
			sineRaw8(rowNum+lastThetaOffset));
    126e:	70 e8       	ldi	r23, 0x80	; 128
    1270:	f7 2e       	mov	r15, r23
    1272:	f8 0e       	add	r15, r24

	uint8_t nextSineVal = (uint8_t)((int8_t)128 +
    1274:	80 91 7b 00 	lds	r24, 0x007B
    1278:	90 91 7c 00 	lds	r25, 0x007C
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	80 0f       	add	r24, r16
    1280:	91 1f       	adc	r25, r17
    1282:	b7 db       	rcall	.-2194   	; 0x9f2 <sineRaw8>
			sineRaw8(rowNum+1+lastThetaOffset));
    1284:	80 58       	subi	r24, 0x80	; 128

	uint8_t length; 

	//If the step-size is greater than one pixel, we'll see hashing
	// this should fix that.
	if(nextSineVal < sineVal)
    1286:	8f 15       	cp	r24, r15
    1288:	20 f4       	brcc	.+8      	; 0x1292 <__vector_14+0xe2>
	{
		length = (sineVal - nextSineVal);
    128a:	ef 2c       	mov	r14, r15
    128c:	e8 1a       	sub	r14, r24
		//This assures that the additional length of the white-segment
		// goes in the proper direction...
		sineVal-=length;//*4;
    128e:	fe 18       	sub	r15, r14
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__vector_14+0xea>
	}
	else if(nextSineVal > sineVal)
    1292:	f8 16       	cp	r15, r24
    1294:	20 f4       	brcc	.+8      	; 0x129e <__vector_14+0xee>
		length = (nextSineVal - sineVal);
    1296:	e8 2e       	mov	r14, r24
    1298:	ef 18       	sub	r14, r15
		
	//But we don't want zero-length white segments (where the sine values
	// are horizontal)
	if(length == 0)
    129a:	ee 20       	and	r14, r14
    129c:	11 f4       	brne	.+4      	; 0x12a2 <__vector_14+0xf2>
    129e:	ee 24       	eor	r14, r14
    12a0:	e3 94       	inc	r14
		length = 1;

	uint8_t rgbVal=0;
	uint8_t J=0;
	uint8_t j = frameCount;
    12a2:	90 90 7a 00 	lds	r9, 0x007A
    12a6:	e0 e0       	ldi	r30, 0x00	; 0
{
	while(value > 0x2f)
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    12a8:	63 e0       	ldi	r22, 0x03	; 3
    12aa:	d6 2e       	mov	r13, r22
		J++;
		j++; // = J+frameCount;
		
		rgbVal = rgbGradient(j);

		if((uint16_t)J*(uint16_t)WIDTH>=sineVal)
    12ac:	af 2c       	mov	r10, r15
    12ae:	bb 24       	eor	r11, r11
	uint8_t j = frameCount;

#define WIDTH 5//3//4
	while(1)
	{
		J++;
    12b0:	ce 2e       	mov	r12, r30
    12b2:	c3 94       	inc	r12
    12b4:	6c 2d       	mov	r22, r12
    12b6:	69 0d       	add	r22, r9
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <__vector_14+0x10c>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    12ba:	60 53       	subi	r22, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    12bc:	60 33       	cpi	r22, 0x30	; 48
    12be:	e8 f7       	brcc	.-6      	; 0x12ba <__vector_14+0x10a>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
    12c0:	46 2f       	mov	r20, r22
    12c2:	43 70       	andi	r20, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	62 ff       	sbrs	r22, 2
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <__vector_14+0x120>
    12ca:	3d 2d       	mov	r19, r13
    12cc:	34 1b       	sub	r19, r20
    12ce:	43 2f       	mov	r20, r19
	uint8_t G = ((value)&0x0C)>>2; 
    12d0:	9b 01       	movw	r18, r22
    12d2:	2c 70       	andi	r18, 0x0C	; 12
    12d4:	30 70       	andi	r19, 0x00	; 0
    12d6:	35 95       	asr	r19
    12d8:	27 95       	ror	r18
    12da:	35 95       	asr	r19
    12dc:	27 95       	ror	r18
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
    12de:	64 ff       	sbrs	r22, 4
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <__vector_14+0x138>
    12e2:	8d 2d       	mov	r24, r13
    12e4:	82 1b       	sub	r24, r18
    12e6:	28 2f       	mov	r18, r24
	uint8_t B = ((value)&0x30) >> 4; 
    12e8:	cb 01       	movw	r24, r22
    12ea:	80 73       	andi	r24, 0x30	; 48
    12ec:	90 70       	andi	r25, 0x00	; 0
    12ee:	34 e0       	ldi	r19, 0x04	; 4
    12f0:	95 95       	asr	r25
    12f2:	87 95       	ror	r24
    12f4:	3a 95       	dec	r19
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <__vector_14+0x140>
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    12f8:	66 ff       	sbrs	r22, 6
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <__vector_14+0x152>
    12fc:	9d 2d       	mov	r25, r13
    12fe:	98 1b       	sub	r25, r24
    1300:	89 2f       	mov	r24, r25

	return rgb(r,g,b);
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	23 70       	andi	r18, 0x03	; 3
    1306:	30 70       	andi	r19, 0x00	; 0
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	43 70       	andi	r20, 0x03	; 3
    1312:	42 2b       	or	r20, r18
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	83 70       	andi	r24, 0x03	; 3
    1318:	90 70       	andi	r25, 0x00	; 0
    131a:	b4 e0       	ldi	r27, 0x04	; 4
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	ba 95       	dec	r27
    1322:	e1 f7       	brne	.-8      	; 0x131c <__vector_14+0x16c>
    1324:	48 2b       	or	r20, r24
		j++; // = J+frameCount;
		
		rgbVal = rgbGradient(j);

		if((uint16_t)J*(uint16_t)WIDTH>=sineVal)
    1326:	8c 2d       	mov	r24, r12
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	65 e0       	ldi	r22, 0x05	; 5
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	6c d2       	rcall	.+1240   	; 0x1808 <__mulhi3>
    1330:	24 2f       	mov	r18, r20
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	f4 2f       	mov	r31, r20
    1336:	f1 70       	andi	r31, 0x01	; 1
    1338:	40 73       	andi	r20, 0x30	; 48
    133a:	8a 15       	cp	r24, r10
    133c:	9b 05       	cpc	r25, r11
    133e:	98 f4       	brcc	.+38     	; 0x1366 <__vector_14+0x1b6>
			break;

		addSegfb(WIDTH, rgbVal);
    1340:	b9 01       	movw	r22, r18
    1342:	63 70       	andi	r22, 0x03	; 3
    1344:	70 70       	andi	r23, 0x00	; 0
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	6f 2b       	or	r22, r31
    134c:	40 64       	ori	r20, 0x40	; 64
    134e:	2c 70       	andi	r18, 0x0C	; 12
    1350:	30 70       	andi	r19, 0x00	; 0
    1352:	35 95       	asr	r19
    1354:	27 95       	ror	r18
    1356:	35 95       	asr	r19
    1358:	27 95       	ror	r18
    135a:	42 2b       	or	r20, r18
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	db dd       	rcall	.-1098   	; 0xf18 <addSeg>
    1362:	ec 2d       	mov	r30, r12
    1364:	a5 cf       	rjmp	.-182    	; 0x12b0 <__vector_14+0x100>
	}

	J--;

	addSegfb(sineVal-(uint16_t)J*(uint16_t)WIDTH, rgbVal); 
    1366:	8e 2f       	mov	r24, r30
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	65 e0       	ldi	r22, 0x05	; 5
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	4c d2       	rcall	.+1176   	; 0x1808 <__mulhi3>
    1370:	b9 01       	movw	r22, r18
    1372:	63 70       	andi	r22, 0x03	; 3
    1374:	70 70       	andi	r23, 0x00	; 0
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	6f 2b       	or	r22, r31
    137c:	40 64       	ori	r20, 0x40	; 64
    137e:	2c 70       	andi	r18, 0x0C	; 12
    1380:	30 70       	andi	r19, 0x00	; 0
    1382:	35 95       	asr	r19
    1384:	27 95       	ror	r18
    1386:	35 95       	asr	r19
    1388:	27 95       	ror	r18
    138a:	42 2b       	or	r20, r18
    138c:	95 01       	movw	r18, r10
    138e:	28 1b       	sub	r18, r24
    1390:	39 0b       	sbc	r19, r25
    1392:	c9 01       	movw	r24, r18
    1394:	c1 dd       	rcall	.-1150   	; 0xf18 <addSeg>

	addSegfb(length, _W); 
    1396:	8e 2d       	mov	r24, r14
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	67 e0       	ldi	r22, 0x07	; 7
    139c:	43 e7       	ldi	r20, 0x73	; 115
    139e:	bc dd       	rcall	.-1160   	; 0xf18 <addSeg>
	addSegfb(257-sineVal-length, rgbGradient(rowNum/8)); //rowNum/8);
    13a0:	68 01       	movw	r12, r16
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	d6 94       	lsr	r13
    13a6:	c7 94       	ror	r12
    13a8:	8a 95       	dec	r24
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <__vector_14+0x1f4>
    13ac:	8c 2d       	mov	r24, r12
    13ae:	9c 2d       	mov	r25, r12
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <__vector_14+0x204>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    13b2:	90 53       	subi	r25, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    13b4:	90 33       	cpi	r25, 0x30	; 48
    13b6:	e8 f7       	brcc	.-6      	; 0x13b2 <__vector_14+0x202>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
    13b8:	69 2f       	mov	r22, r25
    13ba:	63 70       	andi	r22, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    13bc:	92 ff       	sbrs	r25, 2
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <__vector_14+0x216>
    13c0:	23 e0       	ldi	r18, 0x03	; 3
    13c2:	26 1b       	sub	r18, r22
    13c4:	62 2f       	mov	r22, r18
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    13c6:	98 2f       	mov	r25, r24
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <__vector_14+0x21c>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    13ca:	90 53       	subi	r25, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    13cc:	90 33       	cpi	r25, 0x30	; 48
    13ce:	e8 f7       	brcc	.-6      	; 0x13ca <__vector_14+0x21a>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
    13d0:	79 2f       	mov	r23, r25
    13d2:	73 70       	andi	r23, 0x03	; 3
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    13d4:	92 ff       	sbrs	r25, 2
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <__vector_14+0x22e>
    13d8:	23 e0       	ldi	r18, 0x03	; 3
    13da:	27 1b       	sub	r18, r23
    13dc:	72 2f       	mov	r23, r18
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    13de:	28 2f       	mov	r18, r24
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <__vector_14+0x234>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    13e2:	20 53       	subi	r18, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    13e4:	20 33       	cpi	r18, 0x30	; 48
    13e6:	e8 f7       	brcc	.-6      	; 0x13e2 <__vector_14+0x232>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    13e8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t G = ((value)&0x0C)>>2; 
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
	uint8_t B = ((value)&0x30) >> 4; 
    13ea:	a9 01       	movw	r20, r18
    13ec:	40 73       	andi	r20, 0x30	; 48
    13ee:	50 70       	andi	r21, 0x00	; 0
    13f0:	b4 e0       	ldi	r27, 0x04	; 4
    13f2:	55 95       	asr	r21
    13f4:	47 95       	ror	r20
    13f6:	ba 95       	dec	r27
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <__vector_14+0x242>
    13fa:	54 2f       	mov	r21, r20
	uint8_t b = ((value)&0x40) ? (3-B) : B ;
    13fc:	26 ff       	sbrs	r18, 6
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <__vector_14+0x25a>
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	94 1b       	sub	r25, r20
    1404:	59 2f       	mov	r21, r25
    1406:	01 c0       	rjmp	.+2      	; 0x140a <__vector_14+0x25a>
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
		value -= 0x30;
    1408:	80 53       	subi	r24, 0x30	; 48
uint8_t rgbGradient(uint8_t value) \
	__attribute__((__always_inline__));

uint8_t rgbGradient(uint8_t value)
{
	while(value > 0x2f)
    140a:	80 33       	cpi	r24, 0x30	; 48
    140c:	e8 f7       	brcc	.-6      	; 0x1408 <__vector_14+0x258>
		value -= 0x30;

	uint8_t R = ((value)&0x03); 
	uint8_t r = ((value)&0x04) ? (3-R) : R ; 
    140e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t G = ((value)&0x0C)>>2; 
    1410:	9c 01       	movw	r18, r24
    1412:	2c 70       	andi	r18, 0x0C	; 12
    1414:	30 70       	andi	r19, 0x00	; 0
    1416:	35 95       	asr	r19
    1418:	27 95       	ror	r18
    141a:	35 95       	asr	r19
    141c:	27 95       	ror	r18
    141e:	42 2f       	mov	r20, r18
	uint8_t g = ((value)&0x10) ? (3-G) : G ; 
    1420:	84 ff       	sbrs	r24, 4
    1422:	03 c0       	rjmp	.+6      	; 0x142a <__vector_14+0x27a>
    1424:	23 e0       	ldi	r18, 0x03	; 3
    1426:	24 1b       	sub	r18, r20
    1428:	42 2f       	mov	r20, r18
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	31 e0       	ldi	r19, 0x01	; 1
    142e:	2f 19       	sub	r18, r15
    1430:	31 09       	sbc	r19, r1
    1432:	71 70       	andi	r23, 0x01	; 1
    1434:	63 70       	andi	r22, 0x03	; 3
    1436:	66 0f       	add	r22, r22
    1438:	67 2b       	or	r22, r23
    143a:	95 2f       	mov	r25, r21
    143c:	92 95       	swap	r25
    143e:	90 73       	andi	r25, 0x30	; 48
    1440:	90 64       	ori	r25, 0x40	; 64
    1442:	43 70       	andi	r20, 0x03	; 3
    1444:	49 2b       	or	r20, r25
    1446:	c9 01       	movw	r24, r18
    1448:	8e 19       	sub	r24, r14
    144a:	91 09       	sbc	r25, r1
    144c:	65 dd       	rcall	.-1334   	; 0xf18 <addSeg>

	addSegfb(3, _W);
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	67 e0       	ldi	r22, 0x07	; 7
    1454:	43 e7       	ldi	r20, 0x73	; 115
    1456:	60 dd       	rcall	.-1344   	; 0xf18 <addSeg>

	//Draw a sideways character...
	{
		addSegfb(3, _R);
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	67 e0       	ldi	r22, 0x07	; 7
    145e:	40 e4       	ldi	r20, 0x40	; 64
    1460:	5b dd       	rcall	.-1354   	; 0xf18 <addSeg>
		// starting with the lower-case letters which are shifted down a row
	   // and some garbage in the top row...
		// now I get that I'm reading weird memory locations, but this
		// doesn't seem right. I should be accessing outside the array 
		// altogether, no? 	
		char thisChar = (rowNum/8)%('~'-' '+1) + ' '; //pgm_read_byte(&(string[rowNum/8])); 
    1462:	c6 01       	movw	r24, r12
    1464:	6f e5       	ldi	r22, 0x5F	; 95
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	e1 d1       	rcall	.+962    	; 0x182c <__udivmodhi4>
    146a:	80 5e       	subi	r24, 0xE0	; 224
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	c8 01       	movw	r24, r16
    1470:	87 70       	andi	r24, 0x07	; 7
    1472:	90 70       	andi	r25, 0x00	; 0
    1474:	f1 e0       	ldi	r31, 0x01	; 1
    1476:	ef 2e       	mov	r14, r31
    1478:	f1 2c       	mov	r15, r1
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <__vector_14+0x2d0>
    147c:	ee 0c       	add	r14, r14
    147e:	ff 1c       	adc	r15, r15
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <__vector_14+0x2cc>
    1484:	e0 e8       	ldi	r30, 0x80	; 128
    1486:	ae 2e       	mov	r10, r30
    1488:	e2 e0       	ldi	r30, 0x02	; 2
    148a:	be 2e       	mov	r11, r30

		//Ironically, there are exactly the number of characters to be
		// displayed in 768 lines (plus one on the right, to center)
		for(i=8; i>0; i--)
		{
			if(getbit(rowNum%8, getCharRow(thisChar,i-1)))
    148c:	e9 81       	ldd	r30, Y+1	; 0x01
    148e:	c5 01       	movw	r24, r10
    1490:	8e 0f       	add	r24, r30
    1492:	91 1d       	adc	r25, r1
    1494:	fc 01       	movw	r30, r24
    1496:	e4 5b       	subi	r30, 0xB4	; 180
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	84 91       	lpm	r24, Z
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	8e 21       	and	r24, r14
    14a0:	9f 21       	and	r25, r15
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <__vector_14+0x300>
				addSegfb(1, _Y); //0x06, (4<<4) | 3);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	67 e0       	ldi	r22, 0x07	; 7
    14ac:	43 e4       	ldi	r20, 0x43	; 67
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <__vector_14+0x308>
			else
				addSegfb(1, _R); //0x06, (4<<4) | 0);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	67 e0       	ldi	r22, 0x07	; 7
    14b6:	40 e4       	ldi	r20, 0x40	; 64
    14b8:	2f dd       	rcall	.-1442   	; 0xf18 <addSeg>
    14ba:	20 ea       	ldi	r18, 0xA0	; 160
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	a2 0e       	add	r10, r18
    14c0:	b3 1e       	adc	r11, r19
		char thisChar = (rowNum/8)%('~'-' '+1) + ' '; //pgm_read_byte(&(string[rowNum/8])); 
		//'A'; //string[rowNum/8];

		//Ironically, there are exactly the number of characters to be
		// displayed in 768 lines (plus one on the right, to center)
		for(i=8; i>0; i--)
    14c2:	30 e8       	ldi	r19, 0x80	; 128
    14c4:	a3 16       	cp	r10, r19
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	b3 06       	cpc	r11, r19
    14ca:	01 f7       	brne	.-64     	; 0x148c <__vector_14+0x2dc>
				addSegfb(1, _Y); //0x06, (4<<4) | 3);
			else
				addSegfb(1, _R); //0x06, (4<<4) | 0);
		}

		addSegfb(3, _R); //0x06, (4<<4) | 0);
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	67 e0       	ldi	r22, 0x07	; 7
    14d2:	40 e4       	ldi	r20, 0x40	; 64
    14d4:	21 dd       	rcall	.-1470   	; 0xf18 <addSeg>

		addSegfb(1, _W); //0x04, (6<<4) | 3);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	67 e0       	ldi	r22, 0x07	; 7
    14dc:	43 e7       	ldi	r20, 0x73	; 115
    14de:	1c dd       	rcall	.-1480   	; 0xf18 <addSeg>

		//PGM_P charPtr = strchrnul_P(
		PGM_P tqbf = PSTR(" The Quick Brown Fox Jumped Over The Lazy Dog! \177"); 
		//, rowNum/8);

		strncpy_P(&thisChar, tqbf+(rowNum/8), 1);
    14e0:	b6 01       	movw	r22, r12
    14e2:	6c 57       	subi	r22, 0x7C	; 124
    14e4:	79 4f       	sbci	r23, 0xF9	; 249
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	10 d2       	rcall	.+1056   	; 0x1910 <strncpy_P>

		addSegfb(3, rgb(0,0,1));//_B); //0, (6<<4) | 0);
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	40 e5       	ldi	r20, 0x50	; 80
    14f8:	0f dd       	rcall	.-1506   	; 0xf18 <addSeg>

		if(rowNum/8 < strlen_P(tqbf))
    14fa:	84 e8       	ldi	r24, 0x84	; 132
    14fc:	96 e0       	ldi	r25, 0x06	; 6
    14fe:	ff d1       	rcall	.+1022   	; 0x18fe <strlen_P>
    1500:	c8 16       	cp	r12, r24
    1502:	d9 06       	cpc	r13, r25
    1504:	20 f5       	brcc	.+72     	; 0x154e <__vector_14+0x39e>
    1506:	70 e8       	ldi	r23, 0x80	; 128
    1508:	c7 2e       	mov	r12, r23
    150a:	72 e0       	ldi	r23, 0x02	; 2
    150c:	d7 2e       	mov	r13, r23
		{
			for(i=8; i>0; i--)
			{
				if(getbit(rowNum%8, getCharRow(thisChar,i-1)))
    150e:	e9 81       	ldd	r30, Y+1	; 0x01
    1510:	c6 01       	movw	r24, r12
    1512:	8e 0f       	add	r24, r30
    1514:	91 1d       	adc	r25, r1
    1516:	fc 01       	movw	r30, r24
    1518:	e4 5b       	subi	r30, 0xB4	; 180
    151a:	fe 4f       	sbci	r31, 0xFE	; 254
    151c:	84 91       	lpm	r24, Z
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	8e 21       	and	r24, r14
    1522:	9f 21       	and	r25, r15
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	21 f0       	breq	.+8      	; 0x1530 <__vector_14+0x380>
					addSegfb(1, rgb(3,0,1));//_C); //0, (6<<4) | 3);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	67 e0       	ldi	r22, 0x07	; 7
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <__vector_14+0x386>
				else
					addSegfb(1, rgb(0,0,1));//_B); //0, (6<<4) | 0);
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	40 e5       	ldi	r20, 0x50	; 80
    1538:	ef dc       	rcall	.-1570   	; 0xf18 <addSeg>
    153a:	20 ea       	ldi	r18, 0xA0	; 160
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	c2 0e       	add	r12, r18
    1540:	d3 1e       	adc	r13, r19

		addSegfb(3, rgb(0,0,1));//_B); //0, (6<<4) | 0);

		if(rowNum/8 < strlen_P(tqbf))
		{
			for(i=8; i>0; i--)
    1542:	30 e8       	ldi	r19, 0x80	; 128
    1544:	c3 16       	cp	r12, r19
    1546:	3f ef       	ldi	r19, 0xFF	; 255
    1548:	d3 06       	cpc	r13, r19
    154a:	09 f7       	brne	.-62     	; 0x150e <__vector_14+0x35e>
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <__vector_14+0x3a8>
				else
					addSegfb(1, rgb(0,0,1));//_B); //0, (6<<4) | 0);
			}
		}
		else
			addSegfb(8, rgb(0,0,1));//_B); //0,(6<<4) | 0);
    154e:	88 e0       	ldi	r24, 0x08	; 8
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	40 e5       	ldi	r20, 0x50	; 80
    1556:	e0 dc       	rcall	.-1600   	; 0xf18 <addSeg>

		addSegfb(3, rgb(0,0,1));//_B); //0,(6<<4)|0);
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	40 e5       	ldi	r20, 0x50	; 80
    1560:	db dc       	rcall	.-1610   	; 0xf18 <addSeg>

	//newSeg(3,0x06,(4<<4) | 0);

	uint8_t i;
	for(i=0; i<64; i++)
		addSegfb(1, (i+rowNum/4)&0x3f);
    1562:	16 95       	lsr	r17
    1564:	07 95       	ror	r16
    1566:	16 95       	lsr	r17
    1568:	07 95       	ror	r16
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	40 2f       	mov	r20, r16
    156e:	60 2f       	mov	r22, r16
    1570:	63 70       	andi	r22, 0x03	; 3
    1572:	66 0f       	add	r22, r22
    1574:	80 2f       	mov	r24, r16
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	68 2b       	or	r22, r24
    157a:	40 73       	andi	r20, 0x30	; 48
    157c:	40 64       	ori	r20, 0x40	; 64
    157e:	c8 01       	movw	r24, r16
    1580:	8c 70       	andi	r24, 0x0C	; 12
    1582:	90 70       	andi	r25, 0x00	; 0
    1584:	96 95       	lsr	r25
    1586:	87 95       	ror	r24
    1588:	96 95       	lsr	r25
    158a:	87 95       	ror	r24
    158c:	48 2b       	or	r20, r24
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	2a 83       	std	Y+2, r18	; 0x02
    1594:	c1 dc       	rcall	.-1662   	; 0xf18 <addSeg>
	}

	//newSeg(3,0x06,(4<<4) | 0);

	uint8_t i;
	for(i=0; i<64; i++)
    1596:	2a 81       	ldd	r18, Y+2	; 0x02
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	0f 5f       	subi	r16, 0xFF	; 255
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	20 34       	cpi	r18, 0x40	; 64
    15a0:	29 f7       	brne	.-54     	; 0x156c <__vector_14+0x3bc>
		addSegfb(1, (i+rowNum/4)&0x3f);

	addSegfb(3, _W); //0x06, (6<<4) | 3);
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	67 e0       	ldi	r22, 0x07	; 7
    15a8:	43 e7       	ldi	r20, 0x73	; 115
    15aa:	b6 dc       	rcall	.-1684   	; 0xf18 <addSeg>

	segTerminate();
    15ac:	1a dc       	rcall	.-1996   	; 0xde2 <segTerminate>
	// to load a row to a row-buffer (as opposed to a frame-buffer)
	// thus, DE could gain more pixels because there would be fewer
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	df 90       	pop	r13
    15d8:	cf 90       	pop	r12
    15da:	bf 90       	pop	r11
    15dc:	af 90       	pop	r10
    15de:	9f 90       	pop	r9
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <vfprintf>:
    15ea:	ab e0       	ldi	r26, 0x0B	; 11
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ea ef       	ldi	r30, 0xFA	; 250
    15f0:	fa e0       	ldi	r31, 0x0A	; 10
    15f2:	47 c1       	rjmp	.+654    	; 0x1882 <__prologue_saves__+0x8>
    15f4:	6c 01       	movw	r12, r24
    15f6:	4b 01       	movw	r8, r22
    15f8:	7a 01       	movw	r14, r20
    15fa:	fc 01       	movw	r30, r24
    15fc:	17 82       	std	Z+7, r1	; 0x07
    15fe:	16 82       	std	Z+6, r1	; 0x06
    1600:	83 81       	ldd	r24, Z+3	; 0x03
    1602:	81 fd       	sbrc	r24, 1
    1604:	08 c0       	rjmp	.+16     	; 0x1616 <vfprintf+0x2c>
    1606:	2f ef       	ldi	r18, 0xFF	; 255
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	fa c0       	rjmp	.+500    	; 0x1800 <vfprintf+0x216>
    160c:	22 e0       	ldi	r18, 0x02	; 2
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	e2 0e       	add	r14, r18
    1612:	f3 1e       	adc	r15, r19
    1614:	04 c0       	rjmp	.+8      	; 0x161e <vfprintf+0x34>
    1616:	5e 01       	movw	r10, r28
    1618:	08 94       	sec
    161a:	a1 1c       	adc	r10, r1
    161c:	b1 1c       	adc	r11, r1
    161e:	f6 01       	movw	r30, r12
    1620:	73 80       	ldd	r7, Z+3	; 0x03
    1622:	f4 01       	movw	r30, r8
    1624:	73 fc       	sbrc	r7, 3
    1626:	85 91       	lpm	r24, Z+
    1628:	73 fe       	sbrs	r7, 3
    162a:	81 91       	ld	r24, Z+
    162c:	4f 01       	movw	r8, r30
    162e:	88 23       	and	r24, r24
    1630:	09 f4       	brne	.+2      	; 0x1634 <vfprintf+0x4a>
    1632:	e3 c0       	rjmp	.+454    	; 0x17fa <vfprintf+0x210>
    1634:	85 32       	cpi	r24, 0x25	; 37
    1636:	51 f4       	brne	.+20     	; 0x164c <vfprintf+0x62>
    1638:	73 fc       	sbrc	r7, 3
    163a:	05 91       	lpm	r16, Z+
    163c:	73 fe       	sbrs	r7, 3
    163e:	01 91       	ld	r16, Z+
    1640:	4f 01       	movw	r8, r30
    1642:	05 32       	cpi	r16, 0x25	; 37
    1644:	11 f0       	breq	.+4      	; 0x164a <vfprintf+0x60>
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	1a c0       	rjmp	.+52     	; 0x167e <vfprintf+0x94>
    164a:	85 e2       	ldi	r24, 0x25	; 37
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	29 c0       	rjmp	.+82     	; 0x16a2 <vfprintf+0xb8>
    1650:	00 23       	and	r16, r16
    1652:	09 f4       	brne	.+2      	; 0x1656 <vfprintf+0x6c>
    1654:	d2 c0       	rjmp	.+420    	; 0x17fa <vfprintf+0x210>
    1656:	8c eb       	ldi	r24, 0xBC	; 188
    1658:	96 e0       	ldi	r25, 0x06	; 6
    165a:	60 2f       	mov	r22, r16
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	44 d1       	rcall	.+648    	; 0x18e8 <strchr_P>
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	39 f4       	brne	.+14     	; 0x1672 <vfprintf+0x88>
    1664:	03 32       	cpi	r16, 0x23	; 35
    1666:	11 f4       	brne	.+4      	; 0x166c <vfprintf+0x82>
    1668:	10 61       	ori	r17, 0x10	; 16
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <vfprintf+0x88>
    166c:	0c 36       	cpi	r16, 0x6C	; 108
    166e:	61 f4       	brne	.+24     	; 0x1688 <vfprintf+0x9e>
    1670:	10 68       	ori	r17, 0x80	; 128
    1672:	f4 01       	movw	r30, r8
    1674:	73 fc       	sbrc	r7, 3
    1676:	05 91       	lpm	r16, Z+
    1678:	73 fe       	sbrs	r7, 3
    167a:	01 91       	ld	r16, Z+
    167c:	4f 01       	movw	r8, r30
    167e:	17 ff       	sbrs	r17, 7
    1680:	e7 cf       	rjmp	.-50     	; 0x1650 <vfprintf+0x66>
    1682:	00 23       	and	r16, r16
    1684:	09 f4       	brne	.+2      	; 0x1688 <vfprintf+0x9e>
    1686:	b9 c0       	rjmp	.+370    	; 0x17fa <vfprintf+0x210>
    1688:	85 eb       	ldi	r24, 0xB5	; 181
    168a:	96 e0       	ldi	r25, 0x06	; 6
    168c:	60 2f       	mov	r22, r16
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	2b d1       	rcall	.+598    	; 0x18e8 <strchr_P>
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	49 f0       	breq	.+18     	; 0x16a8 <vfprintf+0xbe>
    1696:	24 e0       	ldi	r18, 0x04	; 4
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	e2 0e       	add	r14, r18
    169c:	f3 1e       	adc	r15, r19
    169e:	8f e3       	ldi	r24, 0x3F	; 63
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	b6 01       	movw	r22, r12
    16a4:	44 d1       	rcall	.+648    	; 0x192e <fputc>
    16a6:	bb cf       	rjmp	.-138    	; 0x161e <vfprintf+0x34>
    16a8:	03 36       	cpi	r16, 0x63	; 99
    16aa:	29 f0       	breq	.+10     	; 0x16b6 <vfprintf+0xcc>
    16ac:	03 37       	cpi	r16, 0x73	; 115
    16ae:	71 f0       	breq	.+28     	; 0x16cc <vfprintf+0xe2>
    16b0:	03 35       	cpi	r16, 0x53	; 83
    16b2:	e1 f4       	brne	.+56     	; 0x16ec <vfprintf+0x102>
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <vfprintf+0xe0>
    16b6:	87 01       	movw	r16, r14
    16b8:	0e 5f       	subi	r16, 0xFE	; 254
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	f7 01       	movw	r30, r14
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	b6 01       	movw	r22, r12
    16c4:	34 d1       	rcall	.+616    	; 0x192e <fputc>
    16c6:	78 01       	movw	r14, r16
    16c8:	aa cf       	rjmp	.-172    	; 0x161e <vfprintf+0x34>
    16ca:	11 60       	ori	r17, 0x01	; 1
    16cc:	f7 01       	movw	r30, r14
    16ce:	60 80       	ld	r6, Z
    16d0:	71 80       	ldd	r7, Z+1	; 0x01
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0xf0>
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	b6 01       	movw	r22, r12
    16d8:	2a d1       	rcall	.+596    	; 0x192e <fputc>
    16da:	f3 01       	movw	r30, r6
    16dc:	10 fd       	sbrc	r17, 0
    16de:	85 91       	lpm	r24, Z+
    16e0:	10 ff       	sbrs	r17, 0
    16e2:	81 91       	ld	r24, Z+
    16e4:	3f 01       	movw	r6, r30
    16e6:	88 23       	and	r24, r24
    16e8:	a9 f7       	brne	.-22     	; 0x16d4 <vfprintf+0xea>
    16ea:	90 cf       	rjmp	.-224    	; 0x160c <vfprintf+0x22>
    16ec:	04 36       	cpi	r16, 0x64	; 100
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <vfprintf+0x10a>
    16f0:	09 36       	cpi	r16, 0x69	; 105
    16f2:	29 f5       	brne	.+74     	; 0x173e <vfprintf+0x154>
    16f4:	17 ff       	sbrs	r17, 7
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <vfprintf+0x11e>
    16f8:	f7 01       	movw	r30, r14
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	24 e0       	ldi	r18, 0x04	; 4
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	0a c0       	rjmp	.+20     	; 0x171c <vfprintf+0x132>
    1708:	f7 01       	movw	r30, r14
    170a:	20 81       	ld	r18, Z
    170c:	31 81       	ldd	r19, Z+1	; 0x01
    170e:	b9 01       	movw	r22, r18
    1710:	88 27       	eor	r24, r24
    1712:	77 fd       	sbrc	r23, 7
    1714:	80 95       	com	r24
    1716:	98 2f       	mov	r25, r24
    1718:	22 e0       	ldi	r18, 0x02	; 2
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	e2 0e       	add	r14, r18
    171e:	f3 1e       	adc	r15, r19
    1720:	1f 7e       	andi	r17, 0xEF	; 239
    1722:	97 ff       	sbrs	r25, 7
    1724:	08 c0       	rjmp	.+16     	; 0x1736 <vfprintf+0x14c>
    1726:	90 95       	com	r25
    1728:	80 95       	com	r24
    172a:	70 95       	com	r23
    172c:	61 95       	neg	r22
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	10 64       	ori	r17, 0x40	; 64
    1736:	a5 01       	movw	r20, r10
    1738:	2a e0       	ldi	r18, 0x0A	; 10
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	33 c0       	rjmp	.+102    	; 0x17a4 <vfprintf+0x1ba>
    173e:	00 37       	cpi	r16, 0x70	; 112
    1740:	a9 f0       	breq	.+42     	; 0x176c <vfprintf+0x182>
    1742:	01 37       	cpi	r16, 0x71	; 113
    1744:	30 f4       	brcc	.+12     	; 0x1752 <vfprintf+0x168>
    1746:	08 35       	cpi	r16, 0x58	; 88
    1748:	b1 f0       	breq	.+44     	; 0x1776 <vfprintf+0x18c>
    174a:	0f 36       	cpi	r16, 0x6F	; 111
    174c:	09 f0       	breq	.+2      	; 0x1750 <vfprintf+0x166>
    174e:	55 c0       	rjmp	.+170    	; 0x17fa <vfprintf+0x210>
    1750:	06 c0       	rjmp	.+12     	; 0x175e <vfprintf+0x174>
    1752:	05 37       	cpi	r16, 0x75	; 117
    1754:	39 f0       	breq	.+14     	; 0x1764 <vfprintf+0x17a>
    1756:	08 37       	cpi	r16, 0x78	; 120
    1758:	09 f0       	breq	.+2      	; 0x175c <vfprintf+0x172>
    175a:	4f c0       	rjmp	.+158    	; 0x17fa <vfprintf+0x210>
    175c:	08 c0       	rjmp	.+16     	; 0x176e <vfprintf+0x184>
    175e:	28 e0       	ldi	r18, 0x08	; 8
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	0c c0       	rjmp	.+24     	; 0x177c <vfprintf+0x192>
    1764:	1f 7e       	andi	r17, 0xEF	; 239
    1766:	2a e0       	ldi	r18, 0x0A	; 10
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	08 c0       	rjmp	.+16     	; 0x177c <vfprintf+0x192>
    176c:	10 61       	ori	r17, 0x10	; 16
    176e:	14 62       	ori	r17, 0x24	; 36
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	03 c0       	rjmp	.+6      	; 0x177c <vfprintf+0x192>
    1776:	14 60       	ori	r17, 0x04	; 4
    1778:	20 e1       	ldi	r18, 0x10	; 16
    177a:	32 e0       	ldi	r19, 0x02	; 2
    177c:	17 ff       	sbrs	r17, 7
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <vfprintf+0x1a6>
    1780:	f7 01       	movw	r30, r14
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	44 e0       	ldi	r20, 0x04	; 4
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	07 c0       	rjmp	.+14     	; 0x179e <vfprintf+0x1b4>
    1790:	f7 01       	movw	r30, r14
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	42 e0       	ldi	r20, 0x02	; 2
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	e4 0e       	add	r14, r20
    17a0:	f5 1e       	adc	r15, r21
    17a2:	a5 01       	movw	r20, r10
    17a4:	f0 d0       	rcall	.+480    	; 0x1986 <__ultoa_invert>
    17a6:	08 2f       	mov	r16, r24
    17a8:	0a 19       	sub	r16, r10
    17aa:	61 2e       	mov	r6, r17
    17ac:	77 24       	eor	r7, r7
    17ae:	16 ff       	sbrs	r17, 6
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <vfprintf+0x1d0>
    17b2:	8d e2       	ldi	r24, 0x2D	; 45
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	b6 01       	movw	r22, r12
    17b8:	ba d0       	rcall	.+372    	; 0x192e <fputc>
    17ba:	64 fe       	sbrs	r6, 4
    17bc:	13 c0       	rjmp	.+38     	; 0x17e4 <vfprintf+0x1fa>
    17be:	fe 01       	movw	r30, r28
    17c0:	e0 0f       	add	r30, r16
    17c2:	f1 1d       	adc	r31, r1
    17c4:	80 81       	ld	r24, Z
    17c6:	80 33       	cpi	r24, 0x30	; 48
    17c8:	69 f0       	breq	.+26     	; 0x17e4 <vfprintf+0x1fa>
    17ca:	80 e3       	ldi	r24, 0x30	; 48
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	b6 01       	movw	r22, r12
    17d0:	ae d0       	rcall	.+348    	; 0x192e <fputc>
    17d2:	62 fe       	sbrs	r6, 2
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <vfprintf+0x1fa>
    17d6:	c3 01       	movw	r24, r6
    17d8:	80 72       	andi	r24, 0x20	; 32
    17da:	90 70       	andi	r25, 0x00	; 0
    17dc:	88 5a       	subi	r24, 0xA8	; 168
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	b6 01       	movw	r22, r12
    17e2:	a5 d0       	rcall	.+330    	; 0x192e <fputc>
    17e4:	01 50       	subi	r16, 0x01	; 1
    17e6:	f5 01       	movw	r30, r10
    17e8:	e0 0f       	add	r30, r16
    17ea:	f1 1d       	adc	r31, r1
    17ec:	80 81       	ld	r24, Z
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	b6 01       	movw	r22, r12
    17f2:	9d d0       	rcall	.+314    	; 0x192e <fputc>
    17f4:	00 23       	and	r16, r16
    17f6:	b1 f7       	brne	.-20     	; 0x17e4 <vfprintf+0x1fa>
    17f8:	12 cf       	rjmp	.-476    	; 0x161e <vfprintf+0x34>
    17fa:	f6 01       	movw	r30, r12
    17fc:	26 81       	ldd	r18, Z+6	; 0x06
    17fe:	37 81       	ldd	r19, Z+7	; 0x07
    1800:	c9 01       	movw	r24, r18
    1802:	2b 96       	adiw	r28, 0x0b	; 11
    1804:	ee e0       	ldi	r30, 0x0E	; 14
    1806:	59 c0       	rjmp	.+178    	; 0x18ba <__epilogue_restores__+0x8>

00001808 <__mulhi3>:
    1808:	55 27       	eor	r21, r21
    180a:	00 24       	eor	r0, r0

0000180c <__mulhi3_loop>:
    180c:	80 ff       	sbrs	r24, 0
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <__mulhi3_skip1>
    1810:	06 0e       	add	r0, r22
    1812:	57 1f       	adc	r21, r23

00001814 <__mulhi3_skip1>:
    1814:	66 0f       	add	r22, r22
    1816:	77 1f       	adc	r23, r23
    1818:	61 15       	cp	r22, r1
    181a:	71 05       	cpc	r23, r1
    181c:	21 f0       	breq	.+8      	; 0x1826 <__mulhi3_exit>
    181e:	96 95       	lsr	r25
    1820:	87 95       	ror	r24
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	99 f7       	brne	.-26     	; 0x180c <__mulhi3_loop>

00001826 <__mulhi3_exit>:
    1826:	95 2f       	mov	r25, r21
    1828:	80 2d       	mov	r24, r0
    182a:	08 95       	ret

0000182c <__udivmodhi4>:
    182c:	aa 1b       	sub	r26, r26
    182e:	bb 1b       	sub	r27, r27
    1830:	51 e1       	ldi	r21, 0x11	; 17
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <__udivmodhi4_ep>

00001834 <__udivmodhi4_loop>:
    1834:	aa 1f       	adc	r26, r26
    1836:	bb 1f       	adc	r27, r27
    1838:	a6 17       	cp	r26, r22
    183a:	b7 07       	cpc	r27, r23
    183c:	10 f0       	brcs	.+4      	; 0x1842 <__udivmodhi4_ep>
    183e:	a6 1b       	sub	r26, r22
    1840:	b7 0b       	sbc	r27, r23

00001842 <__udivmodhi4_ep>:
    1842:	88 1f       	adc	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	5a 95       	dec	r21
    1848:	a9 f7       	brne	.-22     	; 0x1834 <__udivmodhi4_loop>
    184a:	80 95       	com	r24
    184c:	90 95       	com	r25
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	08 95       	ret

00001854 <__divmodhi4>:
    1854:	97 fb       	bst	r25, 7
    1856:	09 2e       	mov	r0, r25
    1858:	07 26       	eor	r0, r23
    185a:	0a d0       	rcall	.+20     	; 0x1870 <__divmodhi4_neg1>
    185c:	77 fd       	sbrc	r23, 7
    185e:	04 d0       	rcall	.+8      	; 0x1868 <__divmodhi4_neg2>
    1860:	e5 df       	rcall	.-54     	; 0x182c <__udivmodhi4>
    1862:	06 d0       	rcall	.+12     	; 0x1870 <__divmodhi4_neg1>
    1864:	00 20       	and	r0, r0
    1866:	1a f4       	brpl	.+6      	; 0x186e <__divmodhi4_exit>

00001868 <__divmodhi4_neg2>:
    1868:	70 95       	com	r23
    186a:	61 95       	neg	r22
    186c:	7f 4f       	sbci	r23, 0xFF	; 255

0000186e <__divmodhi4_exit>:
    186e:	08 95       	ret

00001870 <__divmodhi4_neg1>:
    1870:	f6 f7       	brtc	.-4      	; 0x186e <__divmodhi4_exit>
    1872:	90 95       	com	r25
    1874:	81 95       	neg	r24
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	08 95       	ret

0000187a <__prologue_saves__>:
    187a:	2f 92       	push	r2
    187c:	3f 92       	push	r3
    187e:	4f 92       	push	r4
    1880:	5f 92       	push	r5
    1882:	6f 92       	push	r6
    1884:	7f 92       	push	r7
    1886:	8f 92       	push	r8
    1888:	9f 92       	push	r9
    188a:	af 92       	push	r10
    188c:	bf 92       	push	r11
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	ca 1b       	sub	r28, r26
    18a4:	db 0b       	sbc	r29, r27
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	09 94       	ijmp

000018b2 <__epilogue_restores__>:
    18b2:	2a 88       	ldd	r2, Y+18	; 0x12
    18b4:	39 88       	ldd	r3, Y+17	; 0x11
    18b6:	48 88       	ldd	r4, Y+16	; 0x10
    18b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    18ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    18bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    18be:	8c 84       	ldd	r8, Y+12	; 0x0c
    18c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    18c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    18c4:	b9 84       	ldd	r11, Y+9	; 0x09
    18c6:	c8 84       	ldd	r12, Y+8	; 0x08
    18c8:	df 80       	ldd	r13, Y+7	; 0x07
    18ca:	ee 80       	ldd	r14, Y+6	; 0x06
    18cc:	fd 80       	ldd	r15, Y+5	; 0x05
    18ce:	0c 81       	ldd	r16, Y+4	; 0x04
    18d0:	1b 81       	ldd	r17, Y+3	; 0x03
    18d2:	aa 81       	ldd	r26, Y+2	; 0x02
    18d4:	b9 81       	ldd	r27, Y+1	; 0x01
    18d6:	ce 0f       	add	r28, r30
    18d8:	d1 1d       	adc	r29, r1
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	ed 01       	movw	r28, r26
    18e6:	08 95       	ret

000018e8 <strchr_P>:
    18e8:	fc 01       	movw	r30, r24
    18ea:	05 90       	lpm	r0, Z+
    18ec:	06 16       	cp	r0, r22
    18ee:	21 f0       	breq	.+8      	; 0x18f8 <strchr_P+0x10>
    18f0:	00 20       	and	r0, r0
    18f2:	d9 f7       	brne	.-10     	; 0x18ea <strchr_P+0x2>
    18f4:	c0 01       	movw	r24, r0
    18f6:	08 95       	ret
    18f8:	31 97       	sbiw	r30, 0x01	; 1
    18fa:	cf 01       	movw	r24, r30
    18fc:	08 95       	ret

000018fe <strlen_P>:
    18fe:	fc 01       	movw	r30, r24
    1900:	05 90       	lpm	r0, Z+
    1902:	00 20       	and	r0, r0
    1904:	e9 f7       	brne	.-6      	; 0x1900 <strlen_P+0x2>
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	8e 0f       	add	r24, r30
    190c:	9f 1f       	adc	r25, r31
    190e:	08 95       	ret

00001910 <strncpy_P>:
    1910:	fb 01       	movw	r30, r22
    1912:	dc 01       	movw	r26, r24
    1914:	41 50       	subi	r20, 0x01	; 1
    1916:	50 40       	sbci	r21, 0x00	; 0
    1918:	48 f0       	brcs	.+18     	; 0x192c <strncpy_P+0x1c>
    191a:	05 90       	lpm	r0, Z+
    191c:	0d 92       	st	X+, r0
    191e:	00 20       	and	r0, r0
    1920:	c9 f7       	brne	.-14     	; 0x1914 <strncpy_P+0x4>
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <strncpy_P+0x16>
    1924:	1d 92       	st	X+, r1
    1926:	41 50       	subi	r20, 0x01	; 1
    1928:	50 40       	sbci	r21, 0x00	; 0
    192a:	e0 f7       	brcc	.-8      	; 0x1924 <strncpy_P+0x14>
    192c:	08 95       	ret

0000192e <fputc>:
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	8c 01       	movw	r16, r24
    1938:	eb 01       	movw	r28, r22
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	81 ff       	sbrs	r24, 1
    193e:	1b c0       	rjmp	.+54     	; 0x1976 <fputc+0x48>
    1940:	82 ff       	sbrs	r24, 2
    1942:	0d c0       	rjmp	.+26     	; 0x195e <fputc+0x30>
    1944:	2e 81       	ldd	r18, Y+6	; 0x06
    1946:	3f 81       	ldd	r19, Y+7	; 0x07
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	9d 81       	ldd	r25, Y+5	; 0x05
    194c:	28 17       	cp	r18, r24
    194e:	39 07       	cpc	r19, r25
    1950:	64 f4       	brge	.+24     	; 0x196a <fputc+0x3c>
    1952:	e8 81       	ld	r30, Y
    1954:	f9 81       	ldd	r31, Y+1	; 0x01
    1956:	01 93       	st	Z+, r16
    1958:	f9 83       	std	Y+1, r31	; 0x01
    195a:	e8 83       	st	Y, r30
    195c:	06 c0       	rjmp	.+12     	; 0x196a <fputc+0x3c>
    195e:	e8 85       	ldd	r30, Y+8	; 0x08
    1960:	f9 85       	ldd	r31, Y+9	; 0x09
    1962:	80 2f       	mov	r24, r16
    1964:	09 95       	icall
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	31 f4       	brne	.+12     	; 0x1976 <fputc+0x48>
    196a:	8e 81       	ldd	r24, Y+6	; 0x06
    196c:	9f 81       	ldd	r25, Y+7	; 0x07
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	9f 83       	std	Y+7, r25	; 0x07
    1972:	8e 83       	std	Y+6, r24	; 0x06
    1974:	02 c0       	rjmp	.+4      	; 0x197a <fputc+0x4c>
    1976:	0f ef       	ldi	r16, 0xFF	; 255
    1978:	1f ef       	ldi	r17, 0xFF	; 255
    197a:	c8 01       	movw	r24, r16
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	08 95       	ret

00001986 <__ultoa_invert>:
    1986:	fa 01       	movw	r30, r20
    1988:	aa 27       	eor	r26, r26
    198a:	28 30       	cpi	r18, 0x08	; 8
    198c:	61 f1       	breq	.+88     	; 0x19e6 <__ultoa_invert+0x60>
    198e:	20 31       	cpi	r18, 0x10	; 16
    1990:	91 f1       	breq	.+100    	; 0x19f6 <__ultoa_invert+0x70>
    1992:	e8 94       	clt
    1994:	6f 93       	push	r22
    1996:	6e 7f       	andi	r22, 0xFE	; 254
    1998:	6e 5f       	subi	r22, 0xFE	; 254
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	8f 4f       	sbci	r24, 0xFF	; 255
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	af 4f       	sbci	r26, 0xFF	; 255
    19a2:	b1 e0       	ldi	r27, 0x01	; 1
    19a4:	40 d0       	rcall	.+128    	; 0x1a26 <__ultoa_invert+0xa0>
    19a6:	b4 e0       	ldi	r27, 0x04	; 4
    19a8:	3e d0       	rcall	.+124    	; 0x1a26 <__ultoa_invert+0xa0>
    19aa:	67 0f       	add	r22, r23
    19ac:	78 1f       	adc	r23, r24
    19ae:	89 1f       	adc	r24, r25
    19b0:	9a 1f       	adc	r25, r26
    19b2:	a1 1d       	adc	r26, r1
    19b4:	68 0f       	add	r22, r24
    19b6:	79 1f       	adc	r23, r25
    19b8:	8a 1f       	adc	r24, r26
    19ba:	91 1d       	adc	r25, r1
    19bc:	a1 1d       	adc	r26, r1
    19be:	6a 0f       	add	r22, r26
    19c0:	71 1d       	adc	r23, r1
    19c2:	81 1d       	adc	r24, r1
    19c4:	91 1d       	adc	r25, r1
    19c6:	a1 1d       	adc	r26, r1
    19c8:	22 d0       	rcall	.+68     	; 0x1a0e <__ultoa_invert+0x88>
    19ca:	09 f4       	brne	.+2      	; 0x19ce <__ultoa_invert+0x48>
    19cc:	68 94       	set
    19ce:	3f 91       	pop	r19
    19d0:	06 2e       	mov	r0, r22
    19d2:	00 0c       	add	r0, r0
    19d4:	30 19       	sub	r19, r0
    19d6:	00 0c       	add	r0, r0
    19d8:	00 0c       	add	r0, r0
    19da:	30 19       	sub	r19, r0
    19dc:	30 5d       	subi	r19, 0xD0	; 208
    19de:	31 93       	st	Z+, r19
    19e0:	ce f6       	brtc	.-78     	; 0x1994 <__ultoa_invert+0xe>
    19e2:	cf 01       	movw	r24, r30
    19e4:	08 95       	ret
    19e6:	46 2f       	mov	r20, r22
    19e8:	47 70       	andi	r20, 0x07	; 7
    19ea:	40 5d       	subi	r20, 0xD0	; 208
    19ec:	41 93       	st	Z+, r20
    19ee:	b3 e0       	ldi	r27, 0x03	; 3
    19f0:	0f d0       	rcall	.+30     	; 0x1a10 <__ultoa_invert+0x8a>
    19f2:	c9 f7       	brne	.-14     	; 0x19e6 <__ultoa_invert+0x60>
    19f4:	f6 cf       	rjmp	.-20     	; 0x19e2 <__ultoa_invert+0x5c>
    19f6:	46 2f       	mov	r20, r22
    19f8:	4f 70       	andi	r20, 0x0F	; 15
    19fa:	40 5d       	subi	r20, 0xD0	; 208
    19fc:	4a 33       	cpi	r20, 0x3A	; 58
    19fe:	18 f0       	brcs	.+6      	; 0x1a06 <__ultoa_invert+0x80>
    1a00:	49 5d       	subi	r20, 0xD9	; 217
    1a02:	31 fd       	sbrc	r19, 1
    1a04:	40 52       	subi	r20, 0x20	; 32
    1a06:	41 93       	st	Z+, r20
    1a08:	02 d0       	rcall	.+4      	; 0x1a0e <__ultoa_invert+0x88>
    1a0a:	a9 f7       	brne	.-22     	; 0x19f6 <__ultoa_invert+0x70>
    1a0c:	ea cf       	rjmp	.-44     	; 0x19e2 <__ultoa_invert+0x5c>
    1a0e:	b4 e0       	ldi	r27, 0x04	; 4
    1a10:	a6 95       	lsr	r26
    1a12:	97 95       	ror	r25
    1a14:	87 95       	ror	r24
    1a16:	77 95       	ror	r23
    1a18:	67 95       	ror	r22
    1a1a:	ba 95       	dec	r27
    1a1c:	c9 f7       	brne	.-14     	; 0x1a10 <__ultoa_invert+0x8a>
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	61 05       	cpc	r22, r1
    1a22:	71 05       	cpc	r23, r1
    1a24:	08 95       	ret
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
    1a2a:	0a 2e       	mov	r0, r26
    1a2c:	06 94       	lsr	r0
    1a2e:	57 95       	ror	r21
    1a30:	47 95       	ror	r20
    1a32:	37 95       	ror	r19
    1a34:	27 95       	ror	r18
    1a36:	ba 95       	dec	r27
    1a38:	c9 f7       	brne	.-14     	; 0x1a2c <__ultoa_invert+0xa6>
    1a3a:	62 0f       	add	r22, r18
    1a3c:	73 1f       	adc	r23, r19
    1a3e:	84 1f       	adc	r24, r20
    1a40:	95 1f       	adc	r25, r21
    1a42:	a0 1d       	adc	r26, r0
    1a44:	08 95       	ret

00001a46 <_exit>:
    1a46:	f8 94       	cli

00001a48 <__stop_program>:
    1a48:	ff cf       	rjmp	.-2      	; 0x1a48 <__stop_program>
