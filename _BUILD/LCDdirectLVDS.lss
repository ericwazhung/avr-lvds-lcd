
_BUILD/LCDdirectLVDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00001bb4  00001c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000126  008000b0  008000b0  00001c98  2**0
                  ALLOC
  3 .stab         00004230  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021b6  00000000  00000000  00005ec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c4       	rjmp	.+2254   	; 0x8d0 <__ctors_end>
       2:	81 c4       	rjmp	.+2306   	; 0x906 <__bad_interrupt>
       4:	80 c4       	rjmp	.+2304   	; 0x906 <__bad_interrupt>
       6:	7f c4       	rjmp	.+2302   	; 0x906 <__bad_interrupt>
       8:	7e c4       	rjmp	.+2300   	; 0x906 <__bad_interrupt>
       a:	7d c4       	rjmp	.+2298   	; 0x906 <__bad_interrupt>
       c:	7c c4       	rjmp	.+2296   	; 0x906 <__bad_interrupt>
       e:	7b c4       	rjmp	.+2294   	; 0x906 <__bad_interrupt>
      10:	7a c4       	rjmp	.+2292   	; 0x906 <__bad_interrupt>
      12:	79 c4       	rjmp	.+2290   	; 0x906 <__bad_interrupt>
      14:	78 c4       	rjmp	.+2288   	; 0x906 <__bad_interrupt>
      16:	77 c4       	rjmp	.+2286   	; 0x906 <__bad_interrupt>
      18:	76 c4       	rjmp	.+2284   	; 0x906 <__bad_interrupt>
      1a:	75 c4       	rjmp	.+2282   	; 0x906 <__bad_interrupt>
      1c:	f4 c9       	rjmp	.-3096   	; 0xfffff406 <__eeprom_end+0xff7ef406>
      1e:	73 c4       	rjmp	.+2278   	; 0x906 <__bad_interrupt>
      20:	72 c4       	rjmp	.+2276   	; 0x906 <__bad_interrupt>
      22:	71 c4       	rjmp	.+2274   	; 0x906 <__bad_interrupt>
      24:	70 c4       	rjmp	.+2272   	; 0x906 <__bad_interrupt>

00000026 <sineTable>:
      26:	00 00 92 01 24 03 b6 04 48 06 d9 07 6a 09 fb 0a     ....$...H...j...
      36:	8c 0c 1c 0e ab 0f 3a 11 c8 12 55 14 e2 15 6e 17     ......:...U...n.
      46:	f9 18 82 1a 0b 1c 93 1d 1a 1f 9f 20 23 22 a6 23     ........... #".#
      56:	28 25 a8 26 26 28 a3 29 1f 2b 99 2c 11 2e 87 2f     (%.&&(.).+.,.../
      66:	fb 30 6e 32 df 33 4d 35 ba 36 24 38 8c 39 f2 3a     .0n2.3M5.6$8.9.:
      76:	56 3c b8 3d 17 3f 73 40 ce 41 25 43 7a 44 cd 45     V<.=.?s@.A%CzD.E
      86:	1c 47 69 48 b4 49 fb 4a 3f 4c 81 4d bf 4e fb 4f     .GiH.I.J?L.M.N.O
      96:	33 51 68 52 9b 53 c9 54 f5 55 1d 57 42 58 64 59     3QhR.S.T.U.WBXdY
      a6:	82 5a 9c 5b b3 5c c7 5d d7 5e e3 5f eb 60 f0 61     .Z.[.\.].^._.`.a
      b6:	f1 62 ee 63 e8 64 dd 65 cf 66 bc 67 a6 68 8b 69     .b.c.d.e.f.g.h.i
      c6:	6d 6a 4a 6b 23 6c f8 6c c9 6d 96 6e 5e 6f 22 70     mjJk#l.l.m.n^o"p
      d6:	e2 70 9d 71 54 72 07 73 b5 73 5f 74 04 75 a5 75     .p.qTr.s.s_t.u.u
      e6:	41 76 d8 76 6b 77 fa 77 84 78 09 79 89 79 05 7a     Av.vkw.w.x.y.y.z
      f6:	7c 7a ee 7a 5c 7b c5 7b 29 7c 88 7c e3 7c 39 7d     |z.z\{.{)|.|.|9}
     106:	89 7d d5 7d 1d 7e 5f 7e 9c 7e d5 7e 09 7f 37 7f     .}.}.~_~.~.~..7.
     116:	61 7f 86 7f a6 7f c1 7f d8 7f e9 7f f5 7f fd 7f     a...............
     126:	ff 7f                                               ..

00000128 <header>:
     128:	4c 43 44 64 69 72 65 63 74 4c 56 44 53 35 39 20     LCDdirectLVDS59 
     138:	32 30 31 33 2d 31 32 2d 31 32 20 30 30 3a 35 33     2013-12-12 00:53
     148:	3a 32 32 00                                         :22.

0000014c <characters>:
     14c:	00 0c 36 36 0c 00 1c 06 18 06 00 00 00 00 00 60     ..66...........`
     15c:	1e 0c 1e 1e 38 3f 1c 3f 1e 1e 00 00 18 00 06 1e     ....8?.?........
     16c:	3e 0c 3f 3c 3f 7f 7f 3c 33 1e 78 67 0f 63 63 1c     >.?<?..<3.xg.cc.
     17c:	3f 1e 3f 1e 3f 33 33 63 63 33 7f 1e 03 1e 08 00     ?.?.?33cc3......
     18c:	0c 00 07 00 38 00 1c 00 07 0c 18 07 0e 00 00 00     ....8...........
     19c:	00 00 00 00 08 00 00 00 00 00 00 38 18 07 6e 00     ...........8..n.
     1ac:	1e 36 36 3e 63 36 06 0c 0c 66 0c 00 00 00 30 33     .66>c6...f....03
     1bc:	0f 33 33 3c 03 06 33 33 33 00 00 0c 00 0c 33 63     .33<..333.....3c
     1cc:	1e 66 66 36 46 46 66 33 0c 30 66 06 77 67 36 66     .ff6FFf3.0f.wg6f
     1dc:	33 66 33 2d 33 33 63 63 33 33 06 06 18 1c 00 0c     3f3-33cc33......
     1ec:	00 06 00 30 00 36 00 06 00 00 06 0c 00 00 00 00     ...0.6..........
     1fc:	00 00 00 0c 00 00 00 00 00 00 0c 18 0c 3b 00 1e     .............;..
     20c:	36 7f 03 33 1c 03 06 18 3c 0c 00 00 00 18 3b 0c     6..3....<.....;.
     21c:	30 30 36 1f 03 30 33 33 0c 0c 06 3f 18 30 7b 33     006..033...?.0{3
     22c:	66 03 66 16 16 03 33 0c 30 36 06 7f 6f 63 66 33     f.f...3.06..ocf3
     23c:	66 07 0c 33 33 63 36 33 19 06 0c 18 36 00 18 1e     f..33c63....6...
     24c:	3e 1e 30 1e 06 6e 36 0e 1e 66 0c 37 1f 1e 3b 6e     >.0..n6..f.7..;n
     25c:	1b 3e 3e 33 33 63 63 33 3f 0c 18 0c 00 00 0c 00     .>>33cc3?.......
     26c:	36 1e 18 6e 00 06 18 ff 3f 00 3f 00 0c 3f 0c 1c     6..n....?.?..?..
     27c:	1c 33 30 1f 18 1e 3e 0c 0c 03 00 30 18 7b 33 3e     .30...>....0.{3>
     28c:	03 66 1e 1e 03 3f 0c 30 1e 06 6b 7b 63 3e 33 3e     .f...?.0..k{c>3>
     29c:	1c 0c 33 33 6b 1c 1e 0c 06 18 18 63 00 00 30 66     ..33k......c..0f
     2ac:	33 3e 33 0f 33 6e 0c 18 36 0c 7f 33 33 66 33 36     3>3.3n..6..33f36
     2bc:	03 0c 33 33 63 36 33 19 07 00 38 00 00 0c 00 7f     ..33c63...8.....
     2cc:	30 0c 3b 00 06 18 3c 0c 00 00 00 06 37 0c 06 30     0.;...<.....7..0
     2dc:	7f 30 33 0c 33 30 00 00 06 3f 18 0c 7b 3f 66 03     .03.30...?..{?f.
     2ec:	66 16 16 73 33 0c 33 36 46 63 73 63 06 3b 1e 38     f..s3.36Fcsc.;.8
     2fc:	0c 33 33 7f 36 0c 46 06 30 18 00 00 00 3e 66 03     .33.6.F.0....>f.
     30c:	33 3f 06 33 66 0c 18 1e 0c 6b 33 33 66 33 36 1e     3?.3f....k33f36.
     31c:	0c 33 33 6b 1c 33 0c 0c 18 0c 00 00 00 00 36 1f     .33k.3........6.
     32c:	66 33 00 0c 0c 66 0c 0e 00 0c 03 33 0c 33 33 30     f3...f.....3.330
     33c:	33 33 06 33 18 0c 0e 0c 00 0c 00 03 33 66 66 36     33.3........3ff6
     34c:	46 06 66 33 0c 33 66 66 63 63 36 06 1e 36 33 0c     F.f3.3ffcc6..63.
     35c:	33 1e 77 63 0c 63 06 60 18 00 00 00 33 66 33 33     3.wc.c.`....3f33
     36c:	03 06 3e 66 0c 18 36 0c 63 33 33 3e 3e 06 30 2c     ..>f..6.c33>>.0,
     37c:	33 1e 7f 36 3e 26 0c 18 0c 00 00 0c 00 36 0c 63     3..6>&.......6.c
     38c:	6e 00 18 06 00 00 0c 00 0c 01 1e 3f 3f 1e 30 1e     n..........??.0.
     39c:	1e 06 1e 0e 0c 0c 18 00 06 0c 1e 33 3f 3c 3f 7f     ...........3?<?.
     3ac:	0f 7c 33 1e 1e 67 7f 63 63 1c 0f 38 67 1e 1e 3f     .|3..g.cc..8g..?
     3bc:	0c 63 63 1e 7f 1e 40 1e 00 00 00 6e 3d 1e 6e 1e     .cc...@....n=.n.
     3cc:	0f 30 67 1e 1b 67 1e 63 33 1e 06 30 0f 1f 18 6e     .0g..g.c3..0...n
     3dc:	0c 36 63 30 3f 38 18 07 00 00 00 00 00 00 00 00     .6c0?8..........
     3ec:	00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00     ................
     3fc:	00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00     ................
     40c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     41c:	00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
     42c:	1f 00 00 0e 00 00 00 00 00 0f 78 00 00 00 00 00     ..........x.....
     43c:	00 00 1f 00 00 00 00 00                             ........

00000444 <pgm_tetPiece>:
     444:	f0 00 22 22 f0 00 22 22 60 0c 64 02 60 0c 64 02     ..""..""`.d.`.d.
     454:	c0 06 40 8c c0 06 40 8c e0 04 c4 04 e4 00 64 04     ..@...@.......d.
     464:	e0 08 4c 04 e2 00 44 06 e0 02 44 0c e8 00 46 04     ..L...D...D...F.
     474:	60 06 60 06 60 06 60 06                             `.`.`.`.

0000047c <pgm_image1>:
     47c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................
     48c:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     49c:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     4ac:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     4bc:	c0 00 0f 0f 0f 00 0f 0f 0f 0f 00 0f 0f 0f 00 c0     ................
     4cc:	00 0f 0f 0f 00 00 00 0f 0f 00 00 00 0f 0f 0f 00     ................
     4dc:	00 0f 0f 0f 0f 00 0f 0f 0f 0f 00 0f 0f 0f 0f 00     ................
     4ec:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     4fc:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     50c:	00 0f 0f 00 00 0f 0f 0f 0f 0f 0f 00 00 0f 0f 00     ................
     51c:	00 0f 0f 0f 00 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     52c:	c0 00 0f 0f 0f 00 00 00 00 00 00 0f 0f 0f 00 c0     ................
     53c:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     54c:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     55c:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     56c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................

0000057c <pgm_image2>:
     57c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................
     58c:	c0 c0 c0 00 00 0f 0f 0f 0f 0f 0f 00 00 c0 c0 c0     ................
     59c:	c0 c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0 c0     ................
     5ac:	c0 00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00 00 c0     ................
     5bc:	c0 00 0f 0f 0f 00 0f 0f 0f 0f 0f 0f 0f 0f 00 c0     ................
     5cc:	00 0f 0f 0f 00 00 00 0f 0f 00 0f 0f 0f 0f 0f 00     ................
     5dc:	00 0f 0f 0f 0f 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     5ec:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     5fc:	00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 00     ................
     60c:	00 0f 0f 00 00 0f 0f 0f 0f 0f 0f 00 00 0f 0f 00     ................
     61c:	00 0f 0f 0f 00 00 0f 0f 0f 0f 00 00 0f 0f 0f 00     ................
     62c:	c0 00 0f 0f 0f 00 00 00 00 00 00 0f 0f 0f 00 c0     ................
     63c:	c0 00 00 0f 0f 0f 00 03 00 03 00 0f 0f 00 00 c0     ................
     64c:	c0 c0 00 00 0f 0f 00 03 03 03 00 0f 00 00 c0 c0     ................
     65c:	c0 c0 c0 00 00 0f 0f 00 00 00 0f 00 00 c0 c0 c0     ................
     66c:	c0 c0 c0 c0 c0 00 00 00 00 00 00 c0 c0 c0 c0 c0     ................

0000067c <pgm_imageCOIN.2335>:
     67c:	00 00 00 00 00 40 01 00 00 50 05 00 00 54 15 00     .....@...P...T..
     68c:	00 94 17 00 00 65 5d 00 00 65 5d 00 00 65 5d 00     .....e]..e]..e].
     69c:	00 65 5d 00 00 65 5d 00 00 65 5d 00 00 94 17 00     .e]..e]..e].....
     6ac:	00 54 15 00 00 50 05 00 00 40 01 00 00 00 00 00     .T...P...@......

000006bc <pgm_paletteCOIN.2336>:
     6bc:	25 07 2f 02                                         %./.

000006c0 <pgm_imageGOOMBA.2332>:
     6c0:	55 05 50 55 55 01 40 55 55 00 00 55 15 00 00 54     U.PUU.@UU..U...T
     6d0:	c5 03 c0 53 01 0e b0 40 01 fe bf 40 00 2e b8 00     ...S...@...@....
     6e0:	00 2a a8 00 00 00 00 00 01 a8 2a 40 55 aa aa 55     .*........*@U..U
     6f0:	55 aa aa 5f d5 ab fa 7f d5 af fe 7f 55 bf ff 5f     U.._........U.._

00000700 <pgm_paletteGOOMBA.2333>:
     700:	02 35 27 00                                         .5'.

00000704 <pgm_imageFLOWER.2329>:
     704:	00 55 55 00 50 55 55 05 54 aa aa 15 a5 fe bf 5a     .UU.PUU.T......Z
     714:	a5 fe bf 5a 54 aa aa 15 50 55 55 05 00 55 55 00     ...ZT...PUU..UU.
     724:	00 40 01 00 15 40 01 54 54 40 01 15 54 41 41 15     .@...@.TT@..TAA.
     734:	50 45 51 05 50 45 51 05 40 55 55 01 00 50 05 00     PEQ.PEQ.@UU..P..

00000744 <pgm_paletteFLOWER.2330>:
     744:	25 04 00 00 25 2f 07 04 25 17 02 00 25 07 05 02     %...%/..%...%...

00000754 <pgm_imageSTAR.2326>:
     754:	00 40 01 00 00 40 01 00 00 50 05 00 00 50 05 00     .@...@...P...P..
     764:	00 54 15 00 54 55 55 15 54 65 59 15 50 65 59 05     .T..TUU.TeY.PeY.
     774:	40 65 59 01 00 55 55 00 00 55 55 00 40 55 55 01     @eY..UU..UU.@UU.
     784:	40 55 55 01 40 15 54 01 50 01 40 05 50 00 00 05     @UU.@.T.P.@.P...

00000794 <pgm_paletteSTAR.2327>:
     794:	25 07 02 00 25 02 00 00                             %...%...

0000079c <pgm_imageSHROOM.2321>:
     79c:	00 50 05 00 00 54 29 00 00 55 aa 00 40 55 aa 02     .P...T)..U..@U..
     7ac:	50 55 a9 05 94 5a 55 15 a4 6a 55 15 a5 6a 55 5a     PU...ZU..jU..jUZ
     7bc:	a5 6a 55 6a 95 5a 55 69 55 55 55 55 a4 fe bf 1a     .jUj.ZUiUUUU....
     7cc:	00 ff ff 00 00 ff df 00 00 ff df 00 00 fc 37 00     ..............7.

000007dc <pgm_paletteBIG.2324>:
     7dc:	25 07 02 2f                                         %../

000007e0 <pgm_palette1UP.2322>:
     7e0:	25 07 04 2f                                         %../

000007e4 <pgm_imageDEADGOOMBA.2318>:
     7e4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7f4:	00 00 00 00 00 00 00 00 00 00 00 00 00 50 05 00     .............P..
     804:	40 55 55 01 d4 5f f5 17 a5 fa af 5a 55 55 55 55     @UU.._.....ZUUUU
     814:	80 aa aa 02 80 aa aa 02 f0 0f f0 3f 00 00 00 00     ...........?....

00000824 <pgm_paletteDEADGOOMBA.2319>:
     824:	25 02 27 00                                         %.'.

00000828 <pgm_imageSOLID.2315>:
     828:	fc ff ff 3f 57 55 55 d5 77 55 55 dd 57 55 55 d5     ...?WUU.wUU.WUU.
     838:	57 55 55 d5 57 55 55 d5 57 55 55 d5 57 55 55 d5     WUU.WUU.WUU.WUU.
     848:	57 55 55 d5 57 55 55 d5 57 55 55 d5 57 55 55 d5     WUU.WUU.WUU.WUU.
     858:	57 55 55 d5 77 55 55 dd 57 55 55 d5 fc ff ff 3f     WUU.wUU.WUU....?

00000868 <pgm_paletteSOLID.2316>:
     868:	25 02 00 00                                         %...

0000086c <pgm_imageQ.2312>:
     86c:	54 55 55 15 a9 aa aa ea b9 aa aa ee a9 56 a5 ea     TUU..........V..
     87c:	a9 f5 97 ea a9 b5 d6 ea a9 b5 d6 ea a9 be d5 ea     ................
     88c:	a9 6a fd ea a9 6a ad ea a9 aa af ea a9 6a a9 ea     .j...j.......j..
     89c:	a9 6a ad ea b9 aa af ee a9 aa aa ea ff ff ff ff     .j..............

000008ac <pgm_paletteQ.2313>:
     8ac:	25 02 07 00 25 02 02 00 25 02 01 00                 %...%...%...

000008b8 <__c.1838>:
     8b8:	45 46 47 65 66 67 00                                EFGefg.

000008bf <__c.1832>:
     8bf:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
     8cf:	00                                                  .

000008d0 <__ctors_end>:
     8d0:	11 24       	eor	r1, r1
     8d2:	1f be       	out	0x3f, r1	; 63
     8d4:	cf e5       	ldi	r28, 0x5F	; 95
     8d6:	d2 e0       	ldi	r29, 0x02	; 2
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	cd bf       	out	0x3d, r28	; 61

000008dc <__do_copy_data>:
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	a0 e6       	ldi	r26, 0x60	; 96
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	e4 eb       	ldi	r30, 0xB4	; 180
     8e4:	fb e1       	ldi	r31, 0x1B	; 27
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__do_copy_data+0x10>
     8e8:	05 90       	lpm	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	a0 3b       	cpi	r26, 0xB0	; 176
     8ee:	b1 07       	cpc	r27, r17
     8f0:	d9 f7       	brne	.-10     	; 0x8e8 <__do_copy_data+0xc>

000008f2 <__do_clear_bss>:
     8f2:	11 e0       	ldi	r17, 0x01	; 1
     8f4:	a0 eb       	ldi	r26, 0xB0	; 176
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <.do_clear_bss_start>

000008fa <.do_clear_bss_loop>:
     8fa:	1d 92       	st	X+, r1

000008fc <.do_clear_bss_start>:
     8fc:	a6 3d       	cpi	r26, 0xD6	; 214
     8fe:	b1 07       	cpc	r27, r17
     900:	e1 f7       	brne	.-8      	; 0x8fa <.do_clear_bss_loop>
     902:	71 d5       	rcall	.+2786   	; 0x13e6 <main>
     904:	55 c9       	rjmp	.-3414   	; 0xfffffbb0 <__eeprom_end+0xff7efbb0>

00000906 <__bad_interrupt>:
     906:	7c cb       	rjmp	.-2312   	; 0x0 <__vectors>

00000908 <adc_select>:
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     908:	97 b1       	in	r25, 0x07	; 7
     90a:	8f 71       	andi	r24, 0x1F	; 31
     90c:	90 7e       	andi	r25, 0xE0	; 224
     90e:	89 2b       	or	r24, r25
     910:	87 b9       	out	0x07, r24	; 7
}
     912:	08 95       	ret

00000914 <adc_startConversion>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     914:	86 b1       	in	r24, 0x06	; 6

//Return TRUE on error (if there was a previous conversion in progress...)
uint8_t adc_startConversion(void)
{
	//Check if a conversion is already in progress...
	if(adc_isBusy())
     916:	80 74       	andi	r24, 0x40	; 64
     918:	11 f0       	breq	.+4      	; 0x91e <adc_startConversion+0xa>
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 95       	ret
	// until a conversion is started. Once the conversion starts, the channel and 
	// reference selection is locked to ensure a sufficient sampling time for the ADC."
	
	//"In Single Conversion mode, write this bit to one to start each conversion."
	// BEWARE: calling this will CLEAR the conversion-complete indicator
	setbit(ADSC, ADCSRA);
     91e:	36 9a       	sbi	0x06, 6	; 6
     920:	80 e0       	ldi	r24, 0x00	; 0
	return FALSE;
}
     922:	08 95       	ret

00000924 <adc_init>:
	// (i.e. a 3.3V voltage regulator output)
	//Technically, these values are reset-defaults, but just make sure
	//!!!According to attiny861, these values set VCC as the voltage ref
	//   NOT an external reference. So the above note seems odd...
	// This IS what I want on the Tiny861 threePinIDer...
	clrbit(REFS0, ADMUX);
     924:	3e 98       	cbi	0x07, 6	; 7
	clrbit(REFS1, ADMUX);
     926:	3f 98       	cbi	0x07, 7	; 7
	
	//Use right-adjusted output
	// so values read from the 2-byte register are:
	//	8-bits in the Low reg, and 2 in the High reg
	clrbit(ADLAR, ADMUX);
     928:	3d 98       	cbi	0x07, 5	; 7

	//Enable the ADC
	// (see description for noise cancelling techniques)
	setbit(ADEN, ADCSRA);
     92a:	37 9a       	sbi	0x06, 7	; 6
	
	//Don't use Auto Triggering
	// (@@@ could use a timer, etc.)
	clrbit(ADATE, ADCSRA);
     92c:	35 98       	cbi	0x06, 5	; 6
	// "ADIF is cleared by writing a logical one to the flag."
	// " BEWARE that if doing a Read-Modify-Write on ADCSRA, a pending interrupt can be disabled. "
	//   because the flag may be 1 when read, and re-writing 1 clears it.
	//   ???could get around this by using a special set/clrbit instruction which would always write 0
	//   to this bit...
	setbit(ADIF, ADCSRA);
     92e:	34 9a       	sbi	0x06, 4	; 6
	
	//make sure the interrupt is not enabled...
	clrbit(ADIE, ADCSRA);
     930:	33 98       	cbi	0x06, 3	; 6
}

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     932:	86 b1       	in	r24, 0x06	; 6
     934:	87 60       	ori	r24, 0x07	; 7
     936:	86 b9       	out	0x06, r24	; 6
	// see Figure 21.5
	//"Note that the conversion starts on the following rising ADC clock edge after 
	// ADSC is written. The user is thus advised not to write new channel or reference
	// selection values to ADMUX until one ADC clock cycle after ADSC is written. 

	writeMasked(adcNum, ADC_SELECT_MASK, ADMUX);
     938:	87 b1       	in	r24, 0x07	; 7
     93a:	8f 61       	ori	r24, 0x1F	; 31
     93c:	87 b9       	out	0x07, r24	; 7
	//Start a conversion so it will be initialized for the next...
	//"The first conversion after ADSC has been written 
	// after the ADC has been enabled ... 
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();
     93e:	ea df       	rcall	.-44     	; 0x914 <adc_startConversion>
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     940:	86 b1       	in	r24, 0x06	; 6
	// will take 25 ADC clock cycles instead of the normal 13. 
	// This first conversion performs initialization of the ADC. "
	adc_startConversion();

	//Wait for the initialization to complete for lockstepping...
	while(adc_isBusy())
     942:	80 74       	andi	r24, 0x40	; 64
     944:	e9 f7       	brne	.-6      	; 0x940 <adc_init+0x1c>
	{}
}
     946:	08 95       	ret

00000948 <adc_getValue>:
//Return the last value read by the ADC
// check if adc_isBusy is true before reading, in lockstep...
// Since ADLAR is cleared, it will be the low ten bits 
uint16_t adc_getValue(void)
{
	return ADC;
     948:	24 b1       	in	r18, 0x04	; 4
     94a:	35 b1       	in	r19, 0x05	; 5
	//reading both values takes longer and some other things mentioned in the manual
	// (i.e. it might be more efficient to only read one byte if acceptable)
	// unless only reading ADCH: "ADCL must be read first, then ADCH"
	//!!! Might want to verify this occurs properly in the assembly code
	
}
     94c:	c9 01       	movw	r24, r18
     94e:	08 95       	ret

00000950 <adc_isBusy>:
	//  The ADSC bit will be read as one during a conversion, 
	//  independently of how the conversion was started."
	//  actually, it would return true /always/ during free-running mode

	//Check state-machine... might be better to use ADIF...?
	return getbit(ADSC, ADCSRA);
     950:	86 b1       	in	r24, 0x06	; 6
     952:	82 95       	swap	r24
     954:	86 95       	lsr	r24
     956:	86 95       	lsr	r24
}
     958:	81 70       	andi	r24, 0x01	; 1
     95a:	08 95       	ret

0000095c <adc_setPrescaler>:

void adc_setPrescaler(uint8_t adps)
{
	//This will clear the conversion-complete flag!
	writeMasked(adps, ADPS_MASK, ADCSRA);
     95c:	96 b1       	in	r25, 0x06	; 6
     95e:	87 70       	andi	r24, 0x07	; 7
     960:	98 7f       	andi	r25, 0xF8	; 248
     962:	89 2b       	or	r24, r25
     964:	86 b9       	out	0x06, r24	; 6
}
     966:	08 95       	ret

00000968 <adc_takeInput>:
	uint8_t bitNum = inputNum;

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	80 f0       	brcs	.+32     	; 0x98c <adc_takeInput+0x24>

	//Analog inputs 7-10 are selected in DIDR1 and shifted...
	// 7 is bit 4, 10 is bit 7...
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
     96c:	87 30       	cpi	r24, 0x07	; 7
     96e:	10 f4       	brcc	.+4      	; 0x974 <adc_takeInput+0xc>

#ifdef _AVR_IOTNx61_H_
	//ATTINYx61's have AREFD at bit 3, rather than ADC3D
	// the following ADC inputs are shifted 
	if(inputNum > 2)
		bitNum = inputNum + 1;
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	0c c0       	rjmp	.+24     	; 0x98c <adc_takeInput+0x24>
	//CURRENTLY ONLY: channels 0-7 are usable in this version
	// THIS NOTE SHOULD BE INVALID AS OF 0.19.
	if(inputNum >= 7)
	{
		bitNum = inputNum - 3;
		setbit(bitNum, DIDR1);
     974:	92 b1       	in	r25, 0x02	; 2
     976:	83 50       	subi	r24, 0x03	; 3
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	02 c0       	rjmp	.+4      	; 0x982 <adc_takeInput+0x1a>
     97e:	22 0f       	add	r18, r18
     980:	33 1f       	adc	r19, r19
     982:	8a 95       	dec	r24
     984:	e2 f7       	brpl	.-8      	; 0x97e <adc_takeInput+0x16>
     986:	92 2b       	or	r25, r18
     988:	92 b9       	out	0x02, r25	; 2
		return;
     98a:	08 95       	ret
	}
#endif

	if(bitNum <= 7)
		setbit(bitNum, DIDR0);
     98c:	91 b1       	in	r25, 0x01	; 1
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <adc_takeInput+0x30>
     994:	22 0f       	add	r18, r18
     996:	33 1f       	adc	r19, r19
     998:	8a 95       	dec	r24
     99a:	e2 f7       	brpl	.-8      	; 0x994 <adc_takeInput+0x2c>
     99c:	92 2b       	or	r25, r18
     99e:	91 b9       	out	0x01, r25	; 1
     9a0:	08 95       	ret

000009a2 <timer_selectDivisor>:
	uint8_t csbits;
	
  #if defined(CSOBS)
	if(timerNum == 0 || timerNum == 1 || timerNum == 3)//IS_CSTYP(timerNum) || IS_CSOBS(timerNum))
  #else
	if(IS_CSTYP(timerNum))
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	28 f5       	brcc	.+74     	; 0x9f0 <timer_selectDivisor+0x4e>
  #endif
	{
		switch(clockDiv)
     9a6:	66 30       	cpi	r22, 0x06	; 6
     9a8:	81 f0       	breq	.+32     	; 0x9ca <timer_selectDivisor+0x28>
     9aa:	67 30       	cpi	r22, 0x07	; 7
     9ac:	28 f4       	brcc	.+10     	; 0x9b8 <timer_selectDivisor+0x16>
     9ae:	66 23       	and	r22, r22
     9b0:	51 f0       	breq	.+20     	; 0x9c6 <timer_selectDivisor+0x24>
     9b2:	63 30       	cpi	r22, 0x03	; 3
     9b4:	e9 f4       	brne	.+58     	; 0x9f0 <timer_selectDivisor+0x4e>
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <timer_selectDivisor+0x20>
     9b8:	68 30       	cpi	r22, 0x08	; 8
     9ba:	49 f0       	breq	.+18     	; 0x9ce <timer_selectDivisor+0x2c>
     9bc:	6a 30       	cpi	r22, 0x0A	; 10
     9be:	c1 f4       	brne	.+48     	; 0x9f0 <timer_selectDivisor+0x4e>
     9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <timer_selectDivisor+0x30>
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <timer_selectDivisor+0x32>
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <timer_selectDivisor+0x32>
     9ca:	93 e0       	ldi	r25, 0x03	; 3
			case CLKDIV8:
				csbits = CSTYP_DIV8;
				break;
			case CLKDIV64:
				csbits = CSTYP_DIV64;	
				break;
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <timer_selectDivisor+0x32>
     9ce:	94 e0       	ldi	r25, 0x04	; 4
			case CLKDIV256:
				csbits = CSTYP_DIV256;	
				break;
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <timer_selectDivisor+0x32>
     9d2:	95 e0       	ldi	r25, 0x05	; 5
     9d4:	97 70       	andi	r25, 0x07	; 7
	}
  #endif
	else 
		return 1;	

	switch(timerNum)
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	29 f0       	breq	.+10     	; 0x9e4 <timer_selectDivisor+0x42>
	{
		//Assume Timer0 and Timer1 exist (see setWGM)
		case 0:
			writeMasked(csbits, CSMASK, T0_CSReg);
     9da:	83 b7       	in	r24, 0x33	; 51
     9dc:	88 7f       	andi	r24, 0xF8	; 248
     9de:	89 2b       	or	r24, r25
     9e0:	83 bf       	out	0x33, r24	; 51
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <timer_selectDivisor+0x4a>
			break;
		case 1:
			writeMasked(csbits, CSMASK, T1_CSReg);
     9e4:	8f b5       	in	r24, 0x2f	; 47
     9e6:	88 7f       	andi	r24, 0xF8	; 248
     9e8:	89 2b       	or	r24, r25
     9ea:	8f bd       	out	0x2f, r24	; 47
     9ec:	80 e0       	ldi	r24, 0x00	; 0
			break;
     9ee:	08 95       	ret
     9f0:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     9f2:	08 95       	ret

000009f4 <timer_setWGM>:
//	wgmLb *= 0xff;
//	wgmHb *= 0xff;

	//Make sure the chosen WGM will be written to the WGM bits properly, as implemented below...
	// Only modes 0-3 are implemented...
	if(wgm > 0x03)
     9f4:	64 30       	cpi	r22, 0x04	; 4
     9f6:	f0 f4       	brcc	.+60     	; 0xa34 <timer_setWGM+0x40>
		return 1;
	
	switch(timerNum)
     9f8:	88 23       	and	r24, r24
     9fa:	19 f0       	breq	.+6      	; 0xa02 <timer_setWGM+0xe>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	d1 f4       	brne	.+52     	; 0xa34 <timer_setWGM+0x40>
     a00:	0a c0       	rjmp	.+20     	; 0xa16 <timer_setWGM+0x22>
#ifdef _AVR_IOTNx61_H_
			//TinyX61s' Timer0 is an exception...
			// It only has WGM00, which serves the same functionality as
			// most others' WGM01 (when their WGM00 == 0)
			// (No PWM)
			if(wgmLb)
     a02:	86 2f       	mov	r24, r22
     a04:	81 70       	andi	r24, 0x01	; 1
     a06:	b1 f4       	brne	.+44     	; 0xa34 <timer_setWGM+0x40>
				return 1;

			//Whatever .stab is, this single change reduces it by 36Bytes
			writebit(WGM00, T0_WGMReg, wgmHb);
     a08:	62 70       	andi	r22, 0x02	; 2
     a0a:	11 f0       	breq	.+4      	; 0xa10 <timer_setWGM+0x1c>
     a0c:	a8 9a       	sbi	0x15, 0	; 21
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <timer_setWGM+0x1e>
     a10:	a8 98       	cbi	0x15, 0	; 21
     a12:	85 b3       	in	r24, 0x15	; 21
     a14:	0d c0       	rjmp	.+26     	; 0xa30 <timer_setWGM+0x3c>
     a16:	61 30       	cpi	r22, 0x01	; 1
     a18:	19 f4       	brne	.+6      	; 0xa20 <timer_setWGM+0x2c>
					wgmHb = 0;
					break;
			}

			//NOTE: TinyX61s' WGM bits are both in TCCR1D (very unusual)
			writebit(WGM10, TCCR1D, wgmLb);
     a1a:	86 b5       	in	r24, 0x26	; 38
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <timer_setWGM+0x30>
     a20:	86 b5       	in	r24, 0x26	; 38
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	86 bd       	out	0x26, r24	; 38
     a26:	86 b5       	in	r24, 0x26	; 38
			writebit(WGM11, TCCR1D, wgmHb);
     a28:	86 b5       	in	r24, 0x26	; 38
     a2a:	8d 7f       	andi	r24, 0xFD	; 253
     a2c:	86 bd       	out	0x26, r24	; 38
     a2e:	86 b5       	in	r24, 0x26	; 38
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	08 95       	ret
     a34:	81 e0       	ldi	r24, 0x01	; 1
			return 1;
			break;
	}
	
	return 0;
}
     a36:	08 95       	ret

00000a38 <timer_init>:

//Roughly equivalent to the ol' Init_timerX(clkDiv, wgm)
//Return 0 if no error...
#if (!defined(TIMER_INIT_UNUSED) || !TIMER_INIT_UNUSED)
uint8_t timer_init(uint8_t timerNum, uint8_t clockDiv, uint8_t wgm)
{
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	18 2f       	mov	r17, r24
     a3e:	06 2f       	mov	r16, r22
	//set the waveform mode
	ERR_HANDLE_NUM(1,				\
     a40:	64 2f       	mov	r22, r20
     a42:	d8 df       	rcall	.-80     	; 0x9f4 <timer_setWGM>
     a44:	88 23       	and	r24, r24
     a46:	11 f0       	breq	.+4      	; 0xa4c <timer_init+0x14>
     a48:	80 61       	ori	r24, 0x10	; 16
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <timer_init+0x1e>
		timer_setWGM(timerNum, wgm)	);

	//select the clock
	ERR_HANDLE_NUM(2,							\
     a4c:	81 2f       	mov	r24, r17
     a4e:	60 2f       	mov	r22, r16
     a50:	a8 df       	rcall	.-176    	; 0x9a2 <timer_selectDivisor>
     a52:	81 11       	cpse	r24, r1
     a54:	80 62       	ori	r24, 0x20	; 32
		timer_selectDivisor(timerNum, clockDiv)	);
		
	return 0;
}
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <timer_compareMatchIntSetup>:
uint8_t timer_compareMatchIntSetup(uint8_t timerNum, uint8_t outputChannel,\
	  												uint8_t enable)
{
	uint8_t channelNum;

	if(timerNum >= MAXTIMERS)
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	10 f0       	brcs	.+4      	; 0xa64 <timer_compareMatchIntSetup+0x8>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	08 95       	ret
		return 1;

	if(outputChannel >= 2) //MAXCHANNELSPERTIMER)
     a64:	62 30       	cpi	r22, 0x02	; 2
     a66:	10 f0       	brcs	.+4      	; 0xa6c <timer_compareMatchIntSetup+0x10>
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	08 95       	ret
     a6c:	44 23       	and	r20, r20
     a6e:	11 f0       	breq	.+4      	; 0xa74 <timer_compareMatchIntSetup+0x18>
     a70:	41 e0       	ldi	r20, 0x01	; 1
	channelNum = (timerNum<<4) + outputChannel;

	//Don't clear interrupts before disabling this one, or that defeats the purpose!
	// But do clear so we don't get unexpected overflows on init
	if(enable)
		cli();
     a72:	f8 94       	cli
	
	switch(channelNum)
     a74:	82 95       	swap	r24
     a76:	80 7f       	andi	r24, 0xF0	; 240
     a78:	86 0f       	add	r24, r22
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	a1 f0       	breq	.+40     	; 0xaa6 <timer_compareMatchIntSetup+0x4a>
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	30 f0       	brcs	.+12     	; 0xa8e <timer_compareMatchIntSetup+0x32>
     a82:	80 31       	cpi	r24, 0x10	; 16
     a84:	e1 f0       	breq	.+56     	; 0xabe <timer_compareMatchIntSetup+0x62>
     a86:	81 31       	cpi	r24, 0x11	; 17
     a88:	31 f1       	breq	.+76     	; 0xad6 <timer_compareMatchIntSetup+0x7a>
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	08 95       	ret
			break;
	   #endif
	   #if defined(OCIE0A)
		case 0x00:
//			setbit(OCIE0A, T0_TIMSK);
			writebit(OCIE0A, T0_TIMSK, enable);
     a8e:	44 23       	and	r20, r20
     a90:	19 f0       	breq	.+6      	; 0xa98 <timer_compareMatchIntSetup+0x3c>
     a92:	89 b7       	in	r24, 0x39	; 57
     a94:	80 61       	ori	r24, 0x10	; 16
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <timer_compareMatchIntSetup+0x40>
     a98:	89 b7       	in	r24, 0x39	; 57
     a9a:	8f 7e       	andi	r24, 0xEF	; 239
     a9c:	89 bf       	out	0x39, r24	; 57
     a9e:	89 b7       	in	r24, 0x39	; 57
			// My OCD bit me in the ass, this was set to TIMSK by mistake(?)
			setbit(OCF0A, T0_TIFR);
     aa0:	88 b7       	in	r24, 0x38	; 56
     aa2:	80 61       	ori	r24, 0x10	; 16
     aa4:	23 c0       	rjmp	.+70     	; 0xaec <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE0B)
		case 0x01:
//			setbit(OCIE0B, T0_TIMSK);
			writebit(OCIE0B, T0_TIMSK, enable);
     aa6:	44 23       	and	r20, r20
     aa8:	19 f0       	breq	.+6      	; 0xab0 <timer_compareMatchIntSetup+0x54>
     aaa:	89 b7       	in	r24, 0x39	; 57
     aac:	88 60       	ori	r24, 0x08	; 8
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <timer_compareMatchIntSetup+0x58>
     ab0:	89 b7       	in	r24, 0x39	; 57
     ab2:	87 7f       	andi	r24, 0xF7	; 247
     ab4:	89 bf       	out	0x39, r24	; 57
     ab6:	89 b7       	in	r24, 0x39	; 57
			// As was this...
			setbit(OCF0B, T0_TIFR);
     ab8:	88 b7       	in	r24, 0x38	; 56
     aba:	88 60       	ori	r24, 0x08	; 8
     abc:	17 c0       	rjmp	.+46     	; 0xaec <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1A)
		case 0x10:
//			setbit(OCIE1A, T1_TIMSK);
			writebit(OCIE1A, T1_TIMSK, enable);
     abe:	44 23       	and	r20, r20
     ac0:	19 f0       	breq	.+6      	; 0xac8 <timer_compareMatchIntSetup+0x6c>
     ac2:	89 b7       	in	r24, 0x39	; 57
     ac4:	80 64       	ori	r24, 0x40	; 64
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <timer_compareMatchIntSetup+0x70>
     ac8:	89 b7       	in	r24, 0x39	; 57
     aca:	8f 7b       	andi	r24, 0xBF	; 191
     acc:	89 bf       	out	0x39, r24	; 57
     ace:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1A, T1_TIFR);
     ad0:	88 b7       	in	r24, 0x38	; 56
     ad2:	80 64       	ori	r24, 0x40	; 64
     ad4:	0b c0       	rjmp	.+22     	; 0xaec <timer_compareMatchIntSetup+0x90>
			break;
	   #endif
	   #if defined(OCIE1B)
		case 0x11:
//			setbit(OCIE1B, T1_TIMSK);
			writebit(OCIE1B, T1_TIMSK, enable);
     ad6:	44 23       	and	r20, r20
     ad8:	19 f0       	breq	.+6      	; 0xae0 <timer_compareMatchIntSetup+0x84>
     ada:	89 b7       	in	r24, 0x39	; 57
     adc:	80 62       	ori	r24, 0x20	; 32
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <timer_compareMatchIntSetup+0x88>
     ae0:	89 b7       	in	r24, 0x39	; 57
     ae2:	8f 7d       	andi	r24, 0xDF	; 223
     ae4:	89 bf       	out	0x39, r24	; 57
     ae6:	89 b7       	in	r24, 0x39	; 57
			setbit(OCF1B, T1_TIFR);
     ae8:	88 b7       	in	r24, 0x38	; 56
     aea:	80 62       	ori	r24, 0x20	; 32
     aec:	88 bf       	out	0x38, r24	; 56
			break;
	}
	
	//Don't reenable interrupts here if disabling... just leave them as they were....
	// but do enable for init...
	if(enable)
     aee:	44 23       	and	r20, r20
     af0:	11 f4       	brne	.+4      	; 0xaf6 <timer_compareMatchIntSetup+0x9a>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	08 95       	ret
		sei();
     af6:	78 94       	sei
     af8:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     afa:	08 95       	ret

00000afc <hfm_setup>:

//Mainly just for setting up the maxPower (divisor)
// [can] use hfm_setPower otherwise...
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
     afc:	fc 01       	movw	r30, r24
	modulator->maxPower = maxPower;
     afe:	44 83       	std	Z+4, r20	; 0x04
{
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	86 17       	cp	r24, r22
     b04:	10 f0       	brcs	.+4      	; 0xb0a <hfm_setup+0xe>
		modulator->power = power;
     b06:	65 83       	std	Z+5, r22	; 0x05
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <hfm_setup+0x12>
	else
		modulator->power = modulator->maxPower;
     b0a:	84 81       	ldd	r24, Z+4	; 0x04
     b0c:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     b0e:	11 82       	std	Z+1, r1	; 0x01
     b10:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     b12:	13 82       	std	Z+3, r1	; 0x03
     b14:	12 82       	std	Z+2, r1	; 0x02
// can't tell how to get away without using hfm_setup once
void hfm_setup(hfm_t *modulator, uint8_t power, uint8_t maxPower)
{
	modulator->maxPower = maxPower;
	hfm_setPower(modulator, power);
}
     b16:	08 95       	ret

00000b18 <hfm_setPower>:
// This needs to be set, initially! 
//   either init it in the hfm variable declaration
//   or use hfm_setup (ideal)
// however, sometimes it needs to be variable, thus hfm_setup (above)
void hfm_setPower(hfm_t	*modulator, uint8_t power)
{
     b18:	fc 01       	movw	r30, r24
	//Don't allow power values > 1, otherwise who knows what'll happen...
	//(This is probably unnecessary, but whatev)
	//It's not, actually, if power's greater than maxPower, the values never reset
	// This is trouble, e.g. in heartbeat, where modulator.power is read
	if(power <= (modulator->maxPower))
     b1a:	84 81       	ldd	r24, Z+4	; 0x04
     b1c:	86 17       	cp	r24, r22
     b1e:	10 f0       	brcs	.+4      	; 0xb24 <hfm_setPower+0xc>
		modulator->power = power;
     b20:	65 83       	std	Z+5, r22	; 0x05
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <hfm_setPower+0x10>
	else
		modulator->power = modulator->maxPower;
     b24:	84 81       	ldd	r24, Z+4	; 0x04
     b26:	85 83       	std	Z+5, r24	; 0x05
		
//	modulator->stepNumber = 0;
	modulator->runningSum = 0;
     b28:	11 82       	std	Z+1, r1	; 0x01
     b2a:	10 82       	st	Z, r1
	modulator->desiredSum = 0;
     b2c:	13 82       	std	Z+3, r1	; 0x03
     b2e:	12 82       	std	Z+2, r1	; 0x02
}
     b30:	08 95       	ret

00000b32 <hfm_nextOutput>:

//Returns 0 if the "output" should be "off" in this cycle
//		  1 if the "output" should be "on"  in this cycle
uint8_t hfm_nextOutput(hfm_t *modulator)
{
     b32:	fc 01       	movw	r30, r24
	//Instead of dividing the average by the stepNumber (slow!),
	//just add the current to the avg and add desired to itself and compare the two
	
	
	//The first time, this will be == desired*1... (and runningSum will be zero)
	(modulator->desiredSum) += (modulator->power);
     b34:	82 81       	ldd	r24, Z+2	; 0x02
     b36:	93 81       	ldd	r25, Z+3	; 0x03
     b38:	25 81       	ldd	r18, Z+5	; 0x05
     b3a:	82 0f       	add	r24, r18
     b3c:	91 1d       	adc	r25, r1
     b3e:	93 83       	std	Z+3, r25	; 0x03
     b40:	82 83       	std	Z+2, r24	; 0x02
	
	// IF desired == 255, we want it never to clr...
	//		but running will be 0 the first time
	//		and we'll therefore if... set == good
	//		and later we'll runningSum == desiredSum (above) and reset and if again
	if(modulator->desiredSum > modulator->runningSum)
     b42:	22 81       	ldd	r18, Z+2	; 0x02
     b44:	33 81       	ldd	r19, Z+3	; 0x03
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	82 17       	cp	r24, r18
     b4c:	93 07       	cpc	r25, r19
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <hfm_nextOutput+0x22>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 c0       	rjmp	.+16     	; 0xb64 <hfm_nextOutput+0x32>
	{
		(modulator->runningSum) += (modulator->maxPower); //0xff;
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	24 81       	ldd	r18, Z+4	; 0x04
     b5a:	82 0f       	add	r24, r18
     b5c:	91 1d       	adc	r25, r1
     b5e:	91 83       	std	Z+1, r25	; 0x01
     b60:	80 83       	st	Z, r24
     b62:	81 e0       	ldi	r24, 0x01	; 1
	}
	
//	(modulator->stepNumber)++;
	
	//Restart the cycle if the output average = the desired
	if(modulator->runningSum == modulator->desiredSum)
     b64:	40 81       	ld	r20, Z
     b66:	51 81       	ldd	r21, Z+1	; 0x01
     b68:	22 81       	ldd	r18, Z+2	; 0x02
     b6a:	33 81       	ldd	r19, Z+3	; 0x03
     b6c:	42 17       	cp	r20, r18
     b6e:	53 07       	cpc	r21, r19
     b70:	21 f4       	brne	.+8      	; 0xb7a <hfm_nextOutput+0x48>
	{
		//Handled below...
//		modulator->stepNumber = 0;
		modulator->runningSum = 0;
     b72:	11 82       	std	Z+1, r1	; 0x01
     b74:	10 82       	st	Z, r1
		modulator->desiredSum = 0;
     b76:	13 82       	std	Z+3, r1	; 0x03
     b78:	12 82       	std	Z+2, r1	; 0x02
	}
	
	return toReturn;
}
     b7a:	08 95       	ret

00000b7c <sineRaw>:
//   rollover/wraparound should work fine... (e.g. Sine(coord_t))
//output is a value between -INT32_MAX and INT32_MAX (representing sin values -1 to 1)
sine_t sineRaw(theta_t theta)
{
//	theta %= 512;
	theta %= SINE_2PI;
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	36 d7       	rcall	.+3692   	; 0x19ee <__divmodhi4>

	if(theta < 0)
     b82:	97 ff       	sbrs	r25, 7
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <sineRaw+0xe>
		theta = SINE_2PI + theta;
     b86:	80 50       	subi	r24, 0x00	; 0
     b88:	9e 4f       	sbci	r25, 0xFE	; 254

//For more accurate realtimeishness, it might be worthwhile to reverse this order...
	
	//in the first quadrant, just take the sine value from the table
	if(theta < SINE_SIZE-1) //128)
     b8a:	80 38       	cpi	r24, 0x80	; 128
     b8c:	91 05       	cpc	r25, r1
     b8e:	44 f4       	brge	.+16     	; 0xba0 <sineRaw+0x24>
		return pgm_read_sine(sineTable[theta]);
     b90:	fc 01       	movw	r30, r24
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	ea 5d       	subi	r30, 0xDA	; 218
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	25 91       	lpm	r18, Z+
     b9c:	34 91       	lpm	r19, Z
     b9e:	29 c0       	rjmp	.+82     	; 0xbf2 <sineRaw+0x76>
	//in the second quadrant, mirror theta and subtract the offset
	else if(theta < SINE_SIZE2) //256)
     ba0:	8f 3f       	cpi	r24, 0xFF	; 255
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <sineRaw+0x2c>
     ba6:	5c f4       	brge	.+22     	; 0xbbe <sineRaw+0x42>
		return pgm_read_sine(sineTable[SINE_SIZE2-theta]); //256-theta]);
     ba8:	e0 e0       	ldi	r30, 0x00	; 0
     baa:	f1 e0       	ldi	r31, 0x01	; 1
     bac:	e8 1b       	sub	r30, r24
     bae:	f9 0b       	sbc	r31, r25
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	ea 5d       	subi	r30, 0xDA	; 218
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	25 91       	lpm	r18, Z+
     bba:	34 91       	lpm	r19, Z
     bbc:	1a c0       	rjmp	.+52     	; 0xbf2 <sineRaw+0x76>
	//in the third quadrant, mirror the value and subtract the offset
	else if(theta < SINE_SIZE3) //384)
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	80 38       	cpi	r24, 0x80	; 128
     bc2:	92 07       	cpc	r25, r18
     bc4:	44 f4       	brge	.+16     	; 0xbd6 <sineRaw+0x5a>
		return -(sine_t)pgm_read_sine(sineTable[theta-SINE_SIZE2]); //256]);
     bc6:	fc 01       	movw	r30, r24
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ea 5d       	subi	r30, 0xDA	; 218
     bce:	f1 40       	sbci	r31, 0x01	; 1
     bd0:	85 91       	lpm	r24, Z+
     bd2:	94 91       	lpm	r25, Z
     bd4:	0a c0       	rjmp	.+20     	; 0xbea <sineRaw+0x6e>
	//in the fourth quadrant, mirror both theta and the value and subtract the offset...
	else
		return -(sine_t)pgm_read_sine(sineTable[SINE_SIZE4-theta]); //512-theta]);
     bd6:	e0 e0       	ldi	r30, 0x00	; 0
     bd8:	f2 e0       	ldi	r31, 0x02	; 2
     bda:	e8 1b       	sub	r30, r24
     bdc:	f9 0b       	sbc	r31, r25
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ea 5d       	subi	r30, 0xDA	; 218
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	85 91       	lpm	r24, Z+
     be8:	94 91       	lpm	r25, Z
     bea:	22 27       	eor	r18, r18
     bec:	33 27       	eor	r19, r19
     bee:	28 1b       	sub	r18, r24
     bf0:	39 0b       	sbc	r19, r25
}
     bf2:	c9 01       	movw	r24, r18
     bf4:	08 95       	ret

00000bf6 <sineRaw8>:


#if ( defined(SINE_RAW8) && SINE_RAW8 )
int8_t sineRaw8(theta_t theta)
{
	theta %= SINE_2PI;
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	72 e0       	ldi	r23, 0x02	; 2
     bfa:	f9 d6       	rcall	.+3570   	; 0x19ee <__divmodhi4>
     bfc:	9c 01       	movw	r18, r24

	if(theta < 0)
     bfe:	37 ff       	sbrs	r19, 7
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <sineRaw8+0x10>
		theta = SINE_2PI + theta;
     c02:	20 50       	subi	r18, 0x00	; 0
     c04:	3e 4f       	sbci	r19, 0xFE	; 254

	if(theta < SINE_SIZE-1)
     c06:	20 38       	cpi	r18, 0x80	; 128
     c08:	31 05       	cpc	r19, r1
     c0a:	3c f4       	brge	.+14     	; 0xc1a <sineRaw8+0x24>
		return pgm_read_sine8(sineTable[theta]);
     c0c:	f9 01       	movw	r30, r18
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	e9 5d       	subi	r30, 0xD9	; 217
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	84 91       	lpm	r24, Z
     c18:	08 95       	ret
   else if(theta < SINE_SIZE2) //256)
     c1a:	2f 3f       	cpi	r18, 0xFF	; 255
     c1c:	31 05       	cpc	r19, r1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <sineRaw8+0x2c>
     c20:	54 f4       	brge	.+20     	; 0xc36 <sineRaw8+0x40>
		return pgm_read_sine8(sineTable[SINE_SIZE2-theta]); //256-theta]);
     c22:	e0 e0       	ldi	r30, 0x00	; 0
     c24:	f1 e0       	ldi	r31, 0x01	; 1
     c26:	e2 1b       	sub	r30, r18
     c28:	f3 0b       	sbc	r31, r19
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	e9 5d       	subi	r30, 0xD9	; 217
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	84 91       	lpm	r24, Z
     c34:	08 95       	ret
	else if(theta < SINE_SIZE3) //384)
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	20 38       	cpi	r18, 0x80	; 128
     c3a:	38 07       	cpc	r19, r24
     c3c:	44 f4       	brge	.+16     	; 0xc4e <sineRaw8+0x58>
		return -(int8_t)pgm_read_sine8(sineTable[theta-SINE_SIZE2]); //256]);
     c3e:	f9 01       	movw	r30, r18
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	e9 5d       	subi	r30, 0xD9	; 217
     c46:	f1 40       	sbci	r31, 0x01	; 1
     c48:	84 91       	lpm	r24, Z
     c4a:	81 95       	neg	r24
     c4c:	08 95       	ret
	else
	   return -(int8_t)pgm_read_sine8(sineTable[SINE_SIZE4-theta]); 
     c4e:	e0 e0       	ldi	r30, 0x00	; 0
     c50:	f2 e0       	ldi	r31, 0x02	; 2
     c52:	e2 1b       	sub	r30, r18
     c54:	f3 0b       	sbc	r31, r19
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	e9 5d       	subi	r30, 0xD9	; 217
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	84 91       	lpm	r24, Z
     c60:	81 95       	neg	r24

}
     c62:	08 95       	ret

00000c64 <getTetBrick>:

//returns a 3-bit value
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
     c64:	e8 2f       	mov	r30, r24
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	ee 53       	subi	r30, 0x3E	; 62
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	86 2f       	mov	r24, r22
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	63 e0       	ldi	r22, 0x03	; 3
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	86 d6       	rcall	.+3340   	; 0x198a <__mulhi3>
     c7e:	20 81       	ld	r18, Z
     c80:	31 81       	ldd	r19, Z+1	; 0x01
     c82:	42 81       	ldd	r20, Z+2	; 0x02
     c84:	53 81       	ldd	r21, Z+3	; 0x03
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <getTetBrick+0x2c>
     c88:	56 95       	lsr	r21
     c8a:	47 95       	ror	r20
     c8c:	37 95       	ror	r19
     c8e:	27 95       	ror	r18
     c90:	8a 95       	dec	r24
     c92:	d2 f7       	brpl	.-12     	; 0xc88 <getTetBrick+0x24>
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';

}
     c94:	82 2f       	mov	r24, r18
     c96:	87 70       	andi	r24, 0x07	; 7
     c98:	08 95       	ret

00000c9a <setTetBrick>:

//val should only be 0-7
// 0 corresponds to no brick
// 1-7 corresponds to the type of piece the brick came from...
void setTetBrick(uint8_t row, uint8_t col, uint8_t val)
{
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
	//Clear the old value...
	tetRow[row] &= ~(((uint32_t)'\007')<<(3*col));
     c9e:	e8 2f       	mov	r30, r24
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	86 2f       	mov	r24, r22
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	63 e0       	ldi	r22, 0x03	; 3
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	6f d6       	rcall	.+3294   	; 0x198a <__mulhi3>
     cac:	a8 2f       	mov	r26, r24
	//Write the new value...
	tetRow[row] |= (((uint32_t)val)<<(3*col));
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 53       	subi	r30, 0x3E	; 62
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	67 e0       	ldi	r22, 0x07	; 7
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0a 2e       	mov	r0, r26
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <setTetBrick+0x34>
     cc6:	66 0f       	add	r22, r22
     cc8:	77 1f       	adc	r23, r23
     cca:	88 1f       	adc	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	d2 f7       	brpl	.-12     	; 0xcc6 <setTetBrick+0x2c>
     cd2:	60 95       	com	r22
     cd4:	70 95       	com	r23
     cd6:	80 95       	com	r24
     cd8:	90 95       	com	r25
     cda:	00 81       	ld	r16, Z
     cdc:	11 81       	ldd	r17, Z+1	; 0x01
     cde:	22 81       	ldd	r18, Z+2	; 0x02
     ce0:	33 81       	ldd	r19, Z+3	; 0x03
     ce2:	60 23       	and	r22, r16
     ce4:	71 23       	and	r23, r17
     ce6:	82 23       	and	r24, r18
     ce8:	93 23       	and	r25, r19
     cea:	24 2f       	mov	r18, r20
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <setTetBrick+0x62>
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	44 1f       	adc	r20, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	aa 95       	dec	r26
     cfe:	d2 f7       	brpl	.-12     	; 0xcf4 <setTetBrick+0x5a>
     d00:	62 2b       	or	r22, r18
     d02:	73 2b       	or	r23, r19
     d04:	84 2b       	or	r24, r20
     d06:	95 2b       	or	r25, r21
     d08:	60 83       	st	Z, r22
     d0a:	71 83       	std	Z+1, r23	; 0x01
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	93 83       	std	Z+3, r25	; 0x03
}
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <tetInit>:
//For now, let's just test that it works...
// (This could be implemented with bitfields?)
uint32_t tetRow[TET_HEIGHT];

void tetInit(uint8_t filledRows)
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	e2 ec       	ldi	r30, 0xC2	; 194
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
     d1e:	11 92       	st	Z+, r1
     d20:	11 92       	st	Z+, r1
     d22:	11 92       	st	Z+, r1
     d24:	11 92       	st	Z+, r1
void tetInit(uint8_t filledRows)
{
	uint8_t row;

	//Clear the board...
	for(row=0; row<TET_HEIGHT; row++)
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	ea 30       	cpi	r30, 0x0A	; 10
     d2a:	f9 07       	cpc	r31, r25
     d2c:	c1 f7       	brne	.-16     	; 0xd1e <tetInit+0x8>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     d2e:	12 e1       	ldi	r17, 0x12	; 18
     d30:	18 1b       	sub	r17, r24
     d32:	0b c0       	rjmp	.+22     	; 0xd4a <tetInit+0x34>
     d34:	00 e0       	ldi	r16, 0x00	; 0
		for(col=0; col<TET_WIDTH; col++)
			setTetBrick(row, col, (row+col)&0x07);
     d36:	40 2f       	mov	r20, r16
     d38:	41 0f       	add	r20, r17
     d3a:	47 70       	andi	r20, 0x07	; 7
     d3c:	81 2f       	mov	r24, r17
     d3e:	60 2f       	mov	r22, r16
     d40:	ac df       	rcall	.-168    	; 0xc9a <setTetBrick>
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
		for(col=0; col<TET_WIDTH; col++)
     d42:	0f 5f       	subi	r16, 0xFF	; 255
     d44:	0a 30       	cpi	r16, 0x0A	; 10
     d46:	b9 f7       	brne	.-18     	; 0xd36 <tetInit+0x20>
	for(row=0; row<TET_HEIGHT; row++)
		tetRow[row]=0;
#if (TRUE) //Load random-ish "bricks" for testing...
	uint8_t col;
	//Now, leaving the first several rows blank for piece-testing...
	for(row=TET_HEIGHT-filledRows; row<TET_HEIGHT; row++)
     d48:	1f 5f       	subi	r17, 0xFF	; 255
     d4a:	12 31       	cpi	r17, 0x12	; 18
     d4c:	98 f3       	brcs	.-26     	; 0xd34 <tetInit+0x1e>

		row+=4;

	}
#endif
}
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <tetUpdate>:


}

void tetUpdate(void)
{
     d54:	2f 92       	push	r2
     d56:	3f 92       	push	r3
     d58:	4f 92       	push	r4
     d5a:	5f 92       	push	r5
     d5c:	6f 92       	push	r6
     d5e:	7f 92       	push	r7
     d60:	8f 92       	push	r8
     d62:	9f 92       	push	r9
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <tetUpdate+0x26>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	uint8_t pieceCol;

	uint8_t noChange = FALSE;
	uint8_t settle = FALSE;

	if(newPieceHitCount == 5)
     d7e:	80 91 c0 00 	lds	r24, 0x00C0
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	21 f4       	brne	.+8      	; 0xd8e <tetUpdate+0x3a>
	{
		newPieceHitCount = 0;
     d86:	10 92 c0 00 	sts	0x00C0, r1
		tetInit(0);
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	c4 df       	rcall	.-120    	; 0xd16 <tetInit>
	}

	new_pieceOrientation = pieceOrientation;
     d8e:	30 90 b1 00 	lds	r3, 0x00B1
	new_pieceLeftCol = pieceLeftCol;
     d92:	40 91 b3 00 	lds	r20, 0x00B3
	new_pieceTopRow = pieceTopRow;
     d96:	20 90 b2 00 	lds	r2, 0x00B2

	if(callCount%4 == 2)
     d9a:	50 91 c1 00 	lds	r21, 0x00C1
     d9e:	85 2f       	mov	r24, r21
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	83 70       	andi	r24, 0x03	; 3
     da4:	90 70       	andi	r25, 0x00	; 0
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	91 05       	cpc	r25, r1
     daa:	31 f4       	brne	.+12     	; 0xdb8 <tetUpdate+0x64>
   {
		new_pieceOrientation=pieceOrientation+1;
     dac:	23 2d       	mov	r18, r3
     dae:	2f 5f       	subi	r18, 0xFF	; 255
      if (new_pieceOrientation==4)
     db0:	24 30       	cpi	r18, 0x04	; 4
     db2:	09 f0       	breq	.+2      	; 0xdb6 <tetUpdate+0x62>
     db4:	e0 c0       	rjmp	.+448    	; 0xf76 <tetUpdate+0x222>
     db6:	de c0       	rjmp	.+444    	; 0xf74 <tetUpdate+0x220>
			new_pieceOrientation=0;
	}

      if(callCount%4==0)
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	19 f4       	brne	.+6      	; 0xdc2 <tetUpdate+0x6e>
      {  
         new_pieceLeftCol=pieceLeftCol+1;
     dbc:	34 2f       	mov	r19, r20
     dbe:	3f 5f       	subi	r19, 0xFF	; 255
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <tetUpdate+0x78>
		}

		if(callCount%4==3)
     dc2:	83 30       	cpi	r24, 0x03	; 3
     dc4:	91 05       	cpc	r25, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <tetUpdate+0x76>
		{
			new_pieceTopRow=pieceTopRow+1;
     dc8:	23 94       	inc	r2
     dca:	34 2f       	mov	r19, r20
     dcc:	23 2d       	mov	r18, r3
      }

	callCount++;
     dce:	5f 5f       	subi	r21, 0xFF	; 255
     dd0:	50 93 c1 00 	sts	0x00C1, r21
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     dd4:	80 91 b0 00 	lds	r24, 0x00B0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	91 1d       	adc	r25, r1
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	8c 5b       	subi	r24, 0xBC	; 188
     dec:	9b 4f       	sbci	r25, 0xFB	; 251
     dee:	12 2d       	mov	r17, r2
     df0:	1d 5f       	subi	r17, 0xFD	; 253
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b3 e0       	ldi	r27, 0x03	; 3
     df6:	fc 01       	movw	r30, r24
     df8:	c5 90       	lpm	r12, Z+
     dfa:	d4 90       	lpm	r13, Z
     dfc:	36 c0       	rjmp	.+108    	; 0xe6a <tetUpdate+0x116>
			uint8_t boardCol = new_pieceLeftCol + pieceCol;

			uint8_t boardBrick = getTetBrick(boardRow, boardCol);


			if(pieceBrick)
     dfe:	cf 01       	movw	r24, r30
     e00:	8e 0d       	add	r24, r14
     e02:	9f 1d       	adc	r25, r15
     e04:	26 01       	movw	r4, r12
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <tetUpdate+0xb8>
     e08:	56 94       	lsr	r5
     e0a:	47 94       	ror	r4
     e0c:	8a 95       	dec	r24
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <tetUpdate+0xb4>
     e10:	40 fe       	sbrs	r4, 0
     e12:	1a c0       	rjmp	.+52     	; 0xe48 <tetUpdate+0xf4>
			{
				if(boardRow >= TET_HEIGHT)
     e14:	12 31       	cpi	r17, 0x12	; 18
     e16:	f8 f4       	brcc	.+62     	; 0xe56 <tetUpdate+0x102>
					break;
				}

				//There's some plausibility for some oddities here...
				// revisit 41-15.zip
				if(boardCol >= TET_WIDTH)
     e18:	0a 30       	cpi	r16, 0x0A	; 10
     e1a:	f8 f4       	brcc	.+62     	; 0xe5a <tetUpdate+0x106>
				   noChange = TRUE;
				   break;
				}


				if(boardBrick)
     e1c:	80 2f       	mov	r24, r16
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	63 e0       	ldi	r22, 0x03	; 3
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	b2 d5       	rcall	.+2916   	; 0x198a <__mulhi3>
     e26:	24 01       	movw	r4, r8
     e28:	35 01       	movw	r6, r10
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <tetUpdate+0xe0>
     e2c:	76 94       	lsr	r7
     e2e:	67 94       	ror	r6
     e30:	57 94       	ror	r5
     e32:	47 94       	ror	r4
     e34:	8a 95       	dec	r24
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <tetUpdate+0xd8>
     e38:	84 2d       	mov	r24, r4
     e3a:	87 70       	andi	r24, 0x07	; 7
     e3c:	29 f0       	breq	.+10     	; 0xe48 <tetUpdate+0xf4>
				{
					//Must be a settle...
					if((new_pieceOrientation == pieceOrientation) &&
     e3e:	23 15       	cp	r18, r3
     e40:	61 f4       	brne	.+24     	; 0xe5a <tetUpdate+0x106>
     e42:	34 17       	cp	r19, r20
     e44:	51 f4       	brne	.+20     	; 0xe5a <tetUpdate+0x106>
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <tetUpdate+0x102>
     e48:	31 96       	adiw	r30, 0x01	; 1
     e4a:	0f 5f       	subi	r16, 0xFF	; 255


	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
     e4c:	e4 30       	cpi	r30, 0x04	; 4
     e4e:	f1 05       	cpc	r31, r1
     e50:	b1 f6       	brne	.-84     	; 0xdfe <tetUpdate+0xaa>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <tetUpdate+0x10a>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <tetUpdate+0x108>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	a1 e0       	ldi	r26, 0x01	; 1



	//Check for collision in the new piece position/orientation...
	//Starting from the bottom... (intentional wraparound)
	for(pieceRow = 3; (pieceRow < 128) && !settle && !noChange; pieceRow--)
     e5e:	b1 50       	subi	r27, 0x01	; 1
     e60:	11 50       	subi	r17, 0x01	; 1
     e62:	bf 3f       	cpi	r27, 0xFF	; 255
     e64:	d9 f0       	breq	.+54     	; 0xe9c <tetUpdate+0x148>
     e66:	88 23       	and	r24, r24
     e68:	c9 f4       	brne	.+50     	; 0xe9c <tetUpdate+0x148>
     e6a:	aa 23       	and	r26, r26
     e6c:	09 f0       	breq	.+2      	; 0xe70 <tetUpdate+0x11c>
     e6e:	85 c0       	rjmp	.+266    	; 0xf7a <tetUpdate+0x226>
		for(pieceCol = 0; pieceCol < 4; pieceCol++)
		{
			//This isn't particularly efficient...
			// rereading each time...
			uint8_t pieceBrick =
						getTetPieceBrick(pieceNum, new_pieceOrientation,
     e70:	eb 2e       	mov	r14, r27
     e72:	ff 24       	eor	r15, r15
     e74:	ee 0c       	add	r14, r14
     e76:	ff 1c       	adc	r15, r15
     e78:	ee 0c       	add	r14, r14
     e7a:	ff 1c       	adc	r15, r15
uint8_t getTetBrick(uint8_t row, uint8_t col)
{
	//uint8_t tetCol = col*3;
//	uint8_t tetMask = '\007';
	
	return ((uint8_t)(tetRow[row] >> (3*col))) & '\007';
     e7c:	e1 2f       	mov	r30, r17
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ee 53       	subi	r30, 0x3E	; 62
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	80 80       	ld	r8, Z
     e8e:	91 80       	ldd	r9, Z+1	; 0x01
     e90:	a2 80       	ldd	r10, Z+2	; 0x02
     e92:	b3 80       	ldd	r11, Z+3	; 0x03
     e94:	03 2f       	mov	r16, r19
     e96:	e0 e0       	ldi	r30, 0x00	; 0
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	b1 cf       	rjmp	.-158    	; 0xdfe <tetUpdate+0xaa>





	if(!noChange)
     e9c:	aa 23       	and	r26, r26
     e9e:	31 f4       	brne	.+12     	; 0xeac <tetUpdate+0x158>
	{
		pieceOrientation = new_pieceOrientation;
     ea0:	20 93 b1 00 	sts	0x00B1, r18
		pieceLeftCol = new_pieceLeftCol;
     ea4:	30 93 b3 00 	sts	0x00B3, r19
		pieceTopRow = new_pieceTopRow;
     ea8:	20 92 b2 00 	sts	0x00B2, r2
	}

	if(settle)
     eac:	88 23       	and	r24, r24
     eae:	09 f4       	brne	.+2      	; 0xeb2 <tetUpdate+0x15e>
     eb0:	64 c0       	rjmp	.+200    	; 0xf7a <tetUpdate+0x226>
	{
		// Check if we've hit on a new piece...
		if((pieceTopRow == PIECE_STARTROW) &&
     eb2:	80 91 b2 00 	lds	r24, 0x00B2
     eb6:	88 23       	and	r24, r24
     eb8:	09 f0       	breq	.+2      	; 0xebc <tetUpdate+0x168>
     eba:	45 c0       	rjmp	.+138    	; 0xf46 <tetUpdate+0x1f2>
     ebc:	80 91 b3 00 	lds	r24, 0x00B3
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	09 f0       	breq	.+2      	; 0xec6 <tetUpdate+0x172>
     ec4:	40 c0       	rjmp	.+128    	; 0xf46 <tetUpdate+0x1f2>
     ec6:	80 91 b1 00 	lds	r24, 0x00B1
     eca:	88 23       	and	r24, r24
     ecc:	09 f0       	breq	.+2      	; 0xed0 <tetUpdate+0x17c>
     ece:	3b c0       	rjmp	.+118    	; 0xf46 <tetUpdate+0x1f2>
		   (pieceLeftCol == PIECE_STARTCOL) &&
		   (pieceOrientation == 0))
		   newPieceHitCount++;
     ed0:	80 91 c0 00 	lds	r24, 0x00C0
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	80 93 c0 00 	sts	0x00C0, r24
     eda:	35 c0       	rjmp	.+106    	; 0xf46 <tetUpdate+0x1f2>

		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
			{
				if(getTetPieceBrick(pieceNum, pieceOrientation,
     edc:	40 91 b0 00 	lds	r20, 0x00B0
     ee0:	e4 2f       	mov	r30, r20
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	80 91 b1 00 	lds	r24, 0x00B1
     ef0:	e8 0f       	add	r30, r24
     ef2:	f1 1d       	adc	r31, r1
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	ec 5b       	subi	r30, 0xBC	; 188
     efa:	fb 4f       	sbci	r31, 0xFB	; 251
     efc:	85 91       	lpm	r24, Z+
     efe:	94 91       	lpm	r25, Z
     f00:	b7 01       	movw	r22, r14
     f02:	62 0f       	add	r22, r18
     f04:	73 1f       	adc	r23, r19
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <tetUpdate+0x1b8>
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	6a 95       	dec	r22
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <tetUpdate+0x1b4>
     f10:	80 ff       	sbrs	r24, 0
     f12:	0c c0       	rjmp	.+24     	; 0xf2c <tetUpdate+0x1d8>
										  pieceRow, pieceCol))
				setTetBrick(pieceTopRow+pieceRow,
     f14:	80 91 b2 00 	lds	r24, 0x00B2
     f18:	60 91 b3 00 	lds	r22, 0x00B3
     f1c:	6e 0d       	add	r22, r14
     f1e:	4f 5f       	subi	r20, 0xFF	; 255
     f20:	81 0f       	add	r24, r17
     f22:	29 83       	std	Y+1, r18	; 0x01
     f24:	3a 83       	std	Y+2, r19	; 0x02
     f26:	b9 de       	rcall	.-654    	; 0xc9a <setTetBrick>
     f28:	3a 81       	ldd	r19, Y+2	; 0x02
     f2a:	29 81       	ldd	r18, Y+1	; 0x01
     f2c:	08 94       	sec
     f2e:	e1 1c       	adc	r14, r1
     f30:	f1 1c       	adc	r15, r1
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
			for(pieceCol = 0; pieceCol < 4; pieceCol++)
     f32:	64 e0       	ldi	r22, 0x04	; 4
     f34:	e6 16       	cp	r14, r22
     f36:	f1 04       	cpc	r15, r1
     f38:	89 f6       	brne	.-94     	; 0xedc <tetUpdate+0x188>
		   (pieceOrientation == 0))
		   newPieceHitCount++;


		//Load the piece into the board...
		for(pieceRow = 0; pieceRow < 4; pieceRow++)
     f3a:	1f 5f       	subi	r17, 0xFF	; 255
     f3c:	2c 5f       	subi	r18, 0xFC	; 252
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	14 30       	cpi	r17, 0x04	; 4
     f42:	21 f4       	brne	.+8      	; 0xf4c <tetUpdate+0x1f8>
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <tetUpdate+0x1fe>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	ee 24       	eor	r14, r14
     f4e:	ff 24       	eor	r15, r15
     f50:	c5 cf       	rjmp	.-118    	; 0xedc <tetUpdate+0x188>
								pieceNum+1);
			}


		//Load a new piece...
		pieceNum++;
     f52:	80 91 b0 00 	lds	r24, 0x00B0
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	80 93 b0 00 	sts	0x00B0, r24
		if(pieceNum==NUM_PIECES)
     f5c:	87 30       	cpi	r24, 0x07	; 7
     f5e:	11 f4       	brne	.+4      	; 0xf64 <tetUpdate+0x210>
			pieceNum = 0;
     f60:	10 92 b0 00 	sts	0x00B0, r1
		pieceLeftCol = PIECE_STARTCOL;
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	80 93 b3 00 	sts	0x00B3, r24
		pieceTopRow = PIECE_STARTROW;
     f6a:	10 92 b2 00 	sts	0x00B2, r1
		pieceOrientation = 0;
     f6e:	10 92 b1 00 	sts	0x00B1, r1
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <tetUpdate+0x226>
	}

}
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	34 2f       	mov	r19, r20
     f78:	2a cf       	rjmp	.-428    	; 0xdce <tetUpdate+0x7a>
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	7f 90       	pop	r7
     f98:	6f 90       	pop	r6
     f9a:	5f 90       	pop	r5
     f9c:	4f 90       	pop	r4
     f9e:	3f 90       	pop	r3
     fa0:	2f 90       	pop	r2
     fa2:	08 95       	ret

00000fa4 <tetBrick_to_fb>:

uint8_t tetColorScheme = 0;

uint8_t tetBrick_to_fb(uint8_t tetBrick)
{
	if(!tetBrick)
     fa4:	88 23       	and	r24, r24
     fa6:	a9 f0       	breq	.+42     	; 0xfd2 <tetBrick_to_fb+0x2e>
		return 0;

	switch(tetColorScheme)
     fa8:	90 91 b4 00 	lds	r25, 0x00B4
     fac:	81 50       	subi	r24, 0x01	; 1
     fae:	92 30       	cpi	r25, 0x02	; 2
     fb0:	38 f4       	brcc	.+14     	; 0xfc0 <tetBrick_to_fb+0x1c>
	{
		heartUpdate();
	}
#endif

}
     fb2:	87 30       	cpi	r24, 0x07	; 7
     fb4:	68 f4       	brcc	.+26     	; 0xfd0 <tetBrick_to_fb+0x2c>
     fb6:	e8 2f       	mov	r30, r24
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	ef 55       	subi	r30, 0x5F	; 95
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <tetBrick_to_fb+0x28>
     fc0:	87 30       	cpi	r24, 0x07	; 7
     fc2:	30 f4       	brcc	.+12     	; 0xfd0 <tetBrick_to_fb+0x2c>
     fc4:	e8 2f       	mov	r30, r24
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	e8 55       	subi	r30, 0x58	; 88
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 81       	ld	r24, Z
     fce:	08 95       	ret
     fd0:	8f e3       	ldi	r24, 0x3F	; 63
			}
//		default:
//			return 0;
	}

}
     fd2:	08 95       	ret

00000fd4 <segClear>:
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
     fd4:	10 92 b5 00 	sts	0x00B5, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
     fd8:	86 e0       	ldi	r24, 0x06	; 6
     fda:	80 93 0a 01 	sts	0x010A, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
     fde:	83 e6       	ldi	r24, 0x63	; 99
     fe0:	80 93 0b 01 	sts	0x010B, r24
}
     fe4:	08 95       	ret

00000fe6 <segTerminate>:
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
     fe6:	80 91 b5 00 	lds	r24, 0x00B5
     fea:	83 34       	cpi	r24, 0x43	; 67
     fec:	f8 f4       	brcc	.+62     	; 0x102c <segTerminate+0x46>
     fee:	e8 2f       	mov	r30, r24
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	e6 5f       	subi	r30, 0xF6	; 246
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	90 81       	ld	r25, Z
     ffc:	98 7f       	andi	r25, 0xF8	; 248
     ffe:	f1 f0       	breq	.+60     	; 0x103c <segTerminate+0x56>
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	80 93 b5 00 	sts	0x00B5, r24

		rowSegBuffer[segPosition].red_length 
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
    1006:	a8 2f       	mov	r26, r24
    1008:	b0 e0       	ldi	r27, 0x00	; 0
	if((segPosition < NUM_SEGMENTS-1) 
		&& (rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK))
	{
		segPosition++;

		rowSegBuffer[segPosition].red_length 
    100a:	fd 01       	movw	r30, r26
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e6 5f       	subi	r30, 0xF6	; 246
    1012:	fe 4f       	sbci	r31, 0xFE	; 254
    1014:	aa 0f       	add	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	a8 5f       	subi	r26, 0xF8	; 248
    101a:	be 4f       	sbci	r27, 0xFE	; 254
    101c:	8c 91       	ld	r24, X
    101e:	87 70       	andi	r24, 0x07	; 7
    1020:	80 83       	st	Z, r24
			= rowSegBuffer[segPosition-1].red_length & RED_MASK;
		rowSegBuffer[segPosition].green_blue
    1022:	11 96       	adiw	r26, 0x01	; 1
    1024:	8c 91       	ld	r24, X
    1026:	11 97       	sbiw	r26, 0x01	; 1
    1028:	81 83       	std	Z+1, r24	; 0x01
void segTerminate(void)
{

	//Add a new NULL-SEGMENT
	//This might appear as a stretched last pixel/segment...
	if((segPosition < NUM_SEGMENTS-1) 
    102a:	08 95       	ret
		rowSegBuffer[segPosition].green_blue
			= rowSegBuffer[segPosition-1].green_blue;
	}
	//We're already at the last segment, so we have to nullify it
	//This might terminate the last pixel early, but is necessary.
	else if(segPosition == NUM_SEGMENTS-1)
    102c:	83 34       	cpi	r24, 0x43	; 67
    102e:	31 f4       	brne	.+12     	; 0x103c <segTerminate+0x56>
	{
		//Apparently white doesn't cause sync problems... so load it white
		rowSegBuffer[segPosition].red_length = fbRed_to_seg(_W);
    1030:	87 e0       	ldi	r24, 0x07	; 7
    1032:	80 93 90 01 	sts	0x0190, r24
		rowSegBuffer[segPosition].green_blue = 
    1036:	83 e7       	ldi	r24, 0x73	; 115
    1038:	80 93 91 01 	sts	0x0191, r24
    103c:	08 95       	ret

0000103e <newSeg>:
// Returns TRUE if it had to be truncated
//  (out of segment memory, past the display edge...)
// length is the real length, not shifted for storage...
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{
    103e:	20 91 b5 00 	lds	r18, 0x00B5
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
    1042:	56 2f       	mov	r21, r22
    1044:	58 6f       	ori	r21, 0xF8	; 248
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
    1046:	15 c0       	rjmp	.+42     	; 0x1072 <newSeg+0x34>
	{
		// No more segments available...	
		// The last segment must have a length of 0
		if(segPosition == NUM_SEGMENTS-1)
    1048:	23 34       	cpi	r18, 0x43	; 67
    104a:	19 f4       	brne	.+6      	; 0x1052 <newSeg+0x14>
    104c:	20 93 b5 00 	sts	0x00B5, r18
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <newSeg+0x4a>
	
		//Check if the segment buffer is cleared...
		// then DON'T increment segPosition...
		//if(!((segPosition == 0) && 
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
    1052:	22 23       	and	r18, r18
    1054:	21 f4       	brne	.+8      	; 0x105e <newSeg+0x20>
    1056:	30 91 0a 01 	lds	r19, 0x010A
    105a:	38 7f       	andi	r19, 0xF8	; 248
    105c:	09 f0       	breq	.+2      	; 0x1060 <newSeg+0x22>
			((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
				segPosition++;
    105e:	2f 5f       	subi	r18, 0xFF	; 255


		//Create a maxlength segment
		rowSegBuffer[segPosition].red_length =
    1060:	e2 2f       	mov	r30, r18
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	e6 5f       	subi	r30, 0xF6	; 246
    106a:	fe 4f       	sbci	r31, 0xFE	; 254
    106c:	50 83       	st	Z, r21
			red | (SEG_MAXLENGTH<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
    106e:	41 83       	std	Z+1, r20	; 0x01

		length -= SEG_MAXLENGTH;
    1070:	4f 97       	sbiw	r24, 0x1f	; 31
// THIS DOES NOT squarify, so adjust length as necessary before calling
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Recursion would be simpler, but we've got a limited stack.
	while(length >= SEG_MAXLENGTH)
    1072:	8f 31       	cpi	r24, 0x1F	; 31
    1074:	91 05       	cpc	r25, r1
    1076:	40 f7       	brcc	.-48     	; 0x1048 <newSeg+0xa>
    1078:	20 93 b5 00 	sts	0x00B5, r18

	}

	//We can fit whatever's left (or the whole thing) into a single segment
	// Unless, of course, there's nothing left...
	if(length > 0) //< SEG_MAXLENGTH)//Guaranteed now...
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	11 f4       	brne	.+4      	; 0x1084 <newSeg+0x46>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	08 95       	ret
	{
		//Make sure there's another segment to write to!
		if(segPosition == NUM_SEGMENTS-1)
    1084:	23 34       	cpi	r18, 0x43	; 67
    1086:	19 f4       	brne	.+6      	; 0x108e <newSeg+0x50>
		{
			segTerminate();
    1088:	ae df       	rcall	.-164    	; 0xfe6 <segTerminate>
    108a:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
    108c:	08 95       	ret
		}

		//if(!((segPosition == 0) &&
		//  !(rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK)))
		if(segPosition || 
    108e:	22 23       	and	r18, r18
    1090:	21 f4       	brne	.+8      	; 0x109a <newSeg+0x5c>
    1092:	30 91 0a 01 	lds	r19, 0x010A
    1096:	38 7f       	andi	r19, 0xF8	; 248
    1098:	19 f0       	breq	.+6      	; 0x10a0 <newSeg+0x62>
	     ((rowSegBuffer[segPosition].red_length & SEG_LENGTH_MASK) != 0))
  				segPosition++;
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	20 93 b5 00 	sts	0x00B5, r18


		rowSegBuffer[segPosition].red_length = 
    10a0:	e0 91 b5 00 	lds	r30, 0x00B5
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	e6 5f       	subi	r30, 0xF6	; 246
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	88 0f       	add	r24, r24
    10b0:	88 0f       	add	r24, r24
    10b2:	88 0f       	add	r24, r24
    10b4:	86 2b       	or	r24, r22
    10b6:	80 83       	st	Z, r24
			red | (length<<SEG_LENGTH_SHIFT);

		rowSegBuffer[segPosition].green_blue = green_blue;
    10b8:	41 83       	std	Z+1, r20	; 0x01
    10ba:	80 e0       	ldi	r24, 0x00	; 0
	}

	return FALSE;

}
    10bc:	08 95       	ret

000010be <stretchSeg>:
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
    10be:	e0 91 b5 00 	lds	r30, 0x00B5
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	df 01       	movw	r26, r30
    10c6:	aa 0f       	add	r26, r26
    10c8:	bb 1f       	adc	r27, r27
    10ca:	a6 5f       	subi	r26, 0xF6	; 246
    10cc:	be 4f       	sbci	r27, 0xFE	; 254
    10ce:	2c 91       	ld	r18, X

		if(!additionalLength)
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	11 f1       	breq	.+68     	; 0x1118 <stretchSeg+0x5a>
// DON'T FORGET to make additionalLength square before the call
// if necesary....
uint8_t stretchSeg(uint16_t additionalLength)
{
		uint8_t oldLength=
			(rowSegBuffer[segPosition].red_length >> SEG_LENGTH_SHIFT);
    10d4:	42 2f       	mov	r20, r18
    10d6:	46 95       	lsr	r20
    10d8:	46 95       	lsr	r20
    10da:	46 95       	lsr	r20

		if(!additionalLength)
			return FALSE;

		//We can stretch the current segment
		if(oldLength < SEG_MAXLENGTH)
    10dc:	4f 31       	cpi	r20, 0x1F	; 31
    10de:	98 f4       	brcc	.+38     	; 0x1106 <stretchSeg+0x48>
		{
			uint8_t maxStretch = SEG_MAXLENGTH - oldLength;

			// Will the entire addition fit in the previous segment?
			if(additionalLength <= maxStretch)
    10e0:	3f e1       	ldi	r19, 0x1F	; 31
    10e2:	34 1b       	sub	r19, r20
    10e4:	43 2f       	mov	r20, r19
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	48 17       	cp	r20, r24
    10ea:	59 07       	cpc	r21, r25
    10ec:	38 f0       	brcs	.+14     	; 0x10fc <stretchSeg+0x3e>
			{
				rowSegBuffer[segPosition].red_length += 
    10ee:	88 0f       	add	r24, r24
    10f0:	88 0f       	add	r24, r24
    10f2:	88 0f       	add	r24, r24
    10f4:	82 0f       	add	r24, r18
    10f6:	8c 93       	st	X, r24
    10f8:	80 e0       	ldi	r24, 0x00	; 0
					(additionalLength << SEG_LENGTH_SHIFT);

				//Then we're done.
			//	additionalLength = 0;
			//	break;
				return FALSE;
    10fa:	08 95       	ret
			else
			{
				uint8_t red = 
					rowSegBuffer[segPosition].red_length & RED_MASK;

				rowSegBuffer[segPosition].red_length =
    10fc:	28 6f       	ori	r18, 0xF8	; 248
    10fe:	2c 93       	st	X, r18
					red | (SEG_MAXLENGTH << SEG_LENGTH_SHIFT);

				additionalLength -= maxStretch;
    1100:	84 1b       	sub	r24, r20
    1102:	95 0b       	sbc	r25, r21

		// We shouldn't ever get here if additionalLength = 0...

		//But we should test to make sure there's still lenth after
		// the stretch...
		if(additionalLength)
    1104:	49 f0       	breq	.+18     	; 0x1118 <stretchSeg+0x5a>
				rowSegBuffer[segPosition].green_blue;

			uint8_t retVal;

			//Create new segment(s) with the remaining length
			retVal = newSeg(additionalLength, red, green_blue);
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	e6 5f       	subi	r30, 0xF6	; 246
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	60 81       	ld	r22, Z
    1110:	67 70       	andi	r22, 0x07	; 7
    1112:	41 81       	ldd	r20, Z+1	; 0x01
    1114:	94 df       	rcall	.-216    	; 0x103e <newSeg>

			//Then we're done...
			//additionalLength = 0;
			//break;

			return retVal;
    1116:	08 95       	ret
    1118:	80 e0       	ldi	r24, 0x00	; 0
		}	

		//We shouldn't ever get here...
		// Well, maybe... if additionalLength == maxStretch...?
		return FALSE;
}
    111a:	08 95       	ret

0000111c <addSeg>:
// the last segment...
uint8_t addSeg(uint16_t length, uint8_t red, uint8_t green_blue)
{

	//Currently not smart enough to stretch the first segment...
	if(segPosition == 0)
    111c:	e0 91 b5 00 	lds	r30, 0x00B5
    1120:	ee 23       	and	r30, r30
    1122:	11 f4       	brne	.+4      	; 0x1128 <addSeg+0xc>
		return newSeg(length, red, green_blue);
    1124:	8c df       	rcall	.-232    	; 0x103e <newSeg>
    1126:	08 95       	ret

	//Can we stretch?
	if(((rowSegBuffer[segPosition].red_length & RED_MASK) == red)
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	e6 5f       	subi	r30, 0xF6	; 246
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	20 81       	ld	r18, Z
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	27 70       	andi	r18, 0x07	; 7
    1138:	30 70       	andi	r19, 0x00	; 0
    113a:	a6 2f       	mov	r26, r22
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	2a 17       	cp	r18, r26
    1140:	3b 07       	cpc	r19, r27
    1142:	29 f4       	brne	.+10     	; 0x114e <addSeg+0x32>
    1144:	21 81       	ldd	r18, Z+1	; 0x01
    1146:	24 17       	cp	r18, r20
    1148:	11 f4       	brne	.+4      	; 0x114e <addSeg+0x32>
		&& (rowSegBuffer[segPosition].green_blue == green_blue))
			return stretchSeg(length);
    114a:	b9 df       	rcall	.-142    	; 0x10be <stretchSeg>
    114c:	08 95       	ret
	else
		return newSeg(length, red, green_blue);
    114e:	77 df       	rcall	.-274    	; 0x103e <newSeg>

}
    1150:	08 95       	ret

00001152 <rbpix_to_seg>:
//This is just an intermediate test, for now...
// for reloading the rowbuffer to a seg-buffer.
//This could easily be revised (and generalized) to be...
// addSegment or addPixel
void rbpix_to_seg(uint8_t rbValue, uint8_t col, uint8_t length)
{
    1152:	1f 93       	push	r17
    1154:	18 2f       	mov	r17, r24
    1156:	84 2f       	mov	r24, r20
	static uint8_t last_rbValue = 0;
	//uint8_t length = 1;

	if(col == 0)
    1158:	66 23       	and	r22, r22
    115a:	59 f4       	brne	.+22     	; 0x1172 <rbpix_to_seg+0x20>
	{
		last_rbValue = 0;
    115c:	10 92 bf 00 	sts	0x00BF, r1
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
    1160:	10 92 b5 00 	sts	0x00B5, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
    1164:	96 e0       	ldi	r25, 0x06	; 6
    1166:	90 93 0a 01 	sts	0x010A, r25
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
    116a:	93 e6       	ldi	r25, 0x63	; 99
    116c:	90 93 0b 01 	sts	0x010B, r25
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <rbpix_to_seg+0x36>
	{
		last_rbValue = 0;
		segClear();
	}
	//Same color as last pixel...
	else if(segPosition && (rbValue == last_rbValue))
    1172:	90 91 b5 00 	lds	r25, 0x00B5
    1176:	99 23       	and	r25, r25
    1178:	39 f0       	breq	.+14     	; 0x1188 <rbpix_to_seg+0x36>
    117a:	90 91 bf 00 	lds	r25, 0x00BF
    117e:	19 17       	cp	r17, r25
    1180:	19 f4       	brne	.+6      	; 0x1188 <rbpix_to_seg+0x36>
	{
		stretchSeg(length);
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9c df       	rcall	.-200    	; 0x10be <stretchSeg>
		return;
    1186:	16 c0       	rjmp	.+44     	; 0x11b4 <rbpix_to_seg+0x62>

	uint8_t green = rbValue & 0x03;
	uint8_t red = (rbValue & 0x1C) >> 2;
	uint8_t blue = rbValue >> 5;

	newSeg(length, red, (blue<<4) | green);
    1188:	61 2f       	mov	r22, r17
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	6c 71       	andi	r22, 0x1C	; 28
    118e:	70 70       	andi	r23, 0x00	; 0
    1190:	75 95       	asr	r23
    1192:	67 95       	ror	r22
    1194:	75 95       	asr	r23
    1196:	67 95       	ror	r22
    1198:	21 2f       	mov	r18, r17
    119a:	22 95       	swap	r18
    119c:	26 95       	lsr	r18
    119e:	27 70       	andi	r18, 0x07	; 7
    11a0:	22 95       	swap	r18
    11a2:	20 7f       	andi	r18, 0xF0	; 240
    11a4:	91 2f       	mov	r25, r17
    11a6:	93 70       	andi	r25, 0x03	; 3
    11a8:	29 2b       	or	r18, r25
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	42 2f       	mov	r20, r18
    11ae:	47 df       	rcall	.-370    	; 0x103e <newSeg>

	last_rbValue = rbValue;
    11b0:	10 93 bf 00 	sts	0x00BF, r17
}
    11b4:	1f 91       	pop	r17
    11b6:	08 95       	ret

000011b8 <fb_to_rb>:
   //         |   Blue Value (0-3)
   //         Alpha... only partially implemented

#warning "This isn't at all optimized..."
   // Blue setting = Blue Value | 0x04
   uint8_t blueValue = (fbColor & 0x30) >> 4;
    11b8:	68 2f       	mov	r22, r24
    11ba:	70 e0       	ldi	r23, 0x00	; 0
   rb = (blueValue << 5) | 0x80;

   // Red setting = redVal << 1 | redVal & 0x01
   uint8_t redValue = (fbColor & 0x03);
   rb |= ((redValue << 1) | (redValue & 0x01)) << 2;
    11bc:	83 70       	andi	r24, 0x03	; 3
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9c 01       	movw	r18, r24
    11c2:	21 70       	andi	r18, 0x01	; 1
    11c4:	30 70       	andi	r19, 0x00	; 0
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	28 2b       	or	r18, r24
    11cc:	39 2b       	or	r19, r25
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	20 68       	ori	r18, 0x80	; 128
    11d8:	ab 01       	movw	r20, r22
    11da:	40 73       	andi	r20, 0x30	; 48
    11dc:	50 70       	andi	r21, 0x00	; 0
    11de:	44 0f       	add	r20, r20
    11e0:	55 1f       	adc	r21, r21
    11e2:	24 2b       	or	r18, r20
    11e4:	cb 01       	movw	r24, r22
    11e6:	8c 70       	andi	r24, 0x0C	; 12
    11e8:	90 70       	andi	r25, 0x00	; 0
    11ea:	95 95       	asr	r25
    11ec:	87 95       	ror	r24
    11ee:	95 95       	asr	r25
    11f0:	87 95       	ror	r24
   // Green Setting = Green Value...
   uint8_t greenValue = (fbColor & 0x0C) >> 2;
   rb |= greenValue;

   return rb;
}
    11f2:	82 2b       	or	r24, r18
    11f4:	08 95       	ret

000011f6 <pll_enable>:
   // this is 64MHz/512=125kHz
   // The benefit of such high PWM frequency is the low RC values necessary
   //  for filtering to DC.
   // "To change Timer/Counter1 to the async mode follow this procedure"
   // 1: Enable the PLL
   setbit(PLLE, PLLCSR);
    11f6:	89 b5       	in	r24, 0x29	; 41
    11f8:	82 60       	ori	r24, 0x02	; 2
    11fa:	89 bd       	out	0x29, r24	; 41
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11fc:	88 ec       	ldi	r24, 0xC8	; 200
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <pll_enable+0xa>
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <pll_enable+0x12>
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
   {
      asm("nop");
    1206:	00 00       	nop
   // 2: Wait 100us for the PLL to stabilize
   // (can't use dmsWait since the timer updating the dmsCount hasn't yet been started!)
   _delay_us(100);
//   dmsWait(1);
   // 3: Poll PLOCK until it is set...
   while(!getbit(PLOCK, PLLCSR))
    1208:	09 b4       	in	r0, 0x29	; 41
    120a:	00 fe       	sbrs	r0, 0
    120c:	fc cf       	rjmp	.-8      	; 0x1206 <pll_enable+0x10>
   {
      asm("nop");
   }
   // 4: Set the PCKE bit to enable async mode
   setbit(PCKE, PLLCSR);
    120e:	89 b5       	in	r24, 0x29	; 41
    1210:	84 60       	ori	r24, 0x04	; 4
    1212:	89 bd       	out	0x29, r24	; 41

}
    1214:	08 95       	ret

00001216 <lvds_timerInit>:
   //Timer1 is used for LVDS (in PLL clocking mode)
  
  	//pll_enable();	
   
   //We want it to count 7 bits, 0-6 and reset at 7
   OCR1C = 6;
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	8b bd       	out	0x2b, r24	; 43

	//We want the clock to go low at TCNT=0 and high at TCNT=4
	CLOCK_OCR = 3; //2; //3;
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	8c bd       	out	0x2c, r24	; 44
	//PLL is 4MHz*8 = 32MHz
	// then TimerClockDivisor=8 gives 4MHz
	pll_enable();
	#define SLOW_LVDS_TEST TRUE
#elif (defined(OSCCAL_VAL))
   OSCCAL = OSCCAL_VAL;
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	81 bf       	out	0x31, r24	; 49
	//  (horizontally... pre LVDS_PRESCALER affecting DOTS_TO_CYC)
	//  so accessing *all* pixels in a row would make it even slower...
	// Further, it didn't seem to be paying attention to the fact that
	// the same pixels are drawn on multiple rows...
	// WTF? (the image was scaled, proportionately! 1pix x 1pix)
	pll_enable();
    1222:	e9 df       	rcall	.-46     	; 0x11f6 <pll_enable>
	pll_enable();
	//#warning "The PLL configuration code is not in here yet!"
#endif

	//Set the Timer1 clock prescaler...
	writeMasked(CSBITS, 
    1224:	8f b5       	in	r24, 0x2f	; 47
    1226:	80 7f       	andi	r24, 0xF0	; 240
    1228:	84 60       	ori	r24, 0x04	; 4
    122a:	8f bd       	out	0x2f, r24	; 47
					TCCR1B);

	//Set the DeadTime prescaler (no prescaling, same speed as TCNT1)...
	// Allegedly this is prescaled from the PCK (or CK)
	// 	NOT from the Timer1 prescaler...
	writeMasked(DTPSBITS,
    122c:	8f b5       	in	r24, 0x2f	; 47
    122e:	80 63       	ori	r24, 0x30	; 48
    1230:	8f bd       	out	0x2f, r24	; 47
 
   //FastPWM
//Now Handled in lvds_xxxOnCompare():

	//These are also written below (excluding PWM1D)
	setbit(PWM1A, TCCR1A);  //Enable PWM on OC1A for DVH
    1232:	80 b7       	in	r24, 0x30	; 48
    1234:	82 60       	ori	r24, 0x02	; 2
    1236:	80 bf       	out	0x30, r24	; 48
                           //Need to do the same for other channels
  
	setbit(PWM1B, TCCR1A);  //Enable PWM on OC1B for CLOCK 
    1238:	80 b7       	in	r24, 0x30	; 48
    123a:	81 60       	ori	r24, 0x01	; 1
    123c:	80 bf       	out	0x30, r24	; 48

	setbit(PWM1D, TCCR1C);
    123e:	87 b5       	in	r24, 0x27	; 39
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	87 bd       	out	0x27, r24	; 39

	//PWM1D is not in TCCR1A...

	setoutPORT(PB1, PORTB);	//+OC1A, DVH/BLUE, MISO (usually heart)
    1244:	b9 9a       	sbi	0x17, 1	; 23
//	setoutPORT(PB0, PORTB);	//-OC1A 	MOSI unused
	setoutPORT(PB2, PORTB); //-OC1B, -GREEN	 (INVERTED) SCK
    1246:	ba 9a       	sbi	0x17, 2	; 23
	setoutPORT(PB3, PORTB); //+OC1B Clock (OC1B, not inverted)
    1248:	bb 9a       	sbi	0x17, 3	; 23
	setoutPORT(PB5, PORTB); //+OC1D, RED
    124a:	bd 9a       	sbi	0x17, 5	; 23


   writeMasked(((0<<WGM11) | (0<<WGM10)), //FastPWM (combined with above)
    124c:	86 b5       	in	r24, 0x26	; 38
    124e:	8c 7f       	andi	r24, 0xFC	; 252
    1250:	86 bd       	out	0x26, r24	; 38
//			   | (0<<COM1B1) | (1<<COM1B0) 
//			   | (1<<PWM1A) | (1<<PWM1B) )
//#define lvds_ComplementaryClrOnCompare() \ //
	//Do TCCR1C first, because it contains shadow-bits of TCCR1A that I
	// don't want to have to rewrite...
	TCCR1C = ( (1<<COM1D1) | (0<<COM1D0)
    1252:	89 e0       	ldi	r24, 0x09	; 9
    1254:	87 bd       	out	0x27, r24	; 39
				| (1<<PWM1D) );

	TCCR1A = ( (0<<COM1A1) | (1<<COM1A0) 
    1256:	83 e6       	ldi	r24, 0x63	; 99
    1258:	80 bf       	out	0x30, r24	; 48
   // PWM inversion must be enabled:

	//inverted with PWM1X
//   setbit(PWM1X, TCCR1B);
 
 	Nada_init();
    125a:	80 e3       	ldi	r24, 0x30	; 48
    125c:	84 bd       	out	0x24, r24	; 36
    125e:	84 e0       	ldi	r24, 0x04	; 4
    1260:	8d bd       	out	0x2d, r24	; 45
}
    1262:	08 95       	ret

00001264 <lcd_Init>:
//   (the fewer changes, the less likely we'll glitch...?)


void lcd_Init(void)
{
 	Nada_init();
    1264:	80 e3       	ldi	r24, 0x30	; 48
    1266:	84 bd       	out	0x24, r24	; 36
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	8d bd       	out	0x2d, r24	; 45
}
    126c:	08 95       	ret

0000126e <updateLCD>:

	//Hsync and Actually draw the pixels... (when DE is active)
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);
    126e:	20 91 b6 00 	lds	r18, 0x00B6
// rowNum is only used when DE is active...
//  and should be 0 at *drawn row* 0
void loadData(uint16_t rowNum, uint8_t dataEnable)
{
	//H Active pulse...
   if(vSync)
    1272:	80 91 b7 00 	lds	r24, 0x00B7
    1276:	88 23       	and	r24, r24
    1278:	39 f0       	breq	.+14     	; 0x1288 <updateLCD+0x1a>
   {
		//Vsync_fromNada() is called at the end of the last interupt
      VplusH_fromVsync();
    127a:	1d bc       	out	0x2d, r1	; 45
    127c:	8f ea       	ldi	r24, 0xAF	; 175
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <updateLCD+0x12>
      Hlow_Delay();
      Vsync_fromVplusH();
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <updateLCD+0x28>
      HD_Delay();
   }
   else
   {
      Hsync_fromNada();
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	8d bd       	out	0x2d, r24	; 45
    128c:	8f ea       	ldi	r24, 0xAF	; 175
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <updateLCD+0x22>
      Hlow_Delay();
      Nada_fromHsync();
    1294:	84 e0       	ldi	r24, 0x04	; 4
    1296:	8d bd       	out	0x2d, r24	; 45
    1298:	88 e5       	ldi	r24, 0x58	; 88
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <updateLCD+0x2e>
      HD_Delay();
   }

   if(dataEnable)
    12a0:	22 23       	and	r18, r18
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <updateLCD+0x38>
    12a4:	2d c0       	rjmp	.+90     	; 0x1300 <Done_974+0xe>
		// 4 doesn't work... blue-lines

#else		//ROW_SEG_BUFFER
void drawPix(uint8_t rowNum)
{
	TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
    12a6:	83 e5       	ldi	r24, 0x53	; 83
    12a8:	80 bf       	out	0x30, r24	; 48
		  "I"  (_SFR_IO_ADDR(DT1)),	//DT1: %6
		  "I"  (_SFR_IO_ADDR(OCR1A))	//OCR1A %7
	);
*/

__asm__ __volatile__
    12aa:	ea e0       	ldi	r30, 0x0A	; 10
    12ac:	f1 e0       	ldi	r31, 0x01	; 1

000012ae <LoadNext_974>:
    12ae:	41 91       	ld	r20, Z+
    12b0:	54 2f       	mov	r21, r20
    12b2:	57 70       	andi	r21, 0x07	; 7
    12b4:	61 91       	ld	r22, Z+
    12b6:	76 2f       	mov	r23, r22
    12b8:	6f 70       	andi	r22, 0x0F	; 15
    12ba:	72 95       	swap	r23
    12bc:	7f 70       	andi	r23, 0x0F	; 15
    12be:	5a bd       	out	0x2a, r21	; 42
    12c0:	64 bd       	out	0x24, r22	; 36
    12c2:	7d bd       	out	0x2d, r23	; 45
    12c4:	48 7f       	andi	r20, 0xF8	; 248
    12c6:	a9 f0       	breq	.+42     	; 0x12f2 <Done_974>
    12c8:	00 00       	nop
    12ca:	00 00       	nop

000012cc <Counter_974>:
    12cc:	48 50       	subi	r20, 0x08	; 8
    12ce:	79 f3       	breq	.-34     	; 0x12ae <LoadNext_974>
    12d0:	00 00       	nop
    12d2:	00 00       	nop
    12d4:	00 00       	nop
    12d6:	00 00       	nop
    12d8:	00 00       	nop
    12da:	00 00       	nop
    12dc:	00 00       	nop
    12de:	00 00       	nop
    12e0:	00 00       	nop
    12e2:	00 00       	nop
    12e4:	00 00       	nop
    12e6:	00 00       	nop
    12e8:	00 00       	nop
    12ea:	00 00       	nop
    12ec:	00 00       	nop
    12ee:	00 00       	nop
    12f0:	ed cf       	rjmp	.-38     	; 0x12cc <Counter_974>

000012f2 <Done_974>:
		// green seems to be floating between the last pixel and the
		// delay_cyc (!)
		//Disable complementary-output for Green 
		//  (on /OC1B, where CLK is OC1B)
		// Since Nada, V, and H DT's might be bad for clocking.
		TCCR1A = ( (0<<COM1A1) | (1<<COM1A0)
    12f2:	83 e6       	ldi	r24, 0x63	; 99
    12f4:	80 bf       	out	0x30, r24	; 48
         | (1<<COM1B1) | (0<<COM1B0)
         | (1<<PWM1A) | (1<<PWM1B) );

		fullBlue();
    12f6:	14 bc       	out	0x24, r1	; 36
    12f8:	86 e0       	ldi	r24, 0x06	; 6
    12fa:	8d bd       	out	0x2d, r24	; 45
		Nada_fromDEonly();
    12fc:	80 e3       	ldi	r24, 0x30	; 48
    12fe:	84 bd       	out	0x24, r24	; 36
	// This takes a LONG time and will occupy most of the CPU...
	//  ... IN THIS INTERRUPT
	//loadData(((hsyncCount-T_VD-T_Vlow)>>3)&31, dataEnable,colorOverride);
	loadData(hsyncCount-T_DV-T_VD-T_Vlow, dataEnable);

	hsyncCount++;
    1300:	80 91 b8 00 	lds	r24, 0x00B8
    1304:	90 91 b9 00 	lds	r25, 0x00B9
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	90 93 b9 00 	sts	0x00B9, r25
    130e:	80 93 b8 00 	sts	0x00B8, r24

	switch(hsyncCount)
    1312:	83 32       	cpi	r24, 0x23	; 35
    1314:	91 05       	cpc	r25, r1
    1316:	c1 f0       	breq	.+48     	; 0x1348 <Done_974+0x56>
    1318:	84 32       	cpi	r24, 0x24	; 36
    131a:	91 05       	cpc	r25, r1
    131c:	20 f4       	brcc	.+8      	; 0x1326 <Done_974+0x34>
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	91 05       	cpc	r25, r1
    1322:	e1 f4       	brne	.+56     	; 0x135c <Done_974+0x6a>
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <Done_974+0x44>
    1326:	86 32       	cpi	r24, 0x26	; 38
    1328:	91 05       	cpc	r25, r1
    132a:	a9 f0       	breq	.+42     	; 0x1356 <Done_974+0x64>
    132c:	23 e0       	ldi	r18, 0x03	; 3
    132e:	86 32       	cpi	r24, 0x26	; 38
    1330:	92 07       	cpc	r25, r18
    1332:	a1 f4       	brne	.+40     	; 0x135c <Done_974+0x6a>
    1334:	15 c0       	rjmp	.+42     	; 0x1360 <Done_974+0x6e>
	{
		//V Front Porch, begins with initLCD

		//Vsync H->L (Begin V-Sync)
		case T_DV:
			dataEnable = FALSE;
    1336:	10 92 b6 00 	sts	0x00B6, r1
			//clrpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = TRUE;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 b7 00 	sts	0x00B7, r24
			Vsync_fromNada();
    1340:	80 e4       	ldi	r24, 0x40	; 64
    1342:	84 bd       	out	0x24, r24	; 36
    1344:	85 e0       	ldi	r24, 0x05	; 5
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <Done_974+0x60>
		//	if(hfm_nextOutput(&modulator))
		//		colorOverride = 0xff;
		//	else
		//		colorOverride = 7;
			//setpinPORT(VSYNC_PIN, VSYNC_PORT);
			vSync = FALSE;
    1348:	10 92 b7 00 	sts	0x00B7, r1
			Nada_fromVsync();
    134c:	80 e3       	ldi	r24, 0x30	; 48
    134e:	84 bd       	out	0x24, r24	; 36
    1350:	84 e0       	ldi	r24, 0x04	; 4
    1352:	8d bd       	out	0x2d, r24	; 45
    1354:	03 c0       	rjmp	.+6      	; 0x135c <Done_974+0x6a>
			break;
		//Start of frame (DE active)
		case T_VD +(T_Vlow + T_DV):
			dataEnable = TRUE;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	80 93 b6 00 	sts	0x00B6, r24
    135c:	80 e0       	ldi	r24, 0x00	; 0
			break;
    135e:	08 95       	ret
		// All rows have been displayed
		// Return to V Front Porch
		case V_COUNT +(T_VD + T_Vlow + T_DV):
			dataEnable = FALSE;
    1360:	10 92 b6 00 	sts	0x00B6, r1
		//	break;
		//Frame complete
		//case HSYNC_COUNT_FRAME_COMPLETE:
			//T_DV +(V_COUNT+T_VD+T_Vlow) + FRAME_UPDATE_DELAY:
			hsyncCount = 0;
    1364:	10 92 b9 00 	sts	0x00B9, r1
    1368:	10 92 b8 00 	sts	0x00B8, r1
    136c:	81 e0       	ldi	r24, 0x01	; 1
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...

	return frameComplete;
}
    136e:	08 95       	ret

00001370 <getGimpColorVal.2304>:
*/


uint8_t getGimpColorVal(sprite_t *sprite, uint8_t palette, uint8_t row, 
																			 	uint8_t col)
{
    1370:	dc 01       	movw	r26, r24
	return 
	pgm_read_byte((uint8_t *)(&(sprite->p_palette[ (palette)*4 + \
    1372:	82 2f       	mov	r24, r18
    1374:	86 95       	lsr	r24
    1376:	86 95       	lsr	r24
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	44 0f       	add	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	44 0f       	add	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	48 0f       	add	r20, r24
    1384:	51 1d       	adc	r21, r1
    1386:	8d 91       	ld	r24, X+
    1388:	9c 91       	ld	r25, X
    138a:	11 97       	sbiw	r26, 0x01	; 1
    138c:	84 0f       	add	r24, r20
    138e:	95 1f       	adc	r25, r21
    1390:	fc 01       	movw	r30, r24
    1392:	44 91       	lpm	r20, Z
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	23 70       	andi	r18, 0x03	; 3
    139a:	30 70       	andi	r19, 0x00	; 0
    139c:	22 0f       	add	r18, r18
    139e:	33 1f       	adc	r19, r19
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <getGimpColorVal.2304+0x36>
    13a2:	55 95       	asr	r21
    13a4:	47 95       	ror	r20
    13a6:	2a 95       	dec	r18
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <getGimpColorVal.2304+0x32>
    13aa:	43 70       	andi	r20, 0x03	; 3
    13ac:	50 70       	andi	r21, 0x00	; 0
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	46 0f       	add	r20, r22
    13ba:	57 1f       	adc	r21, r23
    13bc:	14 96       	adiw	r26, 0x04	; 4
    13be:	ed 91       	ld	r30, X+
    13c0:	fc 91       	ld	r31, X
    13c2:	15 97       	sbiw	r26, 0x05	; 5
    13c4:	e4 0f       	add	r30, r20
    13c6:	f5 1f       	adc	r31, r21
    13c8:	84 91       	lpm	r24, Z
		(((pgm_read_byte((uint8_t *)(&(sprite->p_image[ \
					(row)*PACKED_BYTES_PER_ROW + (col)/PIXELS_PER_PACKAGE])))\
		  )>>((col)%PIXELS_PER_PACKAGE)*(PACKED_BITS_PER_PIXEL))&0x03) ])));
}
    13ca:	08 95       	ret

000013cc <init_timer0Hsync>:

#if (TIMER0_OCRVAL > 255)
 #error "Despite all my efforts, TIMER0_OCRVAL is *still* > 255!"
#endif

   OCR0A = TIMER0_OCRVAL; //T_Hlow_CYC + T_HD_CYC + T_DE_CYC + T_DH_CYC;
    13cc:	83 ee       	ldi	r24, 0xE3	; 227
    13ce:	83 bb       	out	0x13, r24	; 19
	timer_setWGM(0, WGM_CLR_ON_COMPARE);
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	0f db       	rcall	.-2530   	; 0x9f4 <timer_setWGM>
   timer_selectDivisor(0, TIMER0_CLKDIV); //CLKDIV1);
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	68 e0       	ldi	r22, 0x08	; 8
    13da:	e3 da       	rcall	.-2618   	; 0x9a2 <timer_selectDivisor>
   timer_compareMatchIntEnable(0, OUT_CHANNELA);
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	3c db       	rcall	.-2440   	; 0xa5c <timer_compareMatchIntSetup>
}
    13e4:	08 95       	ret

000013e6 <main>:
	adc_takeInput(6);
	adc_init();
	adc_select(6);
#endif

	tetInit(7);
    13e6:	87 e0       	ldi	r24, 0x07	; 7
    13e8:	96 dc       	rcall	.-1748   	; 0xd16 <tetInit>

	init_timer0Hsync();
    13ea:	f0 df       	rcall	.-32     	; 0x13cc <init_timer0Hsync>
	//This starts pretty late... watch out for WDT
	init_heartBeat();

	setHeartRate(0);

	lvds_timerInit();
    13ec:	14 df       	rcall	.-472    	; 0x1216 <lvds_timerInit>
	uint8_t imageNum = 0;
	uint8_t colorShift = 0;
	while(1)
	{
 #if (defined(FRAME_SYNC) && FRAME_SYNC)
		if(frameCount==0 && !getbit(OCIE0A, T0_TIMSK))
    13ee:	80 91 ba 00 	lds	r24, 0x00BA
    13f2:	88 23       	and	r24, r24
    13f4:	39 f4       	brne	.+14     	; 0x1404 <main+0x1e>
    13f6:	89 b7       	in	r24, 0x39	; 57
    13f8:	80 71       	andi	r24, 0x10	; 16
    13fa:	e9 f7       	brne	.-6      	; 0x13f6 <main+0x10>
 #if (defined(LIFE) && LIFE)
			lifeRound();
 #endif //LIFE
 
 #if (FRAME_COUNT_TO_DELAY != 0)
			timer_compareMatchIntEnable(0, OUT_CHANNELA);
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	2d db       	rcall	.-2470   	; 0xa5c <timer_compareMatchIntSetup>
    1402:	f5 cf       	rjmp	.-22     	; 0x13ee <main+0x8>
    1404:	ff cf       	rjmp	.-2      	; 0x1404 <main+0x1e>

00001406 <__vector_14>:
//#include "../../../_commonCode/lcdStuff/0.50ncf/lcdStuff.c"
//#include "lcdUpdate.c"

//SIGNAL(TIMER1_COMPA_vect)
SIGNAL(TIMER0_COMPA_vect)
{
    1406:	1f 92       	push	r1
    1408:	0f 92       	push	r0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	2f 92       	push	r2
    1412:	3f 92       	push	r3
    1414:	4f 92       	push	r4
    1416:	5f 92       	push	r5
    1418:	6f 92       	push	r6
    141a:	7f 92       	push	r7
    141c:	9f 92       	push	r9
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	27 97       	sbiw	r28, 0x07	; 7
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	cd bf       	out	0x3d, r28	; 61
	setpinPORT(PB2, PORTB);
	clrpinPORT(PB2, PORTB);
#endif


	if(updateLCD())
    1454:	0c df       	rcall	.-488    	; 0x126e <updateLCD>
    1456:	88 23       	and	r24, r24
    1458:	69 f0       	breq	.+26     	; 0x1474 <__vector_14+0x6e>
	{
#if (FRAME_COUNT_TO_DELAY != 0)
			//static uint8_t frameCount = 0;
			frameCount++;
    145a:	80 91 bb 00 	lds	r24, 0x00BB
    145e:	8f 5f       	subi	r24, 0xFF	; 255
    1460:	80 93 bb 00 	sts	0x00BB, r24
			if(frameCount == FRAME_COUNT_TO_DELAY)
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	31 f4       	brne	.+12     	; 0x1474 <__vector_14+0x6e>
			{
				frameCount = 0;
    1468:	10 92 bb 00 	sts	0x00BB, r1
				timer_compareMatchIntSetup(0, OUT_CHANNELA, FALSE);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	f4 da       	rcall	.-2584   	; 0xa5c <timer_compareMatchIntSetup>
	}

#if(defined(LOADROW) && LOADROW)
	//Load the next row into the row(seg)buffer
	//data is enabled after T_VD+T_Vlow...
	if((hsyncCount >= T_VD+T_Vlow) && (hsyncCount < T_VD+T_Vlow+V_COUNT))
    1474:	00 91 b8 00 	lds	r16, 0x00B8
    1478:	10 91 b9 00 	lds	r17, 0x00B9
    147c:	03 52       	subi	r16, 0x23	; 35
    147e:	10 40       	sbci	r17, 0x00	; 0
    1480:	23 e0       	ldi	r18, 0x03	; 3
    1482:	00 30       	cpi	r16, 0x00	; 0
    1484:	12 07       	cpc	r17, r18
    1486:	08 f0       	brcs	.+2      	; 0x148a <__vector_14+0x84>
    1488:	4c c1       	rjmp	.+664    	; 0x1722 <__vector_14+0x31c>
#define Q_HEIGHT	16
		//This should be an init-thing, I guess... it's only a 2-cycle
		// instruction, so it doesn't hurt too much to have it in the loop
		// BUT it does have to occur a while before the first getpinPORT
		// to allow time for the pull-ups to do their job
		setinpuPORT(PB0, PORTB);
    148a:	b8 98       	cbi	0x17, 0	; 23
    148c:	c0 9a       	sbi	0x18, 0	; 24
uint8_t newSeg(uint16_t length, uint8_t red, uint8_t green_blue);
uint8_t stretchSeg(uint16_t additionalLength);

void segClear(void)
{
	segPosition = 0;
    148e:	10 92 b5 00 	sts	0x00B5, r1
	//The important part is the null-length
	// but let's load white just in case
	rowSegBuffer[segPosition].red_length = 6;
    1492:	86 e0       	ldi	r24, 0x06	; 6
    1494:	80 93 0a 01 	sts	0x010A, r24
	rowSegBuffer[segPosition].green_blue = (6<<4) | 3;
    1498:	83 e6       	ldi	r24, 0x63	; 99
    149a:	80 93 0b 01 	sts	0x010B, r24

	// 1024/3/32 = 10.67... so for every 3 segments, add 2
#define Q_STRETCHTOP	1//0//28//2
#define Q_STRETCHDIV 5//30//3
	hfm_t colincrementer_hfm;
	hfm_setup(&colincrementer_hfm, Q_STRETCHTOP, Q_STRETCHDIV);
    149e:	5e 01       	movw	r10, r28
    14a0:	08 94       	sec
    14a2:	a1 1c       	adc	r10, r1
    14a4:	b1 1c       	adc	r11, r1
    14a6:	c5 01       	movw	r24, r10
    14a8:	61 e0       	ldi	r22, 0x01	; 1
    14aa:	45 e0       	ldi	r20, 0x05	; 5
    14ac:	27 db       	rcall	.-2482   	; 0xafc <hfm_setup>
			}

			buttonPressed = FALSE;
		}

		qRow = (rowNum*ICON_HEIGHT/(V_COUNT)); ///2));
    14ae:	c8 01       	movw	r24, r16
    14b0:	24 e0       	ldi	r18, 0x04	; 4
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	2a 95       	dec	r18
    14b8:	e1 f7       	brne	.-8      	; 0x14b2 <__vector_14+0xac>
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	73 e0       	ldi	r23, 0x03	; 3
    14be:	83 d2       	rcall	.+1286   	; 0x19c6 <__udivmodhi4>
    14c0:	e6 2e       	mov	r14, r22
    14c2:	ff 24       	eor	r15, r15
			if(p_selectedSprite == &spriteCOIN)
			{
				if(qCount >= 2)
					p_selectedSprite = &spriteSOLID;
			}
			else if(p_selectedSprite != &spriteQ)
    14c4:	ba e9       	ldi	r27, 0x9A	; 154
    14c6:	6b 2e       	mov	r6, r27
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	7b 2e       	mov	r7, r27
			{
				if(qCount >= 4)
				{
					qCount = 0;
					if(p_selectedSprite != &spriteSOLID)
    14cc:	a3 e9       	ldi	r26, 0x93	; 147
    14ce:	ca 2e       	mov	r12, r26
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	da 2e       	mov	r13, r26
												(p_selectedSprite == &spriteGOOMBA)))
				buttonPressed = FALSE;

			if(buttonPressed)
			{
				if(p_selectedSprite == &spriteGOOMBA)
    14d4:	f9 e6       	ldi	r31, 0x69	; 105
    14d6:	4f 2e       	mov	r4, r31
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	5f 2e       	mov	r5, r31
							break;
						case 1:
							p_selectedSprite = &sprite1UP;
							break;
						case 2:
							p_selectedSprite = &spriteBIG;
    14dc:	ee e7       	ldi	r30, 0x7E	; 126
    14de:	2e 2e       	mov	r2, r30
    14e0:	e0 e0       	ldi	r30, 0x00	; 0
    14e2:	3e 2e       	mov	r3, r30
		}
		else if(p_selectedSprite == &spriteGOOMBA)
		{
			uint8_t gCol = qCol;
			//Goomba moves by flipping horizontally...
			if(qCount & 0x01)
    14e4:	7f e0       	ldi	r23, 0x0F	; 15
    14e6:	97 2e       	mov	r9, r23
			data = getGimpColorVal(p_selectedSprite, 
							qCount%p_selectedSprite->numPalettes, qRow, qCol);
		}
		data = gimpPixelValToLColor(data);

		addSegfb(Q_SEGLENGTH + hfm_nextOutput(&colincrementer_hfm), data);
    14e8:	c5 01       	movw	r24, r10
    14ea:	ba 2c       	mov	r11, r10
    14ec:	a9 2e       	mov	r10, r25
		if((p_selectedSprite == &spriteQ) 
				|| (p_selectedSprite == &spriteGOOMBA))
#else
	#warning "Debugging mode... players can change their result!"
#endif
		if(!getpinPORT(PB0, PORTB))
    14ee:	b0 99       	sbic	0x16, 0	; 22
    14f0:	20 c0       	rjmp	.+64     	; 0x1532 <__vector_14+0x12c>
		{
			if(!buttonPressed)
    14f2:	80 91 bc 00 	lds	r24, 0x00BC
    14f6:	90 91 bd 00 	lds	r25, 0x00BD
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	71 f4       	brne	.+28     	; 0x151a <__vector_14+0x114>
			{
				buttonPressed = rowNum;
    14fe:	10 93 bd 00 	sts	0x00BD, r17
    1502:	00 93 bc 00 	sts	0x00BC, r16
				if(buttonPressed == 0)
    1506:	01 15       	cp	r16, r1
    1508:	11 05       	cpc	r17, r1
    150a:	b1 f4       	brne	.+44     	; 0x1538 <__vector_14+0x132>
					buttonPressed = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	90 93 bd 00 	sts	0x00BD, r25
    1514:	80 93 bc 00 	sts	0x00BC, r24
    1518:	15 c0       	rjmp	.+42     	; 0x1544 <__vector_14+0x13e>
			}
			else if((rowNum-buttonPressed) >= 64)
    151a:	98 01       	movw	r18, r16
    151c:	28 1b       	sub	r18, r24
    151e:	39 0b       	sbc	r19, r25
    1520:	20 34       	cpi	r18, 0x40	; 64
    1522:	31 05       	cpc	r19, r1
    1524:	30 f0       	brcs	.+12     	; 0x1532 <__vector_14+0x12c>
				buttonPressed += 0x4000;
    1526:	80 50       	subi	r24, 0x00	; 0
    1528:	90 4c       	sbci	r25, 0xC0	; 192
    152a:	90 93 bd 00 	sts	0x00BD, r25
    152e:	80 93 bc 00 	sts	0x00BC, r24
		}


#define REALLY_IMMEDIATE	TRUE
#if (defined(REALLY_IMMEDIATE) && REALLY_IMMEDIATE)
		if((rowNum == 0) || (buttonPressed&0x8000))
    1532:	01 15       	cp	r16, r1
    1534:	11 05       	cpc	r17, r1
    1536:	31 f0       	breq	.+12     	; 0x1544 <__vector_14+0x13e>
    1538:	80 91 bc 00 	lds	r24, 0x00BC
    153c:	90 91 bd 00 	lds	r25, 0x00BD
    1540:	97 ff       	sbrs	r25, 7
    1542:	86 c0       	rjmp	.+268    	; 0x1650 <__vector_14+0x24a>
#else
		if(rowNum==0)
#endif
		{
			if(!(buttonPressed&0x8000) && !((p_selectedSprite == &spriteQ) ||
    1544:	80 91 bc 00 	lds	r24, 0x00BC
    1548:	90 91 bd 00 	lds	r25, 0x00BD
    154c:	97 fd       	sbrc	r25, 7
    154e:	10 c0       	rjmp	.+32     	; 0x1570 <__vector_14+0x16a>
    1550:	80 91 60 00 	lds	r24, 0x0060
    1554:	90 91 61 00 	lds	r25, 0x0061
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	8a 39       	cpi	r24, 0x9A	; 154
    155c:	92 07       	cpc	r25, r18
    155e:	41 f0       	breq	.+16     	; 0x1570 <__vector_14+0x16a>
												(p_selectedSprite == &spriteGOOMBA)))
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	89 36       	cpi	r24, 0x69	; 105
    1564:	94 07       	cpc	r25, r20
    1566:	21 f0       	breq	.+8      	; 0x1570 <__vector_14+0x16a>
				buttonPressed = FALSE;
    1568:	10 92 bd 00 	sts	0x00BD, r1
    156c:	10 92 bc 00 	sts	0x00BC, r1

			if(buttonPressed)
    1570:	80 91 bc 00 	lds	r24, 0x00BC
    1574:	90 91 bd 00 	lds	r25, 0x00BD
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	09 f4       	brne	.+2      	; 0x157e <__vector_14+0x178>
    157c:	41 c0       	rjmp	.+130    	; 0x1600 <__vector_14+0x1fa>
			{
				if(p_selectedSprite == &spriteGOOMBA)
    157e:	20 91 60 00 	lds	r18, 0x0060
    1582:	30 91 61 00 	lds	r19, 0x0061
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	29 36       	cpi	r18, 0x69	; 105
    158a:	34 07       	cpc	r19, r20
    158c:	39 f4       	brne	.+14     	; 0x159c <__vector_14+0x196>
				{
					if(qCount == 1)
    158e:	80 91 be 00 	lds	r24, 0x00BE
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	a9 f5       	brne	.+106    	; 0x1600 <__vector_14+0x1fa>
						p_selectedSprite = &spriteDEADGOOMBA;
    1596:	8c e8       	ldi	r24, 0x8C	; 140
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	2e c0       	rjmp	.+92     	; 0x15f8 <__vector_14+0x1f2>
				else
				{
					//Duh...
					// But still, 255 % 3 should give a value from 0 to 2
					//buttonPressed=FALSE;
					qCount = 0;
    159c:	10 92 be 00 	sts	0x00BE, r1
					//NumFramesInImage = iconFrames[iconSelection];
//#define RANDOMSPRITE_OVERRIDE 0
#if(defined(RANDOMSPRITE_OVERRIDE))
					switch(RANDOMSPRITE_OVERRIDE)
#else
					switch ((buttonPressed-1)%(NUM_ICONS*2))
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	6c e0       	ldi	r22, 0x0C	; 12
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	0f d2       	rcall	.+1054   	; 0x19c6 <__udivmodhi4>
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	91 05       	cpc	r25, r1
    15ac:	b1 f0       	breq	.+44     	; 0x15da <__vector_14+0x1d4>
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	30 f4       	brcc	.+12     	; 0x15c0 <__vector_14+0x1ba>
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	59 f0       	breq	.+22     	; 0x15ce <__vector_14+0x1c8>
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	d9 f4       	brne	.+54     	; 0x15f4 <__vector_14+0x1ee>
    15be:	0a c0       	rjmp	.+20     	; 0x15d4 <__vector_14+0x1ce>
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	91 05       	cpc	r25, r1
    15c4:	79 f0       	breq	.+30     	; 0x15e4 <__vector_14+0x1de>
    15c6:	84 30       	cpi	r24, 0x04	; 4
    15c8:	91 05       	cpc	r25, r1
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <__vector_14+0x1ee>
    15cc:	0e c0       	rjmp	.+28     	; 0x15ea <__vector_14+0x1e4>
#endif
					{
						case 0:
							p_selectedSprite = &spriteFLOWER;
    15ce:	80 e7       	ldi	r24, 0x70	; 112
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	12 c0       	rjmp	.+36     	; 0x15f8 <__vector_14+0x1f2>
							break;
						case 1:
							p_selectedSprite = &sprite1UP;
    15d4:	85 e8       	ldi	r24, 0x85	; 133
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0f c0       	rjmp	.+30     	; 0x15f8 <__vector_14+0x1f2>
							break;
						case 2:
							p_selectedSprite = &spriteBIG;
    15da:	30 92 61 00 	sts	0x0061, r3
    15de:	20 92 60 00 	sts	0x0060, r2
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <__vector_14+0x1fa>
							break;
						case 3:
							p_selectedSprite = &spriteSTAR;
    15e4:	87 e7       	ldi	r24, 0x77	; 119
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <__vector_14+0x1f2>
							break;
						case 4:
							p_selectedSprite = &spriteGOOMBA;
    15ea:	50 92 61 00 	sts	0x0061, r5
    15ee:	40 92 60 00 	sts	0x0060, r4
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <__vector_14+0x1fa>
							break;
						default:
							p_selectedSprite = &spriteCOIN;
    15f4:	82 e6       	ldi	r24, 0x62	; 98
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	90 93 61 00 	sts	0x0061, r25
    15fc:	80 93 60 00 	sts	0x0060, r24
					}
				}

				//buttonPressed=FALSE;
			}
			if(p_selectedSprite == &spriteCOIN)
    1600:	80 91 60 00 	lds	r24, 0x0060
    1604:	90 91 61 00 	lds	r25, 0x0061
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	82 36       	cpi	r24, 0x62	; 98
    160c:	92 07       	cpc	r25, r18
    160e:	29 f4       	brne	.+10     	; 0x161a <__vector_14+0x214>
			{
				if(qCount >= 2)
    1610:	80 91 be 00 	lds	r24, 0x00BE
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	78 f4       	brcc	.+30     	; 0x1636 <__vector_14+0x230>
    1618:	17 c0       	rjmp	.+46     	; 0x1648 <__vector_14+0x242>
					p_selectedSprite = &spriteSOLID;
			}
			else if(p_selectedSprite != &spriteQ)
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	8a 39       	cpi	r24, 0x9A	; 154
    161e:	94 07       	cpc	r25, r20
    1620:	99 f0       	breq	.+38     	; 0x1648 <__vector_14+0x242>
			{
				if(qCount >= 4)
    1622:	20 91 be 00 	lds	r18, 0x00BE
    1626:	24 30       	cpi	r18, 0x04	; 4
    1628:	78 f0       	brcs	.+30     	; 0x1648 <__vector_14+0x242>
				{
					qCount = 0;
    162a:	10 92 be 00 	sts	0x00BE, r1
					if(p_selectedSprite != &spriteSOLID)
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	83 39       	cpi	r24, 0x93	; 147
    1632:	92 07       	cpc	r25, r18
    1634:	29 f0       	breq	.+10     	; 0x1640 <__vector_14+0x23a>
						p_selectedSprite = &spriteSOLID;
    1636:	d0 92 61 00 	sts	0x0061, r13
    163a:	c0 92 60 00 	sts	0x0060, r12
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <__vector_14+0x242>
					else
						p_selectedSprite = &spriteQ;
    1640:	70 92 61 00 	sts	0x0061, r7
    1644:	60 92 60 00 	sts	0x0060, r6
				}
			}

			buttonPressed = FALSE;
    1648:	10 92 bd 00 	sts	0x00BD, r1
    164c:	10 92 bc 00 	sts	0x00BC, r1
		// Should use readImageByte... but it's specific to FB_WIDTH
		//uint8_t data=
		//  pgm_read_byte((uint8_t *)(&((p_image)[(qRow)*Q_WIDTH+(qCol)])));
		uint8_t data;
	  
		if(p_selectedSprite == &spriteFLOWER)
    1650:	e0 91 60 00 	lds	r30, 0x0060
    1654:	f0 91 61 00 	lds	r31, 0x0061
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	e0 37       	cpi	r30, 0x70	; 112
    165c:	f4 07       	cpc	r31, r20
    165e:	91 f4       	brne	.+36     	; 0x1684 <__vector_14+0x27e>
		{
			if(qRow<FLOWER_PALETTE1_ROW)
    1660:	87 e0       	ldi	r24, 0x07	; 7
    1662:	8e 15       	cp	r24, r14
    1664:	60 f0       	brcs	.+24     	; 0x167e <__vector_14+0x278>
				data = getGimpColorVal(&spriteFLOWER,
    1666:	60 91 76 00 	lds	r22, 0x0076
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	61 50       	subi	r22, 0x01	; 1
    166e:	70 40       	sbci	r23, 0x00	; 0
    1670:	80 91 be 00 	lds	r24, 0x00BE
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	bb d1       	rcall	.+886    	; 0x19ee <__divmodhi4>
    1678:	68 2f       	mov	r22, r24
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	17 c0       	rjmp	.+46     	; 0x16ac <__vector_14+0x2a6>
							qCount%(spriteFLOWER.numPalettes-1) + 1, qRow, qCol);
			else
				data = getGimpColorVal(&spriteFLOWER,0,qRow, qCol);
    167e:	cf 01       	movw	r24, r30
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	15 c0       	rjmp	.+42     	; 0x16ae <__vector_14+0x2a8>
    1684:	80 91 be 00 	lds	r24, 0x00BE
		}
		else if(p_selectedSprite == &spriteGOOMBA)
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	e9 36       	cpi	r30, 0x69	; 105
    168c:	f9 07       	cpc	r31, r25
    168e:	59 f4       	brne	.+22     	; 0x16a6 <__vector_14+0x2a0>
		{
			uint8_t gCol = qCol;
			//Goomba moves by flipping horizontally...
			if(qCount & 0x01)
    1690:	80 fd       	sbrc	r24, 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <__vector_14+0x292>
    1694:	2f 2d       	mov	r18, r15
    1696:	02 c0       	rjmp	.+4      	; 0x169c <__vector_14+0x296>
    1698:	29 2d       	mov	r18, r9
    169a:	2f 19       	sub	r18, r15
				gCol = 15-qCol;

			data = getGimpColorVal(&spriteGOOMBA, 0, qRow, gCol);
    169c:	89 e6       	ldi	r24, 0x69	; 105
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	4e 2d       	mov	r20, r14
    16a4:	06 c0       	rjmp	.+12     	; 0x16b2 <__vector_14+0x2ac>
		}
		else
		{
			data = getGimpColorVal(p_selectedSprite, 
    16a6:	66 81       	ldd	r22, Z+6	; 0x06
    16a8:	82 d1       	rcall	.+772    	; 0x19ae <__udivmodqi4>
    16aa:	69 2f       	mov	r22, r25
    16ac:	cf 01       	movw	r24, r30
    16ae:	4e 2d       	mov	r20, r14
    16b0:	2f 2d       	mov	r18, r15
    16b2:	5e de       	rcall	.-836    	; 0x1370 <getGimpColorVal.2304>
    16b4:	48 2f       	mov	r20, r24
							qCount%p_selectedSprite->numPalettes, qRow, qCol);
		}
		data = gimpPixelValToLColor(data);
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	80 73       	andi	r24, 0x30	; 48
    16ba:	90 70       	andi	r25, 0x00	; 0
    16bc:	80 32       	cpi	r24, 0x20	; 32
    16be:	91 05       	cpc	r25, r1
    16c0:	0c f0       	brlt	.+2      	; 0x16c4 <__vector_14+0x2be>
    16c2:	40 5f       	subi	r20, 0xF0	; 240

		addSegfb(Q_SEGLENGTH + hfm_nextOutput(&colincrementer_hfm), data);
    16c4:	8b 2d       	mov	r24, r11
    16c6:	9a 2d       	mov	r25, r10
    16c8:	4f 83       	std	Y+7, r20	; 0x07
    16ca:	33 da       	rcall	.-2970   	; 0xb32 <hfm_nextOutput>
    16cc:	4f 81       	ldd	r20, Y+7	; 0x07
    16ce:	24 2f       	mov	r18, r20
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	f9 01       	movw	r30, r18
    16d6:	e3 70       	andi	r30, 0x03	; 3
    16d8:	f0 70       	andi	r31, 0x00	; 0
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	64 2f       	mov	r22, r20
    16e0:	61 70       	andi	r22, 0x01	; 1
    16e2:	6e 2b       	or	r22, r30
    16e4:	40 73       	andi	r20, 0x30	; 48
    16e6:	40 64       	ori	r20, 0x40	; 64
    16e8:	2c 70       	andi	r18, 0x0C	; 12
    16ea:	30 70       	andi	r19, 0x00	; 0
    16ec:	35 95       	asr	r19
    16ee:	27 95       	ror	r18
    16f0:	35 95       	asr	r19
    16f2:	27 95       	ror	r18
    16f4:	42 2b       	or	r20, r18
    16f6:	46 96       	adiw	r24, 0x16	; 22
    16f8:	11 dd       	rcall	.-1502   	; 0x111c <addSeg>
#define Q_STRETCHTOP	1//0//28//2
#define Q_STRETCHDIV 5//30//3
	hfm_t colincrementer_hfm;
	hfm_setup(&colincrementer_hfm, Q_STRETCHTOP, Q_STRETCHDIV);

	for(qCol=0; qCol<Q_WIDTH; qCol++)
    16fa:	f3 94       	inc	r15
    16fc:	20 e1       	ldi	r18, 0x10	; 16
    16fe:	f2 16       	cp	r15, r18
    1700:	09 f0       	breq	.+2      	; 0x1704 <__vector_14+0x2fe>
    1702:	f5 ce       	rjmp	.-534    	; 0x14ee <__vector_14+0xe8>


	//Wow, is it really so smart as to recognize that rowNum is never >=
	// V_COUNT?! was 7684 when if(rowNum==0), then 7668 after this bug...
	//if(rowNum >= V_COUNT)
	if(rowNum >= V_COUNT-1)
    1704:	42 e0       	ldi	r20, 0x02	; 2
    1706:	0f 3f       	cpi	r16, 0xFF	; 255
    1708:	14 07       	cpc	r17, r20
    170a:	29 f4       	brne	.+10     	; 0x1716 <__vector_14+0x310>
	{
		qCount++;
    170c:	80 91 be 00 	lds	r24, 0x00BE
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	80 93 be 00 	sts	0x00BE, r24
	// something to do with white being necessary?
	// Can't recall where 1024/3 was determined, maybe it varies
	// since the LVDS clock is 7 cycles...?
	//OK, so maybe we just need a white pixel at the end...
	// I mean, this works.
	addSegfb(1,_W);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	67 e0       	ldi	r22, 0x07	; 7
    171c:	43 e7       	ldi	r20, 0x73	; 115
    171e:	fe dc       	rcall	.-1540   	; 0x111c <addSeg>


	segTerminate();
    1720:	62 dc       	rcall	.-1852   	; 0xfe6 <segTerminate>
	// to load a row to a row-buffer (as opposed to a frame-buffer)
	// thus, DE could gain more pixels because there would be fewer
	// calculations to determine the memory location to write from
	// This effect has since been minimized
	// BUT loadRow might be necessary for program-memory-based images...
}
    1722:	27 96       	adiw	r28, 0x07	; 7
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	9f 90       	pop	r9
    1756:	7f 90       	pop	r7
    1758:	6f 90       	pop	r6
    175a:	5f 90       	pop	r5
    175c:	4f 90       	pop	r4
    175e:	3f 90       	pop	r3
    1760:	2f 90       	pop	r2
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <vfprintf>:
    176c:	ab e0       	ldi	r26, 0x0B	; 11
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	eb eb       	ldi	r30, 0xBB	; 187
    1772:	fb e0       	ldi	r31, 0x0B	; 11
    1774:	53 c1       	rjmp	.+678    	; 0x1a1c <__prologue_saves__+0x8>
    1776:	6c 01       	movw	r12, r24
    1778:	4b 01       	movw	r8, r22
    177a:	7a 01       	movw	r14, r20
    177c:	fc 01       	movw	r30, r24
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	16 82       	std	Z+6, r1	; 0x06
    1782:	83 81       	ldd	r24, Z+3	; 0x03
    1784:	81 fd       	sbrc	r24, 1
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <vfprintf+0x2c>
    1788:	2f ef       	ldi	r18, 0xFF	; 255
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	fa c0       	rjmp	.+500    	; 0x1982 <vfprintf+0x216>
    178e:	22 e0       	ldi	r18, 0x02	; 2
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	e2 0e       	add	r14, r18
    1794:	f3 1e       	adc	r15, r19
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <vfprintf+0x34>
    1798:	5e 01       	movw	r10, r28
    179a:	08 94       	sec
    179c:	a1 1c       	adc	r10, r1
    179e:	b1 1c       	adc	r11, r1
    17a0:	f6 01       	movw	r30, r12
    17a2:	73 80       	ldd	r7, Z+3	; 0x03
    17a4:	f4 01       	movw	r30, r8
    17a6:	73 fc       	sbrc	r7, 3
    17a8:	85 91       	lpm	r24, Z+
    17aa:	73 fe       	sbrs	r7, 3
    17ac:	81 91       	ld	r24, Z+
    17ae:	4f 01       	movw	r8, r30
    17b0:	88 23       	and	r24, r24
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <vfprintf+0x4a>
    17b4:	e3 c0       	rjmp	.+454    	; 0x197c <vfprintf+0x210>
    17b6:	85 32       	cpi	r24, 0x25	; 37
    17b8:	51 f4       	brne	.+20     	; 0x17ce <vfprintf+0x62>
    17ba:	73 fc       	sbrc	r7, 3
    17bc:	05 91       	lpm	r16, Z+
    17be:	73 fe       	sbrs	r7, 3
    17c0:	01 91       	ld	r16, Z+
    17c2:	4f 01       	movw	r8, r30
    17c4:	05 32       	cpi	r16, 0x25	; 37
    17c6:	11 f0       	breq	.+4      	; 0x17cc <vfprintf+0x60>
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	1a c0       	rjmp	.+52     	; 0x1800 <vfprintf+0x94>
    17cc:	85 e2       	ldi	r24, 0x25	; 37
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	29 c0       	rjmp	.+82     	; 0x1824 <vfprintf+0xb8>
    17d2:	00 23       	and	r16, r16
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <vfprintf+0x6c>
    17d6:	d2 c0       	rjmp	.+420    	; 0x197c <vfprintf+0x210>
    17d8:	8f eb       	ldi	r24, 0xBF	; 191
    17da:	98 e0       	ldi	r25, 0x08	; 8
    17dc:	60 2f       	mov	r22, r16
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	50 d1       	rcall	.+672    	; 0x1a82 <strchr_P>
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <vfprintf+0x88>
    17e6:	03 32       	cpi	r16, 0x23	; 35
    17e8:	11 f4       	brne	.+4      	; 0x17ee <vfprintf+0x82>
    17ea:	10 61       	ori	r17, 0x10	; 16
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <vfprintf+0x88>
    17ee:	0c 36       	cpi	r16, 0x6C	; 108
    17f0:	61 f4       	brne	.+24     	; 0x180a <vfprintf+0x9e>
    17f2:	10 68       	ori	r17, 0x80	; 128
    17f4:	f4 01       	movw	r30, r8
    17f6:	73 fc       	sbrc	r7, 3
    17f8:	05 91       	lpm	r16, Z+
    17fa:	73 fe       	sbrs	r7, 3
    17fc:	01 91       	ld	r16, Z+
    17fe:	4f 01       	movw	r8, r30
    1800:	17 ff       	sbrs	r17, 7
    1802:	e7 cf       	rjmp	.-50     	; 0x17d2 <vfprintf+0x66>
    1804:	00 23       	and	r16, r16
    1806:	09 f4       	brne	.+2      	; 0x180a <vfprintf+0x9e>
    1808:	b9 c0       	rjmp	.+370    	; 0x197c <vfprintf+0x210>
    180a:	88 eb       	ldi	r24, 0xB8	; 184
    180c:	98 e0       	ldi	r25, 0x08	; 8
    180e:	60 2f       	mov	r22, r16
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	37 d1       	rcall	.+622    	; 0x1a82 <strchr_P>
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	49 f0       	breq	.+18     	; 0x182a <vfprintf+0xbe>
    1818:	24 e0       	ldi	r18, 0x04	; 4
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	e2 0e       	add	r14, r18
    181e:	f3 1e       	adc	r15, r19
    1820:	8f e3       	ldi	r24, 0x3F	; 63
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	b6 01       	movw	r22, r12
    1826:	38 d1       	rcall	.+624    	; 0x1a98 <fputc>
    1828:	bb cf       	rjmp	.-138    	; 0x17a0 <vfprintf+0x34>
    182a:	03 36       	cpi	r16, 0x63	; 99
    182c:	29 f0       	breq	.+10     	; 0x1838 <vfprintf+0xcc>
    182e:	03 37       	cpi	r16, 0x73	; 115
    1830:	71 f0       	breq	.+28     	; 0x184e <vfprintf+0xe2>
    1832:	03 35       	cpi	r16, 0x53	; 83
    1834:	e1 f4       	brne	.+56     	; 0x186e <vfprintf+0x102>
    1836:	0a c0       	rjmp	.+20     	; 0x184c <vfprintf+0xe0>
    1838:	87 01       	movw	r16, r14
    183a:	0e 5f       	subi	r16, 0xFE	; 254
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	f7 01       	movw	r30, r14
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	b6 01       	movw	r22, r12
    1846:	28 d1       	rcall	.+592    	; 0x1a98 <fputc>
    1848:	78 01       	movw	r14, r16
    184a:	aa cf       	rjmp	.-172    	; 0x17a0 <vfprintf+0x34>
    184c:	11 60       	ori	r17, 0x01	; 1
    184e:	f7 01       	movw	r30, r14
    1850:	60 80       	ld	r6, Z
    1852:	71 80       	ldd	r7, Z+1	; 0x01
    1854:	03 c0       	rjmp	.+6      	; 0x185c <vfprintf+0xf0>
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	b6 01       	movw	r22, r12
    185a:	1e d1       	rcall	.+572    	; 0x1a98 <fputc>
    185c:	f3 01       	movw	r30, r6
    185e:	10 fd       	sbrc	r17, 0
    1860:	85 91       	lpm	r24, Z+
    1862:	10 ff       	sbrs	r17, 0
    1864:	81 91       	ld	r24, Z+
    1866:	3f 01       	movw	r6, r30
    1868:	88 23       	and	r24, r24
    186a:	a9 f7       	brne	.-22     	; 0x1856 <vfprintf+0xea>
    186c:	90 cf       	rjmp	.-224    	; 0x178e <vfprintf+0x22>
    186e:	04 36       	cpi	r16, 0x64	; 100
    1870:	11 f0       	breq	.+4      	; 0x1876 <vfprintf+0x10a>
    1872:	09 36       	cpi	r16, 0x69	; 105
    1874:	29 f5       	brne	.+74     	; 0x18c0 <vfprintf+0x154>
    1876:	17 ff       	sbrs	r17, 7
    1878:	08 c0       	rjmp	.+16     	; 0x188a <vfprintf+0x11e>
    187a:	f7 01       	movw	r30, r14
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	24 e0       	ldi	r18, 0x04	; 4
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	0a c0       	rjmp	.+20     	; 0x189e <vfprintf+0x132>
    188a:	f7 01       	movw	r30, r14
    188c:	20 81       	ld	r18, Z
    188e:	31 81       	ldd	r19, Z+1	; 0x01
    1890:	b9 01       	movw	r22, r18
    1892:	88 27       	eor	r24, r24
    1894:	77 fd       	sbrc	r23, 7
    1896:	80 95       	com	r24
    1898:	98 2f       	mov	r25, r24
    189a:	22 e0       	ldi	r18, 0x02	; 2
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	e2 0e       	add	r14, r18
    18a0:	f3 1e       	adc	r15, r19
    18a2:	1f 7e       	andi	r17, 0xEF	; 239
    18a4:	97 ff       	sbrs	r25, 7
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <vfprintf+0x14c>
    18a8:	90 95       	com	r25
    18aa:	80 95       	com	r24
    18ac:	70 95       	com	r23
    18ae:	61 95       	neg	r22
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	8f 4f       	sbci	r24, 0xFF	; 255
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	10 64       	ori	r17, 0x40	; 64
    18b8:	a5 01       	movw	r20, r10
    18ba:	2a e0       	ldi	r18, 0x0A	; 10
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	33 c0       	rjmp	.+102    	; 0x1926 <vfprintf+0x1ba>
    18c0:	00 37       	cpi	r16, 0x70	; 112
    18c2:	a9 f0       	breq	.+42     	; 0x18ee <vfprintf+0x182>
    18c4:	01 37       	cpi	r16, 0x71	; 113
    18c6:	30 f4       	brcc	.+12     	; 0x18d4 <vfprintf+0x168>
    18c8:	08 35       	cpi	r16, 0x58	; 88
    18ca:	b1 f0       	breq	.+44     	; 0x18f8 <vfprintf+0x18c>
    18cc:	0f 36       	cpi	r16, 0x6F	; 111
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <vfprintf+0x166>
    18d0:	55 c0       	rjmp	.+170    	; 0x197c <vfprintf+0x210>
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <vfprintf+0x174>
    18d4:	05 37       	cpi	r16, 0x75	; 117
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <vfprintf+0x17a>
    18d8:	08 37       	cpi	r16, 0x78	; 120
    18da:	09 f0       	breq	.+2      	; 0x18de <vfprintf+0x172>
    18dc:	4f c0       	rjmp	.+158    	; 0x197c <vfprintf+0x210>
    18de:	08 c0       	rjmp	.+16     	; 0x18f0 <vfprintf+0x184>
    18e0:	28 e0       	ldi	r18, 0x08	; 8
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	0c c0       	rjmp	.+24     	; 0x18fe <vfprintf+0x192>
    18e6:	1f 7e       	andi	r17, 0xEF	; 239
    18e8:	2a e0       	ldi	r18, 0x0A	; 10
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	08 c0       	rjmp	.+16     	; 0x18fe <vfprintf+0x192>
    18ee:	10 61       	ori	r17, 0x10	; 16
    18f0:	14 62       	ori	r17, 0x24	; 36
    18f2:	20 e1       	ldi	r18, 0x10	; 16
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <vfprintf+0x192>
    18f8:	14 60       	ori	r17, 0x04	; 4
    18fa:	20 e1       	ldi	r18, 0x10	; 16
    18fc:	32 e0       	ldi	r19, 0x02	; 2
    18fe:	17 ff       	sbrs	r17, 7
    1900:	08 c0       	rjmp	.+16     	; 0x1912 <vfprintf+0x1a6>
    1902:	f7 01       	movw	r30, r14
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	44 e0       	ldi	r20, 0x04	; 4
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	07 c0       	rjmp	.+14     	; 0x1920 <vfprintf+0x1b4>
    1912:	f7 01       	movw	r30, r14
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	42 e0       	ldi	r20, 0x02	; 2
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	e4 0e       	add	r14, r20
    1922:	f5 1e       	adc	r15, r21
    1924:	a5 01       	movw	r20, r10
    1926:	e4 d0       	rcall	.+456    	; 0x1af0 <__ultoa_invert>
    1928:	08 2f       	mov	r16, r24
    192a:	0a 19       	sub	r16, r10
    192c:	61 2e       	mov	r6, r17
    192e:	77 24       	eor	r7, r7
    1930:	16 ff       	sbrs	r17, 6
    1932:	04 c0       	rjmp	.+8      	; 0x193c <vfprintf+0x1d0>
    1934:	8d e2       	ldi	r24, 0x2D	; 45
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	b6 01       	movw	r22, r12
    193a:	ae d0       	rcall	.+348    	; 0x1a98 <fputc>
    193c:	64 fe       	sbrs	r6, 4
    193e:	13 c0       	rjmp	.+38     	; 0x1966 <vfprintf+0x1fa>
    1940:	fe 01       	movw	r30, r28
    1942:	e0 0f       	add	r30, r16
    1944:	f1 1d       	adc	r31, r1
    1946:	80 81       	ld	r24, Z
    1948:	80 33       	cpi	r24, 0x30	; 48
    194a:	69 f0       	breq	.+26     	; 0x1966 <vfprintf+0x1fa>
    194c:	80 e3       	ldi	r24, 0x30	; 48
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	b6 01       	movw	r22, r12
    1952:	a2 d0       	rcall	.+324    	; 0x1a98 <fputc>
    1954:	62 fe       	sbrs	r6, 2
    1956:	07 c0       	rjmp	.+14     	; 0x1966 <vfprintf+0x1fa>
    1958:	c3 01       	movw	r24, r6
    195a:	80 72       	andi	r24, 0x20	; 32
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	88 5a       	subi	r24, 0xA8	; 168
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	b6 01       	movw	r22, r12
    1964:	99 d0       	rcall	.+306    	; 0x1a98 <fputc>
    1966:	01 50       	subi	r16, 0x01	; 1
    1968:	f5 01       	movw	r30, r10
    196a:	e0 0f       	add	r30, r16
    196c:	f1 1d       	adc	r31, r1
    196e:	80 81       	ld	r24, Z
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	b6 01       	movw	r22, r12
    1974:	91 d0       	rcall	.+290    	; 0x1a98 <fputc>
    1976:	00 23       	and	r16, r16
    1978:	b1 f7       	brne	.-20     	; 0x1966 <vfprintf+0x1fa>
    197a:	12 cf       	rjmp	.-476    	; 0x17a0 <vfprintf+0x34>
    197c:	f6 01       	movw	r30, r12
    197e:	26 81       	ldd	r18, Z+6	; 0x06
    1980:	37 81       	ldd	r19, Z+7	; 0x07
    1982:	c9 01       	movw	r24, r18
    1984:	2b 96       	adiw	r28, 0x0b	; 11
    1986:	ee e0       	ldi	r30, 0x0E	; 14
    1988:	65 c0       	rjmp	.+202    	; 0x1a54 <__epilogue_restores__+0x8>

0000198a <__mulhi3>:
    198a:	55 27       	eor	r21, r21
    198c:	00 24       	eor	r0, r0

0000198e <__mulhi3_loop>:
    198e:	80 ff       	sbrs	r24, 0
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <__mulhi3_skip1>
    1992:	06 0e       	add	r0, r22
    1994:	57 1f       	adc	r21, r23

00001996 <__mulhi3_skip1>:
    1996:	66 0f       	add	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	61 15       	cp	r22, r1
    199c:	71 05       	cpc	r23, r1
    199e:	21 f0       	breq	.+8      	; 0x19a8 <__mulhi3_exit>
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	99 f7       	brne	.-26     	; 0x198e <__mulhi3_loop>

000019a8 <__mulhi3_exit>:
    19a8:	95 2f       	mov	r25, r21
    19aa:	80 2d       	mov	r24, r0
    19ac:	08 95       	ret

000019ae <__udivmodqi4>:
    19ae:	99 1b       	sub	r25, r25
    19b0:	79 e0       	ldi	r23, 0x09	; 9
    19b2:	04 c0       	rjmp	.+8      	; 0x19bc <__udivmodqi4_ep>

000019b4 <__udivmodqi4_loop>:
    19b4:	99 1f       	adc	r25, r25
    19b6:	96 17       	cp	r25, r22
    19b8:	08 f0       	brcs	.+2      	; 0x19bc <__udivmodqi4_ep>
    19ba:	96 1b       	sub	r25, r22

000019bc <__udivmodqi4_ep>:
    19bc:	88 1f       	adc	r24, r24
    19be:	7a 95       	dec	r23
    19c0:	c9 f7       	brne	.-14     	; 0x19b4 <__udivmodqi4_loop>
    19c2:	80 95       	com	r24
    19c4:	08 95       	ret

000019c6 <__udivmodhi4>:
    19c6:	aa 1b       	sub	r26, r26
    19c8:	bb 1b       	sub	r27, r27
    19ca:	51 e1       	ldi	r21, 0x11	; 17
    19cc:	07 c0       	rjmp	.+14     	; 0x19dc <__udivmodhi4_ep>

000019ce <__udivmodhi4_loop>:
    19ce:	aa 1f       	adc	r26, r26
    19d0:	bb 1f       	adc	r27, r27
    19d2:	a6 17       	cp	r26, r22
    19d4:	b7 07       	cpc	r27, r23
    19d6:	10 f0       	brcs	.+4      	; 0x19dc <__udivmodhi4_ep>
    19d8:	a6 1b       	sub	r26, r22
    19da:	b7 0b       	sbc	r27, r23

000019dc <__udivmodhi4_ep>:
    19dc:	88 1f       	adc	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	5a 95       	dec	r21
    19e2:	a9 f7       	brne	.-22     	; 0x19ce <__udivmodhi4_loop>
    19e4:	80 95       	com	r24
    19e6:	90 95       	com	r25
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	08 95       	ret

000019ee <__divmodhi4>:
    19ee:	97 fb       	bst	r25, 7
    19f0:	09 2e       	mov	r0, r25
    19f2:	07 26       	eor	r0, r23
    19f4:	0a d0       	rcall	.+20     	; 0x1a0a <__divmodhi4_neg1>
    19f6:	77 fd       	sbrc	r23, 7
    19f8:	04 d0       	rcall	.+8      	; 0x1a02 <__divmodhi4_neg2>
    19fa:	e5 df       	rcall	.-54     	; 0x19c6 <__udivmodhi4>
    19fc:	06 d0       	rcall	.+12     	; 0x1a0a <__divmodhi4_neg1>
    19fe:	00 20       	and	r0, r0
    1a00:	1a f4       	brpl	.+6      	; 0x1a08 <__divmodhi4_exit>

00001a02 <__divmodhi4_neg2>:
    1a02:	70 95       	com	r23
    1a04:	61 95       	neg	r22
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255

00001a08 <__divmodhi4_exit>:
    1a08:	08 95       	ret

00001a0a <__divmodhi4_neg1>:
    1a0a:	f6 f7       	brtc	.-4      	; 0x1a08 <__divmodhi4_exit>
    1a0c:	90 95       	com	r25
    1a0e:	81 95       	neg	r24
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	08 95       	ret

00001a14 <__prologue_saves__>:
    1a14:	2f 92       	push	r2
    1a16:	3f 92       	push	r3
    1a18:	4f 92       	push	r4
    1a1a:	5f 92       	push	r5
    1a1c:	6f 92       	push	r6
    1a1e:	7f 92       	push	r7
    1a20:	8f 92       	push	r8
    1a22:	9f 92       	push	r9
    1a24:	af 92       	push	r10
    1a26:	bf 92       	push	r11
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	ca 1b       	sub	r28, r26
    1a3e:	db 0b       	sbc	r29, r27
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	09 94       	ijmp

00001a4c <__epilogue_restores__>:
    1a4c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a4e:	39 88       	ldd	r3, Y+17	; 0x11
    1a50:	48 88       	ldd	r4, Y+16	; 0x10
    1a52:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a54:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a56:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a58:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a5e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a60:	c8 84       	ldd	r12, Y+8	; 0x08
    1a62:	df 80       	ldd	r13, Y+7	; 0x07
    1a64:	ee 80       	ldd	r14, Y+6	; 0x06
    1a66:	fd 80       	ldd	r15, Y+5	; 0x05
    1a68:	0c 81       	ldd	r16, Y+4	; 0x04
    1a6a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a6c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a70:	ce 0f       	add	r28, r30
    1a72:	d1 1d       	adc	r29, r1
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	ed 01       	movw	r28, r26
    1a80:	08 95       	ret

00001a82 <strchr_P>:
    1a82:	fc 01       	movw	r30, r24
    1a84:	05 90       	lpm	r0, Z+
    1a86:	06 16       	cp	r0, r22
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <strchr_P+0x10>
    1a8a:	00 20       	and	r0, r0
    1a8c:	d9 f7       	brne	.-10     	; 0x1a84 <strchr_P+0x2>
    1a8e:	c0 01       	movw	r24, r0
    1a90:	08 95       	ret
    1a92:	31 97       	sbiw	r30, 0x01	; 1
    1a94:	cf 01       	movw	r24, r30
    1a96:	08 95       	ret

00001a98 <fputc>:
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	8c 01       	movw	r16, r24
    1aa2:	eb 01       	movw	r28, r22
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	81 ff       	sbrs	r24, 1
    1aa8:	1b c0       	rjmp	.+54     	; 0x1ae0 <fputc+0x48>
    1aaa:	82 ff       	sbrs	r24, 2
    1aac:	0d c0       	rjmp	.+26     	; 0x1ac8 <fputc+0x30>
    1aae:	2e 81       	ldd	r18, Y+6	; 0x06
    1ab0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab6:	28 17       	cp	r18, r24
    1ab8:	39 07       	cpc	r19, r25
    1aba:	64 f4       	brge	.+24     	; 0x1ad4 <fputc+0x3c>
    1abc:	e8 81       	ld	r30, Y
    1abe:	f9 81       	ldd	r31, Y+1	; 0x01
    1ac0:	01 93       	st	Z+, r16
    1ac2:	f9 83       	std	Y+1, r31	; 0x01
    1ac4:	e8 83       	st	Y, r30
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <fputc+0x3c>
    1ac8:	e8 85       	ldd	r30, Y+8	; 0x08
    1aca:	f9 85       	ldd	r31, Y+9	; 0x09
    1acc:	80 2f       	mov	r24, r16
    1ace:	09 95       	icall
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	31 f4       	brne	.+12     	; 0x1ae0 <fputc+0x48>
    1ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	9f 83       	std	Y+7, r25	; 0x07
    1adc:	8e 83       	std	Y+6, r24	; 0x06
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <fputc+0x4c>
    1ae0:	0f ef       	ldi	r16, 0xFF	; 255
    1ae2:	1f ef       	ldi	r17, 0xFF	; 255
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <__ultoa_invert>:
    1af0:	fa 01       	movw	r30, r20
    1af2:	aa 27       	eor	r26, r26
    1af4:	28 30       	cpi	r18, 0x08	; 8
    1af6:	61 f1       	breq	.+88     	; 0x1b50 <__ultoa_invert+0x60>
    1af8:	20 31       	cpi	r18, 0x10	; 16
    1afa:	91 f1       	breq	.+100    	; 0x1b60 <__ultoa_invert+0x70>
    1afc:	e8 94       	clt
    1afe:	6f 93       	push	r22
    1b00:	6e 7f       	andi	r22, 0xFE	; 254
    1b02:	6e 5f       	subi	r22, 0xFE	; 254
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	af 4f       	sbci	r26, 0xFF	; 255
    1b0c:	b1 e0       	ldi	r27, 0x01	; 1
    1b0e:	40 d0       	rcall	.+128    	; 0x1b90 <__ultoa_invert+0xa0>
    1b10:	b4 e0       	ldi	r27, 0x04	; 4
    1b12:	3e d0       	rcall	.+124    	; 0x1b90 <__ultoa_invert+0xa0>
    1b14:	67 0f       	add	r22, r23
    1b16:	78 1f       	adc	r23, r24
    1b18:	89 1f       	adc	r24, r25
    1b1a:	9a 1f       	adc	r25, r26
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	68 0f       	add	r22, r24
    1b20:	79 1f       	adc	r23, r25
    1b22:	8a 1f       	adc	r24, r26
    1b24:	91 1d       	adc	r25, r1
    1b26:	a1 1d       	adc	r26, r1
    1b28:	6a 0f       	add	r22, r26
    1b2a:	71 1d       	adc	r23, r1
    1b2c:	81 1d       	adc	r24, r1
    1b2e:	91 1d       	adc	r25, r1
    1b30:	a1 1d       	adc	r26, r1
    1b32:	22 d0       	rcall	.+68     	; 0x1b78 <__ultoa_invert+0x88>
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <__ultoa_invert+0x48>
    1b36:	68 94       	set
    1b38:	3f 91       	pop	r19
    1b3a:	06 2e       	mov	r0, r22
    1b3c:	00 0c       	add	r0, r0
    1b3e:	30 19       	sub	r19, r0
    1b40:	00 0c       	add	r0, r0
    1b42:	00 0c       	add	r0, r0
    1b44:	30 19       	sub	r19, r0
    1b46:	30 5d       	subi	r19, 0xD0	; 208
    1b48:	31 93       	st	Z+, r19
    1b4a:	ce f6       	brtc	.-78     	; 0x1afe <__ultoa_invert+0xe>
    1b4c:	cf 01       	movw	r24, r30
    1b4e:	08 95       	ret
    1b50:	46 2f       	mov	r20, r22
    1b52:	47 70       	andi	r20, 0x07	; 7
    1b54:	40 5d       	subi	r20, 0xD0	; 208
    1b56:	41 93       	st	Z+, r20
    1b58:	b3 e0       	ldi	r27, 0x03	; 3
    1b5a:	0f d0       	rcall	.+30     	; 0x1b7a <__ultoa_invert+0x8a>
    1b5c:	c9 f7       	brne	.-14     	; 0x1b50 <__ultoa_invert+0x60>
    1b5e:	f6 cf       	rjmp	.-20     	; 0x1b4c <__ultoa_invert+0x5c>
    1b60:	46 2f       	mov	r20, r22
    1b62:	4f 70       	andi	r20, 0x0F	; 15
    1b64:	40 5d       	subi	r20, 0xD0	; 208
    1b66:	4a 33       	cpi	r20, 0x3A	; 58
    1b68:	18 f0       	brcs	.+6      	; 0x1b70 <__ultoa_invert+0x80>
    1b6a:	49 5d       	subi	r20, 0xD9	; 217
    1b6c:	31 fd       	sbrc	r19, 1
    1b6e:	40 52       	subi	r20, 0x20	; 32
    1b70:	41 93       	st	Z+, r20
    1b72:	02 d0       	rcall	.+4      	; 0x1b78 <__ultoa_invert+0x88>
    1b74:	a9 f7       	brne	.-22     	; 0x1b60 <__ultoa_invert+0x70>
    1b76:	ea cf       	rjmp	.-44     	; 0x1b4c <__ultoa_invert+0x5c>
    1b78:	b4 e0       	ldi	r27, 0x04	; 4
    1b7a:	a6 95       	lsr	r26
    1b7c:	97 95       	ror	r25
    1b7e:	87 95       	ror	r24
    1b80:	77 95       	ror	r23
    1b82:	67 95       	ror	r22
    1b84:	ba 95       	dec	r27
    1b86:	c9 f7       	brne	.-14     	; 0x1b7a <__ultoa_invert+0x8a>
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	61 05       	cpc	r22, r1
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	08 95       	ret
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	0a 2e       	mov	r0, r26
    1b96:	06 94       	lsr	r0
    1b98:	57 95       	ror	r21
    1b9a:	47 95       	ror	r20
    1b9c:	37 95       	ror	r19
    1b9e:	27 95       	ror	r18
    1ba0:	ba 95       	dec	r27
    1ba2:	c9 f7       	brne	.-14     	; 0x1b96 <__ultoa_invert+0xa6>
    1ba4:	62 0f       	add	r22, r18
    1ba6:	73 1f       	adc	r23, r19
    1ba8:	84 1f       	adc	r24, r20
    1baa:	95 1f       	adc	r25, r21
    1bac:	a0 1d       	adc	r26, r0
    1bae:	08 95       	ret

00001bb0 <_exit>:
    1bb0:	f8 94       	cli

00001bb2 <__stop_program>:
    1bb2:	ff cf       	rjmp	.-2      	; 0x1bb2 <__stop_program>
